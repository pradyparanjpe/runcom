#!/usr/bin/env sh
# -*- coding:utf-8; mode:shell-script -*-
#
# Copyright 2020, 2021, 2022 Pradyumna Paranjape
#
# This file is part of Prady_runcom.
#
# Prady_runcom is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Prady_runcom is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Prady_runcom.  If not, see <https://www.gnu.org/licenses/>.

# shellcheck disable=SC1091
. "${RUNCOMDIR:-${HOME}/.runcom}/bin/common.sh" || exit 1

set_vars() {
    unset DBUS_SESSION_BUS_ADDRESS
    unset SESSION_MANAGER
    # Hopefully, following X11's rc
    client=""
    userclientrc="${HOME}/.wayinitrc"
    sysclientrc="/etc/wayland/wayinit/wayinitrc"
    defaultclientargs=""
    clientargs=""
    exec_cmd=""
}

cli_args () {
    while [ -n "$1" ]; do
        case "$1" in
            --)
                printf "Wayland doesn't run an xserver. " >&2
                printf "Ignoring server-args.\n" >&2
                break
                ;;
            *)
                if [ -z "${client}" ]; then
                    client="${1}"
                else
                    clientargs="${clientargs} ${1}"
                fi
                ;;
        esac
        shift
    done

    if [ -z "${client}" ]; then
        if [ -f "${userclientrc}" ]; then
            client="${userclientrc}"
        elif [ -f "${sysclientrc}" ]; then
            client="${sysclientrc}"
        fi
    fi

    # if no client arguments, use defaults
    if [ -z "$clientargs" ]; then
        clientargs="${defaultclientargs}"
    fi
}

parse_initrc () {
    # $1 wayinitrc file path
    file_is_exec=true
    while read -r init_line; do
        if [ ! "${init_line%.desktop}" = "${init_line}" ]; then
            file_is_exec=false
            parse_desktop_entry "${init_line}" "wayland-"
            break
        fi
    done<"${1}"
    if ${file_is_exec}; then
        exec_cmd="sh ${1}"
    fi
    unset file_is_exec
}

parse_client () {
    if builtin command -v "${client}" >/dev/null 2>&1 \
           || [ -x "${client}" ]; then
        exec_cmd="${client}"
    elif [ ! "${client%.desktop}" = "${client}" ]; then
        parse_desktop_entry "${client}" "wayland-"
    else
        # parse it to locate .desktop entry if available
        parse_initrc "${client}"
    fi
    if [ -z "${exec_cmd}" ]; then
        clean_exit 1 "Couldn't find session executable for ${client}."
    fi
}

unset_vars () {
    unset client
    unset userclientrc
    unset sysclientrc
    unset defaultclientargs
    unset clientargs
    unset exec_cmd

    if builtin command -v deallocvt > /dev/null 2>&1; then
        deallocvt
    fi
}

main () {
    set_vars
    cli_args "$@"
    parse_client
    # shellcheck disable=SC2086
    dbus-run-session ${exec_cmd} ${clientargs}
    exit_code=$?
    clean_exit $exit_code
}
main "$@"
