# -*- mode:org; coding: utf-8; -*-
#+TITLE: shell run com
#+SETUPFILE: header.org
#+PROPERTY: header-args :mkdirp t :results no :eval no

* Interactive shell pre-commands:
Code tangled by this file will be executed in *INTERACTIVE* shells.
Such code is executed every time a new terminal is opened.
Hence, it *does* have a toll on speed of opening the terminal.

#+begin_tip
Use =${HOME}/.local/share/RUNCOM/dotfiles/profile.d/*= for code that must be executed only once at login shell.
#+end_tip

** Tangle target
- This file tangles following run-command files:
  - =${HOME}/.local/share/RUNCOM/dotfiles/dot-bashrc= -> =${HOME}/.bashrc=
  - =${HOME}/.local/share/RUNCOM/dotfiles/dot-zshrc= -> =${HOME}/.zshrc=
  - =${HOME}/.local/share/RUNCOM/dotfiles/dot-shrc= -> =${HOME}/.shrc=
  - =${HOME}/.local/share/RUNCOM/dotfiles/dot-shrc.d/*= -> =${HOME}/.shrc.d/*=

* Headers
Shellcheck headers and copyright/license banners
#+begin_src emacs-lisp :tangle ../dotfiles/dot-bashrc :noweb yes :eval yes :exports none
  <<header.org:bash-check()>>
  <<header.org:banner()>>
#+end_src

#+begin_src emacs-lisp :tangle ../dotfiles/dot-zshrc :noweb yes :eval yes :exports none
  <<header.org:posix-check()>>
  <<header.org:banner()>>
#+end_src

#+begin_src emacs-lisp :tangle ../dotfiles/dot-shrc :noweb yes :eval yes :exports none
  <<header.org:posix-check()>>
  <<header.org:banner()>>
#+end_src

#+begin_src emacs-lisp :tangle ../dotfiles/dot-shrc.d/alternatives :noweb yes :eval yes :exports none
  <<header.org:posix-check()>>
  <<header.org:banner()>>
#+end_src

#+begin_src emacs-lisp :tangle ../dotfiles/dot-shrc.d/func :noweb yes :eval yes :exports none
  <<header.org:posix-check()>>
  <<header.org:banner()>>
#+end_src

#+begin_src emacs-lisp :tangle ../dotfiles/dot-shrc.d/nav :noweb yes :eval yes :exports none
  <<header.org:posix-check()>>
  <<header.org:banner()>>
#+end_src

#+begin_src emacs-lisp :tangle ../dotfiles/dot-shrc.d/ps :noweb yes :eval yes :exports none
  <<header.org:posix-check()>>
  <<header.org:banner()>>
#+end_src

#+begin_src emacs-lisp :tangle ../dotfiles/dot-shrc.d/variables :noweb yes :eval yes :exports none
  <<header.org:posix-check()>>
  <<header.org:banner()>>
#+end_src

#+begin_src emacs-lisp :tangle ../dotfiles/dot-shrc.d/venv :noweb yes :eval yes :exports none
  <<header.org:posix-check()>>
  <<header.org:banner()>>
#+end_src

** Reaffirm interactive shell
Prevent (ba|z)shrc from running outside non-interactive mode
#+begin_src bash :tangle ../dotfiles/dot-bashrc :noweb-ref interactivesh
  case $- in
      ,*i*)
      ;;
      ,*)
          return
          ;;
  esac
#+end_src

#+begin_src bash :tangle ../dotfiles/dot-zshrc :noweb yes
  <<interactivesh>>
#+end_src

* zstyle
#+begin_src bash :tangle ../dotfiles/dot-zshrc
  # The following lines were added by compinstall

  zstyle ':completion:*' completer _complete _ignored _approximate
  zstyle ':completion:*' list-colors ''
  zstyle ':completion:*' matcher-list ''
  zstyle ':completion:*' max-errors 2
  zstyle ':completion:*' menu select=3
  zstyle ':completion:*' select-prompt %SScrolling \
         active: current selection at %p%s
  zstyle :compinstall filename "${HOME}/.zshrc"

  # End of lines added by compinstall
  # Lines configured by zsh-newuser-install
#+end_src

* Options
** bash
#+begin_src bash :tangle ../dotfiles/dot-bashrc
  shopt -s autocd
  shopt -s checkwinsize
  shopt -s extglob
  shopt -s globstar
  shopt -s histappend
  shopt -s histverify
#+end_src

** zsh
- Option descriptions
  - =AUTOCD=: Change directory without typing =cd=.
  - =INTERACTIVE_COMMENTS=: Allow comments in interactive shell.
  - =APPENDHISTORY=: Append to history file rather than replacing it.
  - =EXTENDED_GLOB=: Treat =#=, =~=, =^= as part of pattern.
  - =NOTIFY=: Report status of background jobs immediately.
  - =BEEP=: Beep on error in ZLE.
  - =BANG_HIST=: Treat the =!= character specially during expansion.
  - =EXTENDED_HISTORY=: Write the history file in the =:start:elapsed;command= format.
  - =INC_APPEND_HISTORY=: Write to the history file immediately, not when the shell exits.
  - =HIST_EXPIRE_DUPS_FIRST=: Expire duplicate entries first when trimming history.
  - =HIST_IGNORE_DUPS=: Don't record an entry that was just recorded again.
  - =HIST_IGNORE_ALL_DUPS=: Delete old recorded entry if new entry is a duplicate.
  - =HIST_FIND_NO_DUPS=: Do not display a line previously found.
  - =HIST_SAVE_NO_DUPS=: Don't write duplicate entries in the history file.
  - =HIST_IGNORE_SPACE=: Don't record an entry starting with a space.
  - =HIST_REDUCE_BLANKS=: Remove superfluous blanks before recording entry.
  - =HIST_VERIFY=: Don't execute immediately upon history expansion.
#+begin_src sh :tangle ../dotfiles/dot-zshrc
  ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#5f6f7f,bg=#172737"
  ZSH_AUTOSUGGEST_STRATEGY=("history" "completion")
  unsetopt BEEP
  setopt AUTOCD
  setopt INTERACTIVE_COMMENTS
  setopt APPEND_HISTORY
  setopt EXTENDED_GLOB
  setopt NOTIFY
  setopt BANG_HIST
  setopt EXTENDED_HISTORY
  setopt INC_APPEND_HISTORY
  setopt HIST_EXPIRE_DUPS_FIRST
  setopt HIST_IGNORE_DUPS
  setopt HIST_IGNORE_ALL_DUPS
  setopt HIST_FIND_NO_DUPS
  setopt HIST_SAVE_NO_DUPS
  setopt HIST_IGNORE_SPACE
  setopt HIST_REDUCE_BLANKS
  setopt HIST_VERIFY
  autoload colors && colors
  autoload add-zsh-hook
  autoload -Uz compinit
  autoload -Uz bashcompinit
  compinit
  bashcompinit
#+end_src

#+begin_seealso
$ man 1 zshoptions
#+end_seealso

* History
- Unset options:
  - setopt SHARE_HISTORY             # Share history between all sessions.
  - setopt HIST_BEEP                 # Beep when accessing non-existent history.

#+begin_src bash :tangle ../dotfiles/dot-bashrc
  shopt -s histappend
  HISTCONTROL=ignoreboth
  HISTFILE="${XDG_CACHE_HOME:-${HOME}/.cache}/.bash_history"
  HISTFILESIZE=10000
  HISTSIZE=10000
#+end_src

#+begin_src sh :tangle ../dotfiles/dot-zshrc
  HISTFILE="${XDG_CACHE_HOME:-${HOME}/.cache}/.zhistory"
  HISTSIZE=10000
  SAVEHIST=10000
#+end_src

* Coloured terminals
#+begin_src bash :tangle ../dotfiles/dot-bashrc
  case "$TERM" in
      xterm-kitty|alacritty|xterm-color|*-256color)
          color_prompt=yes
          export color_prompt
          ;;
  esac
#+end_src

* Key-bindings
#+begin_src bash :tangle ../dotfiles/dot-bashrc
  set -o vi
  bind '"jk":vi-movement-mode'
  bind '"^O":lfcd\n"'
  bind '"^F":fzfcd\n"'
  bind '"^E":deactivate 2>/dev/null || true\n"'
  bind '"^N":force_global_venv\n"'
#+end_src

#+begin_src sh :tangle ../dotfiles/dot-zshrc
  term_key_source="${HOME}/.zkbd/$TERM-${DISPLAY:-$VENDOR-$OSTYPE}"
  if [ -f "${term_key_source}" ]; then
      . "${term_key_source}"
  fi
  # keybindings
  bindkey -v
  bindkey -s '^o' 'lfcd\n'
  bindkey -s '^f' 'fzfcd\n'
  bindkey -s '^E' 'deactivate 2>/dev/null || true\n'
  bindkey -s '^N' 'force_global_venv\n'
  bindkey '^[[P' delete-char  # backspace key
  bindkey '^[[1;5D' vi-backward-word  # ctrl <-
  bindkey '^[[1;5C' vi-forward-word  # ctrl ->
  bindkey '^[[3~' vi-delete-char  # delete key
  bindkey '^[[F' vi-end-of-line  # end key
  bindkey '^[[H' vi-beginning-of-line  # home key
  bindkey "^[[27;2;13~" vi-open-line-below  # shift Return
  export KEYTIMEOUT=10

  # Use vim keys in tab complete menu:
  zmodload zsh/complist
  zmodload zsh/mapfile
  bindkey -M menuselect 'h' vi-backward-char
  bindkey -M menuselect 'k' vi-up-line-or-history
  bindkey -M menuselect 'l' vi-forward-char
  bindkey -M menuselect 'j' vi-down-line-or-history
  bindkey -v '^?' backward-delete-char
  bindkey -M viins 'jk' vi-cmd-mode
  bindkey '^r' history-incremental-search-backward
#+end_src

* cache files
#+begin_src sh :tangle ../dotfiles/dot-zshrc
  ZSH_COMPDUMP="${XDG_CACHE_HOME:-${HOME}/.cache}/.zcompdump"
#+end_src

* Change shape of cursor according to mode
** bash
#+begin_src bash :tangle ../dotfiles/dot-bashrc
  set show-mode-in-prompt on
  set vi-cmd-mode-string "\1\e[2 q\2"
  set vi-ins-mode-string "\1\e[6 q\2"
#+end_src

** zsh
#+begin_src sh :tangle ../dotfiles/dot-zshrc
  # Use beam shape cursor for each new prompt.
  _rc_fix_cursor () {
      echo -ne '\e[6 q'
  }
  add-zsh-hook precmd _rc_fix_cursor

  # Change cursor shape for different vi modes.
  zle-keymap-select () {
      if [ "${KEYMAP}" = "vicmd" ] ||
             [ "${1}" = 'block' ]; then
          printf '\e[2 q'

      elif [ "${KEYMAP}" = "main" ] ||
               [ "${KEYMAP}" = "viins" ] ||
               [ "${KEYMAP}" = '' ] ||
               [ "${1}" = 'beam' ]; then
          printf '\e[6 q'
      elif [ "${KEYMAP}" = "visual" ]; then
          printf '\e[4 q'
      fi
  }
  zle -N zle-keymap-select
#+end_src

* Inherit
** bash
#+begin_src bash :tangle ../dotfiles/dot-bashrc
  # shellcheck source=".runcom/dotfiles/dot-shrc"
  if [ -f "${HOME}/.shrc" ]; then
      . "${HOME}/.shrc"
  fi
  if [ -f "${RUNCOMDIR}/bash-preexec/bash-preexec.sh" ]; then
      . "${RUNCOMDIR}/bash-preexec/bash-preexec.sh"
  fi
#+end_src

** zsh
#+begin_src bash :tangle ../dotfiles/dot-zshrc
  # shellcheck source=".runcom/dotfiles/dot-shrc"
  if [ -f "${HOME}/.shrc" ]; then
      . "${HOME}/.shrc"
  fi
  while read -r addition; do
      while read -r share_dir; do
          add_dir="${share_dir}/zsh-${addition}"
          if [ -d "${add_dir}" ]; then
  # shellcheck disable=SC1090
              . "${add_dir}/zsh-${addition}.zsh"
              break
          fi
      done << data_dir
  /usr/local/share
  /usr/share
  /usr/share/zsh/plugins
  ${XDG_DATA_HOME:-${HOME}/.local/share}
  ${HOME}/local/share
  ${HOME}/share
  data_dir
  done << addlist
  syntax-highlighting
  autosuggestions
  addlist

  unset addition share_dir add_dir
#+end_src

** shrc
*** Current shell
Which shell is running?
#+begin_src sh :tangle ../dotfiles/dot-shrc
  _RC_SHELL="$(readlink /proc/$$/exe | sed "s/.*\///")"
  export _RC_SHELL
#+end_src

* Alternatives
** Alias-er script
Alias some common commands to better alternatives if available.
Commands that are listed (<space> separated) in the environment variable
~_RC_NO_ALT~ are not aliased.

#+begin_src sh :tangle ../dotfiles/dot-shrc.d/alternatives
  # use better alternatives
  # Args:
  #     canon_cmd: canonically used command
  #     alt_cmds: optional list of alternatives aliased if $0 is available
  # Environment Variables
  #     _RC_NO_ALT: Don't replace alternatives for <space> separated
  _rc_alternative () {
      if [ ! "${_RC_NO_ALT% "${1}"*}" = "${_RC_NO_ALT}" ] ||\
         [ ! "${_RC_NO_ALT#*"${1}" }" = "${_RC_NO_ALT}" ] ||\
         [ "${1}" = "${_RC_NO_ALT}" ]; then
          return
      fi
      _rc_old_cmd="${1}"
      shift
      for _rc_alt in "$@"; do
          if builtin command -v "${_rc_alt%% *}" >/dev/null 2>&1; then
              eval "alias ${_rc_old_cmd}=\"${_rc_alt}\"";
              return
          fi
      done
      unset _rc_alt _rc_old_cmd
  }
#+end_src

** Alias commands
#+begin_src sh :tangle ../dotfiles/dot-shrc.d/alternatives
  _rc_alternative cat bat
  _rc_alternative diff delta difft
  _rc_alternative df lfs
  _rc_alternative du "dust" "du -hc"
  _rc_alternative grep "rg --color=auto" "ag" "pt" "ack"
  _rc_alternative ls "eza -F -h --color=auto"
  _rc_alternative vim nvim
  _rc_alternative ex nvim
  _rc_alternative docker podman
  _rc_alternative docker-compose "podman compose"
#+end_src

** Atuin
Use [[https://github.com/ellie/atuin][atuin]] for up-arrow history if available
#+begin_src sh :tangle ../dotfiles/dot-shrc.d/alternatives
  if builtin command -v 'atuin' >/dev/null 2>&1; then
      eval "$(atuin init "${_RC_SHELL}" 2>/dev/null)"
  fi
#+end_src

** List Contents
#+begin_src sh :tangle ../dotfiles/dot-shrc.d/alternatives
  alias la='ls -a';
  alias ll='ls -lr -s size';
  alias lla='ls -la';
  alias l.='ls -a | grep "^\."';
  alias sl="ls";
#+end_src

* Functions
** Prompt String
*** Exit_color
#+begin_src sh :tangle ../dotfiles/dot-shrc.d/ps
  # Print ANSI terminal escape codes for colors according to exit status
  # of latest (last) executed command
  _rc_last_exit_color () {
      case "$1" in
          0)
              # success
              printf "\e[0;32m"
              ;;
          1)
              # general error
              printf "\e[0;33m"
              ;;
          2)
              # misuse of shell builtins
              printf "\e[0;31m"
              ;;
          126)
              # cannot execute
              printf "\e[0;37m"
              ;;
          127)
              # command not found
              printf "\e[0;30m"
              ;;
          255)
              # exit status limit
              printf "\e[0;31m"
              ;;
          ,*)
              if [ "$1" -gt "63" ] && [ "$1" -lt "84" ]; then
                  # syserror.h
                  printf "\e[0;91m"

              elif [ "$1" -gt "127" ] && [ "$1" -lt "191" ]; then
                  # Fatal error
                  printf "\e[0;41m"
              else
                  printf "\e[0;31m"
              fi
              unset _err
              ;;
      esac
  }
#+end_src

*** Elapsed_time
#+begin_src sh :tangle ../dotfiles/dot-shrc.d/ps
  # Calculate time elapsed (min/sec) while executing last command
  _elapsed_time() {
      # $1 is start time $2 is end time
      if [ $# -lt 2 ]; then
          return
      fi
      _sec=$(( "$2" - "$1" ))
      if [ "$_sec" -le 0 ]; then
          return
      fi
      if [ "$_sec" -le 60 ]; then
          printf "%s" "${_sec}"
          unset _sec
          return
      fi
      _min=$(( _sec/60 ))
      unset _sec
      if [ "$_min" -le 60 ]; then
          printf "%sm" "${_min}"
          unset _min
          return
      fi
      _hr=$(( _min/60 ))
      unset _min
      if [ "$_hr" -le 24 ]; then
          printf "%sh" "${_hr}"
          unset _hr
          return
      fi
      _day=$(( _hr/24 ))
      printf "%sd" "${_day}"
      unset _min _day
  }
#+end_src

*** PROMPT_COMMAND
**** bash
#+begin_src bash :tangle ../dotfiles/dot-bashrc
  # export PROMPT_COMMAND=__prompt_command
  preexec() {
      _cmd_start_t="${SECONDS}"
  }

  precmd () {
      _exit_color="$(_rc_last_exit_color $?)"

      _elapsed="$(_elapsed_time $_cmd_start_t ${SECONDS})"
      unset _cmd_start_t

      # unset previous
      PS1=""
      PS2=""
      PS3=""
      PS4=""
      RPROMPT=""

      PS1+="\[\e[0;32m\]\u\[\e[m\]"
      PS1+="\[\e[3;35m\]\$(_rc_show_venv)\[\e[m\]"
      PS1+="@"
      PS1+="\[\e[0;34m\]\h\[\e[m\]"
      PS1+="\$(git_ps)"
      PS1+="\[\e[0;36m\]:\W"
      PS1+="\[\e[0;37m\]"

      PS1+="$(date '+%H:%M:%S')"
      PS1+=" ${_exit_color}-${_elapsed}"
      PS1+='\[\e[m\]\n» '

      PS2=""
      PS2+="\[\e[0;36m\]cont..."
      PS2+="\[\e[m\]"
      PS2+="» ";

      PS3='Selection: ';
  }
#+end_src

**** zsh
#+begin_src bash :tangle ../dotfiles/dot-zshrc
  _rc_pspexec() {
      _cmd_start_t="${SECONDS}"
  }

  _rc_pspps () {
      _exit_color="$(_rc_last_exit_color $?)"

      _elapsed="$(_elapsed_time $_cmd_start_t ${SECONDS})"
      unset _cmd_start_t

      # unset previous
      PS1=$''
      PS2=$''
      PS3=$''
      PS4=$''
      RPROMPT=$''

      PS1+=$'%{\e[0;32m%}%n%{\e[m%}'
      PS1+=$'%{\e[3;35m%}'
      PS1+="$(_rc_show_venv)"
      PS1+=$'%{\e[m%}'
      PS1+=$'@'
      PS1+=$'%{\e[0;34m%}%m%{\e[m%}'
      PS1+="$(git_ps)"
      PS1+=$'%{\e[0;36m%}:%1~'
      PS1+=$'%{\e[0;37m%}\n%{\e[m%}» '

      PS2+=$'%{\e[0;36m%}cont...'
      PS2+=$'%{\e[m%}'
      PS2+=$'» '

      PS3='Selection: '

      RPROMPT+=$'%*'
      RPROMPT+="%{$_exit_color%}-${_elapsed}"
      RPROMPT+=$'%{\e[m%}'
      unset _exit_stat _elapsed
  }

  add-zsh-hook precmd _rc_pspps
  add-zsh-hook preexec _rc_pspexec
#+end_src

** Virtual Environment
*** Quickly change to virtualenv
Scan up to mount-point, if any direct parent has =.venv=, source that "=.venv/bin/activate=".
This shall only work with zsh or bash, since csh and fish have separate activation files with the respective extensions.
#+begin_src sh :tangle ../dotfiles/dot-shrc.d/venv
  # Walk upto mount-point (if within 16 levels) and look for
  # '.venv' directory that contains python
  # virtual environment. If found, switch to it
  to_venv () {
      test_d="$(readlink -f "${PWD}")"
      parents=16  # path too long to waste time
      until mountpoint "${test_d}" > /dev/null 2> /dev/null; do
          if [ $parents -le 0 ]; then
              printf "Too many branch-nodes searched" >&2
              unset parents test_d env_d
              return 126
          fi
          for env_d in ".venv" "venv"; do
              if [ -d "${test_d}/${env_d}" ] \
                     || [ -L "${test_d}/${env_d}" ]; then
                  # shellcheck disable=SC1090
                  . "${test_d}/${env_d}/bin/activate"
                  printf "Found %s, switching...\n" "${test_d}/${env_d}"
                  unset parents test_d env_d
                  return 0
              fi
          done
          test_d="$(dirname "${test_d}")"
          parents=$((parents - 1))
      done
      printf "Couldn't find .venv upto mountpoint %s\n" "${test_d}" >&2
      unset parents test_d env_d
      return 126
  }
#+end_src

*** Virtualenv in prompt string
#+begin_src sh :tangle ../dotfiles/dot-shrc.d/ps
  _rc_show_venv () {
      # if a virtualenv is active, print it's name
      if [ -n "${VIRTUAL_ENV}" ]; then
          base="$(basename "${VIRTUAL_ENV}")"
          if [ "${base}" = ".venv" ] || [ "${base}" = "venv"  ]; then
              printf "/%s" "$(basename "$(dirname "${VIRTUAL_ENV}")")"
              unset base
          else
              printf "/%s" "${base}"
              unset base
          fi
      fi
  }
#+end_src

*** disable auto-venv
To disable auto-switching virtualenv, hard-set VIRTUAL_ENV
- Calling the function again reverts
#+begin_src sh :tangle ../dotfiles/dot-shrc.d/venv
  # When we wish NOT to use first encountered venv (default behaviour)
  # we use this function. (function behaviour: toggle)
  toggle_global_env () {
      if [ "${VIRTUAL_ENV}" = "Global_Env" ]; then
          unset VIRTUAL_ENV
          to_venv 2>/dev/null
      else
          deactivate 2>/dev/null
          VIRTUAL_ENV="Global_Env"
      fi
  }
#+end_src

** Git
*** Status
#+begin_src sh :tangle ../dotfiles/dot-shrc.d/ps
  git_status() {
      _modified=0
      _cached=0
      _untracked=0

      while read -r _line; do
          case "${_line}" in
              _*_\ _)
                  _cached=1
                  ;;
              _\ _*_)
                  _modified=1
                  ;;
              _?_?_)
                  _untracked=1
                  ;;
          esac
      done << endstat
  $(git status --short | cut -b -2 | sed -e 's/\(.\)\(.*\)/_\1_\2_/')
  endstat

      _stat_str=''
      if [ "$_modified" -ne 0 ]; then
          _stat_str="${_stat_str}\033[0;31m\ue728"
      fi

      if [ "$_cached" -ne 0 ]; then
          _stat_str="${_stat_str}\033[0;32m\ue729"
      fi

      if [ "$_untracked" -ne 0 ]; then
          _stat_str="${_stat_str}\033[0;31m\uf476"
      fi

      if [ -n "$(git stash list)" ]; then
          _stat_str="${_stat_str}\e[0;36m\uf48e"
      fi
      if [ -n "${_stat_str}" ]; then
          # shellcheck disable=SC2059  # I do want escape characters
          printf "${_stat_str}\e[m"
      fi
      unset _modified _cached _untracked _stat_str
  }
#+end_src

*** Branch
#+begin_src sh :tangle ../dotfiles/dot-shrc.d/ps
  git_branch() {
      branch_str=''
      branch="$(git branch 2>/dev/null | grep '^\*' | sed -e 's/^* //')"
      if [ -n "${branch}" ]; then
          case "${branch}" in
              feat-*)
                  branch_str="${branch_str}\033[0;32m"
                  ;;
              bug-*)
                  branch_str="${branch_str}\033[0;31m"
                  ;;
              act-*)
                  branch_str="${branch_str}\e[0;36m"
                  ;;
              tmp-*)
                  branch_str="${branch_str}\e[0;36m"
                  ;;
              ,*HEAD\ detached*|,*rebasing*)
                  branch_str="${branch_str}\e[0;33m"
                  ;;
              main|master)
                  unset branch branch_str
                  return
                  ;;
              ,*)
                  branch_str="${branch_str}\e[0;35m"
                  ;;
          esac
      fi
      printf "${branch_str}%s\ue725\e[m" "${branch}"
      unset branch_str branch
  }
#+end_src

*** Hash
#+begin_src sh :tangle ../dotfiles/dot-shrc.d/ps
  git_hash() {
      git log --pretty=format:'%h' -n 1
  }
#+end_src

*** Prompt string
Include git's branch, hash, status in PS1 if in git repository.
This function is called in PS1 section below.
#+NAME: Git PS
#+begin_src sh :tangle ../dotfiles/dot-shrc.d/ps
  git_ps() {
      if ! git status --ignore-submodules >/dev/null 2>&1; then
          return
      else
          printf " %s%s%s " "$(git_branch)" "$(git_hash)" "$(git_status)"
      fi
  }
#+end_src

** vterm
Directory and prompt tracking
#+begin_src bash :tangle ../dotfiles/dot-shrc.d/ps
  vterm_prompt_end() {
      vterm_printf "51;A$(whoami)@$(hostname):$(pwd)"
  }
#+end_src

#+begin_src bash :tangle ../dotfiles/dot-zshrc
  setopt PROMPT_SUBST
  PROMPT=$PROMPT'%{$(vterm_prompt_end)%}'
#+end_src

#+begin_src bash :tangle ../dotfiles/dot-bashrc
  PS1=$PS1'\[$(vterm_prompt_end)\]'
#+end_src

*** Vterm printf
#+begin_src sh :tangle ../dotfiles/dot-shrc.d/ps
  vterm_printf() {
      if [ -n "$TMUX" ] \
             && { [ "${TERM%%-*}" = "tmux" ] \
                     || [ "${TERM%%-*}" = "screen" ]; }; then
          # Tell tmux to pass the escape sequences through
          printf "\ePtmux;\e\e]%s\007\e\\" "$1"
      elif [ "${TERM%%-*}" = "screen" ]; then
          # GNU screen (screen, screen-256color, screen-256color-bce)
          printf "\eP\e]%s\007\e\\" "$1"
      else
          printf "\e]%s\e\\" "$1"
      fi
  }
#+end_src

*** Vterm message passing
#+begin_src sh :tangle ../dotfiles/dot-shrc.d/ps
  vterm_cmd() {
      vterm_elisp=""
      while [ $# -gt 0 ]; do
          vterm_elisp="$vterm_elisp""$(printf '"%s" ' "$(printf "%s" "$1" | sed -e 's|\\|\\\\|g' -e 's|"|\\"|g')")"
          shift
      done
      vterm_printf "51;E$vterm_elisp"
  }
#+end_src

** Mathematical
*** In-Line Calculator
#+begin_src sh :tangle ../dotfiles/dot-shrc.d/func
  # quick command-line calculator
  mathcalc() {
      echo "$*"| bc -lq
  }
#+end_src

*** Computational
#+begin_src sh :tangle ../dotfiles/dot-shrc.d/func
  # convert from decimal to hexadecimal and back
  dec2hex() {
      echo "hex:"
      echo "obase=16; $*"| bc
      echo "dec:"
      echo "ibase=16; $*"| bc
  }
#+end_src

** Documents compilation
*** PDF from Latex
#+begin_src sh :tangle ../dotfiles/dot-shrc.d/func
  # compile pdf from given latex file using pdflatex
  pdfcompile() {
      if ! builtin command -v "pdflatex" 1>/dev/null 2>&1; then
          printf "pdftex is not installed\n"
          return 127
      fi

      pdflatex "$1"
      for ext in ".toc" ".log" ".aux"; do
          [ -f "${1%.tex}${ext}" ] && rm "${1%.tex}${ext}"
      done
      if builtin command -v "pdflatex" 1>/dev/null 2>&1; then
          zathura "${1%.tex}.pdf"
      fi
  }
#+end_src

*** Pandoc
**** Org to Something
#+begin_src sh :tangle ../dotfiles/dot-shrc.d/func
  # export from org to 'other' using pandoc
  # Usage: org2export [-f] <infile> <othtype>
  org2export() {
      if ! builtin command -v "pandoc" 1>/dev/null 2>&1; then
          printf "pandoc is not installed\n"
          return 127
      fi
      proceed=false
      while test $# -gt 1; do
          case "$1" in
              -f|--force)
                  proceed=true
                  shift 1
                  ;;
              -h|--help)
                  printf "Usage: org2export [-h|--help] [-f|--force] FILENAME.org OUTFMT\n\n"
                  printf "Optional Arguments:\n"
                  printf "%s\tshow this help message\n\n" "-h|--help"
                  printf "%s\tignore extension mismatch\n" "-f|--force"
                  printf "Positional Arguments:\n"
                  printf "FILENAME.org\tpath to input filename\n"
                  printf "OUTFMT\t\tformat of output [pdf, docs, ...]\n"
                  return 0
                  ;;
              --)
                  shift 1
                  ;;
              ,*)
                  infile="${1}";
                  target="${2}";
                  break
                  ;;
          esac
      done
      if [ "${target}" = "pdf" ]; then
          target="latex"
      fi
      if [ "${infile%.org}" = "${infile}" ]; then
          # <infile>
          printf "Input file should be an org file\n"
      else
          # <infile>.org
          proceed=true
      fi
      if $proceed; then
          pandoc -f org -t "${target}" -o "${infile%.*}.${1}" "$infile"
      fi
      unset proceed target infile
  }
#+end_src

**** Org to Docx
#+begin_src sh :tangle ../dotfiles/dot-shrc.d/func
  # export from org to MS DOCX format using pandoc
  org2doc () {
      org2export "$@" "docx"
  }
#+end_src

**** Org to PDF
#+begin_src sh :tangle ../dotfiles/dot-shrc.d/func
  # export from org to PDF using pandoc
  org2pdf () {
      org2export "$@" "pdf"
  }
#+end_src

**** Docx to Org
#+begin_src sh :tangle ../dotfiles/dot-shrc.d/func
  # export from MS DOCX to org mode using pandoc
  doc2org() {
      if ! builtin command -v "pandoc" 1>/dev/null 2>&1; then
          printf "pandoc is not installed\n"
          return 127
      fi

      case "${1}" in
          ,*.docx)
              pandoc -f docx -t org -o "${1%.docx}.org" "$1"
              ;;
          ,*)
              echo "Input file must be a docx file"
              ;;
      esac
  }
#+end_src

** Launch GUI
Launch application and exit terminal window.
Acts like a launcher.
Un-interactive terminal commands may also be called.
See [[file:gui.org]]
#+begin_src sh :tangle ../dotfiles/dot-shrc.d/func
  # Launch command and kill current shell if command exists
  gui () {
      "${RUNCOMDIR}/bin/gui.sh" "$*"
      if [ $? = 65 ]; then
          # if bin/gui.sh returns 65, kill shell, else, maintain
          exit 0
      fi
  }
#+end_src

** Un-Compress by context
#+begin_src sh :tangle ../dotfiles/dot-shrc.d/func
  # uncompress using appropriate protocol (guessed from extension)
  deconvolute() {
      if builtin command -v "pigz" >/dev/null 2>&1; then
          _gzip="pigz"
      else
          _gzip='gzip'
      fi
      if [ ! -f "${1}" ]; then
          echo "No such file: ${1}.";
      else
          case "${1}" in
              ,*.tar.bz2) tar -xjf "${1}" ;;
              ,*.tbz2) tar -xjf "${1}" ;;
              ,*.tar.gz) tar -x --use-compress-program="${_gzip}" -f "${1}" ;;
              ,*.tgz) tar -x --use-compress-program="${_gzip}" -f "${1}" ;;
              ,*.gz) unpigz "${1}" || gunzip "${1}" ;;
              ,*.rar) unrar -x "${1}" ;;
              ,*.tar) tar -xf "${1}" ;;
              ,*.zip) unzip "${1}" ;;
              ,*.tar.xz) tar -xf "${1}" ;;
              ,*) echo "Cannot extract ${1}, provide explicit command.";;
          esac
      fi
      unset _gzip
  }
#+end_src

** zwc
- Guess whether target is zipped;
  if zipped, unzip and count else pass to classical wc.
#+begin_src sh :tangle ../dotfiles/dot-shrc.d/func
  # gunzip, word count
  zwc () {
      args="$*"
      fname="${args##* }"
      args="${args% "${fname}"}"
      args="${args%"${fname}"}"

      if gzip -t "${fname}" > /dev/null 2>&1; then
          # shellcheck disable=SC2086
          zcat -f "${fname}" | \wc $args
          return
      else
          \wc "$@"
          return
      fi
  }
#+end_src

** Mount over ssh
Cloud mounts using sshfs.
See [[file:cloud_mount.org]]
#+begin_src sh :tangle ../dotfiles/dot-shrc.d/nav
  # mount standard cloud locations using sshfs (read doc)
  mount_cloud_sshfs() {
      mount_script="${RUNCOMDIR}/bin/cloud_mount.sh"
      if [ -f "${mount_script}" ]; then
          eval "${mount_script}"
      fi
  }

  # unmount standard cloud locations using sshfs (read doc)
  umount_cloud_sshfs() {
      mount_script="${RUNCOMDIR}/bin/cloud_mount.sh"
      if [ -f "${mount_script}" ]; then
          eval "${mount_script}" "umount"
      fi
  }
#+end_src

** Navigate
Overload cd with python virtualenv.
When no virtualenv is active, but target directory has =.venv=,, switch to it.
#+begin_src sh :tangle ../dotfiles/dot-shrc.d/nav
  cd () {
      # shellcheck disable=SC2164
      builtin cd "${1:-${HOME}}"
      if [ -z "${VIRTUAL_ENV}" ]; then
          to_venv 2>/dev/null
      fi
  }
#+end_src

Inspired by [[https://lukesmith.xyz/]]
#+begin_src sh :tangle ../dotfiles/dot-shrc.d/nav
  # Navigate using 'lf' and cd to location
  lfcd () {
      if ! command -v 'lf' >/dev/null 2>/dev/null; then
          printf "lf is not installed\n"
          return 127
      fi
      tmp_file="$(mktemp)"
      lf -last-dir-path="${tmp_file}" "$@"
      if [ -f "${tmp_file}" ]; then
          target_dir="$(cat "${tmp_file}")"
          rm -f "${tmp_file}" >/dev/null
          if [ -d "${target_dir}" ] && [ "${target_dir}" != "$(pwd)" ]; then
              builtin cd "${target_dir}" || return
          fi
      fi
      unset tmp_file target_dir
  }

  # Navigate using pattern 'fzf' and cd to location
  fzfcd () {
      if ! command -v 'fzf' >/dev/null 2>/dev/null; then
          printf "fzf is not installed\n"
          return 127
      fi
      builtin cd "$(dirname "$(fzf)")" || true
  }
#+end_src

** lszcat
#+begin_src sh :tangle ../dotfiles/dot-shrc.d/func
  # gunzip and ls (if directory) or cat (if file)
  lszcat () {
      args="$*"
      fname="${args##* }"
      args="${args%% "${fname}"}"
      args="${args%%"${fname}"}"

      betcat="$(which cat)"
      if builtin command -v bat >/dev/null 2>&1; then
          betcat="$(which bat)"
      fi

      betls="$(which ls)"
      if builtin command -v eza >/dev/null 2>&1; then
          betls="$(which eza)"
      fi

      if [ -z "${fname}" ] || [ ! "${fname#-}" = "${fname}" ]; then
          args="${args:+$args }${fname}"
          fname="$(readlink -f ".")"
          echo "${fname}"
      fi

      if [ -d "${fname}" ]; then
          # shellcheck disable=SC2086
          "${betls}" ${args} "${fname}"
      elif gzip -t "${fname}" >/dev/null 2>&1; then
          # shellcheck disable=SC2086
          zcat -f ${args} "${fname}" | "${betcat}"
      else
          # shellcheck disable=SC2086
          "${betcat}" ${args} "${fname}"
      fi
  }
#+end_src

** Manual pages
#+begin_src sh :tangle ../dotfiles/dot-shrc.d/alternatives
  # if manpage is available, display. else display tldr if it is available
  # else, assume '--help' argument and display output passing --help to command
  _rc_man_help () {
      if man "$@"; then
          return 0
      elif info "$@"; then
          return 0
      elif tldr "$@"; then
          return 0
      elif builtin command -v "$1" >/dev/null 2>/dev/null; then
          printf "trying to display %s --help output\n" "${1}"
          $1 --help 2>&1 | (eval "$MANPAGER")
          return 0
      else
          return 16
      fi
  }
#+end_src

* Aliases
** Manual page help
#+begin_src sh :tangle ../dotfiles/dot-shrc.d/alternatives
  alias man="_rc_man_help";
#+end_src

** Network
#+begin_src sh :tangle ../dotfiles/dot-shrc.d/alternatives
  alias nload='nload -u M -U G -t 10000 -a 3600 $(ip a | grep -m 1 " UP " | cut -d " " -f 2 | cut -d ":" -f 1)'
  alias nethogs='sudo su -l -c "nethogs $(ip a | grep  "state UP" | cut -d " " -f 2 | cut -d ":" -f 1) -d 10"';
  alias ping="ping -c 4 ";
#+end_src

** Monitor Job queues
#+begin_src sh :tangle ../dotfiles/dot-shrc.d/alternatives
  alias watch="watch -n 10 --color";
#+end_src

** Lazy single-handed exit
#+begin_src sh :tangle ../dotfiles/dot-shrc.d/alternatives
  alias qqqq="exit";
#+end_src

** [z]wc
#+begin_src sh :tangle ../dotfiles/dot-shrc.d/alternatives
  alias wc="zwc";
#+end_src

** Encrypted cURL
- With look for =${HOME}/.netrc.gpg=.
  If it exists, decrypt it and use the contents.
#+begin_src sh :tangle ../dotfiles/dot-shrc.d/alternatives
  # does nothing
  _rc_decrypt_netrc () {
      true
  }
  alias curl="curl --netrc-file <( gpg --batch -q -d ~/.netrc.gpg )"
#+end_src

* Networking
** State
#+begin_src sh :tangle ../dotfiles/dot-shrc
  "${RUNCOMDIR}/bin/timeout.sh"
#+end_src

* Call files from drop in directories (<name>.d)
** shrc
#+begin_src bash :tangle ../dotfiles/dot-shrc
  # Interactive non-login shell does not source .profile,
  # which contain the definition for _rc_drop_in
  # So, we need to manually source dropins for shrc
  if [ -d "${HOME}/.shrc.d/" ]; then
      if ls -A1q "${HOME}/.shrc.d"/* | grep -q .; then
         for drop_in in "${HOME}/.shrc.d"/*; do
             if [ -r "${drop_in}" ]; then
                 . "${drop_in}"
             fi
         done
      fi
  fi
#+end_src
