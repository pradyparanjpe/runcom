.TH "Gui - launch gui" "1" 

.SH "Description"
.IP \(em 4
Launch gui apps from command line and kill terminal.
.IP \(em 4
TODO: Grab ui properties of the launching frame to launch \fBthis\fP app
.IP \(em 4
Popularly known now as 'swallow window' \fIvide\fP https://github.com/salman-abedin/devour \fBat\fP \fIdevour\fP.

.SH "Code"
.PP
This section tangles the code (POSIX)
.SS "Handle global variables and exits"
.RS
.nf
\fCset_vars () {
    args=
    call=
    cmd=
    usage="
     usage: ${0} -h
     usage: ${0} --help
     usage: ${0} [--] CMD
"

    help_msg="${usage}

     DESCRIPTION: |
       Launch CMD, switch to it, and exit the parent terminal

     Optional arguments: |
       -h\tprint usage message and exit
       --help\tprint this help message and exit
       --\tEnd of ${0}'s arguments; necessary if CMD has arguments

     Positional argument: |
       CMD\tCommand to launch
"
}

unset_vars() {
    unset help_msg
    unset usage
    unset cmd
    unset call
    unset args
}


clean_exit() {
    unset_vars
    if [ -n "${1}" ] && [ "${1}" -ne "0" ]; then
        if [ -n "${2}" ]; then
            # shellcheck disable=SC2059
            printf "${2}\n" >&2
        fi
        # shellcheck disable=SC2086
        exit ${1}
    fi
    if [ -n "${2}" ]; then
        # shellcheck disable=SC2059
        printf "${2}\n"
    fi
    exit 0
}

\fP
.fi
.RE

.SS "Parse command"
.RS
.nf
\fCcli () {
    while [ $# -gt 0 ]; do
        case "${1}" in
            -h)
                # shellcheck disable=SC2059
                clean_exit 0 "${usage}"
                ;;
            --help)
                # shellcheck disable=SC2059
                clean_exit 0 "${help_msg}"
                ;;
            --)
                shift 1;
                # end of gui arguments
                if [ -n "${cmd}" ]; then
                    cmd="${cmd} $*"
                else
                    cmd="$*"
                fi
                break
                ;;
            *)
                # assume gui argument
                if [ -n "${cmd}" ]; then
                    cmd="${cmd} ${1}"
                    shift 1;
                else
                    cmd="${1}"
                    shift 1;
                fi
                break
                ;;
        esac
    done
}

\fP
.fi
.RE

.SS "Launch"
.RS
.nf
\fClaunch_gui() {
    call="$(echo "${cmd}" | cut -d " " -f 1)"
    args="${cmd#${call}}"
    if [ -z "${call}" ]; then
        printf "%s" "${usage}"
        clean_exit 1
    fi
    if ! command -v "${call}" >/dev/null 2>&1; then
        clean_exit 127 "${call} not found..."
    fi
    unset cmd_help
    unset usage
    eval nohup "${call}" "${args}" >/dev/null 0<&- 2>&1 &
    unset call
    unset args
    exit 65
}

\fP
.fi
.RE
.SS "Main routine call"
.RS
.nf
\fCmain() {
    # Main routine call
    set_vars
    cli "$@"
    launch_gui
    clean_exit
}


main "$@"
\fP
.fi
.RE
