# -*- mode:org; coding: utf-8; -*-
#+TITLE: Proxy_extract - extract proxy authentication from password store
#+SETUPFILE: setup.org
#+EXPORT_FILE_NAME: ../docs/proxy_extract.html

* Description
  - This script is automatically called by =bin/proxy_extract.sh=.
  - This may be used in =${XDG_CONFIG_HOME:-${HOME}/.config}/pvt.d/.proxyrc=
    to extract proxy settings from the password store.
    #+begin_src sh :tangle no
      all_proxy="$(${RUNCOMDIR:-${HOME}/.runcom}/bin/proxy_extract.sh)"
      http_proxy="${all_proxy}"
      https_proxy="${all_proxy}"
      ftp_proxy="${all_proxy}"
      ftps_proxy="${all_proxy}"

      export all_proxy
      export http_proxy
      export https_proxy
      export ftp_proxy
      export ftps_proxy
    #+end_src

    - [[https://www.passwordstore.org][Password manager]] may hold the proxy-secret.
    - Pass-name to the secret *MUST* be stored in an environment variable =${proxy_auth}=.
    - Secret MUST *NOT* be url-encoded.

      - /pass-name/ can be declared by adding following lines to
        =${XDG_CONFIG_HOME:-${HOME/.config}/(pvt|local).d/.<some_name>rc=
        #+begin_seealso
        - [[file:index.org::*Personalization][Personalization]]
        #+end_seealso

        #+BEGIN_SRC sh :tangle no
          proxy_auth="office/proxy_server.example.com/best_employee"
          export proxy_auth
        #+END_SRC

    - Secret *MUST* be stored in either of following formats.

** plain password
   Password store stores just the <password>.
   <password> may be stored in password manager using a command such as:
   #+BEGIN_SRC sh :tangle no
     pass insert office/proxy_server.example.com/best_employee
   #+END_SRC

** multi-field
   Information about /any/ or /all/ of following fields may be provided.
   - Order is not strict.

     #+begin_src yml :tangle no
       protocol: <proxy protocol>
       username: <username in plain text>
       password: <password in plain text>
       address: <proxy server address>
       port: <proxy port>

     #+end_src

     Fields may be stored in password manager using a command such as:
     #+BEGIN_SRC sh :tangle no
       pass insert -m office/proxy_server.example.com/best_employee
     #+END_SRC

* Code
  This section tangles the code (POSIX)
  #+begin_src sh :tangle ../bin/proxy_extract.sh :exports none :tangle-mode (identity #o755)
    #!/usr/bin/env sh
    # -*- coding:utf-8; mode:shell-script -*-
    #
    # Copyright 2020, 2021 Pradyumna Paranjape
    #
    # This file is part of Prady_runcom.
    #
    # Prady_runcom is free software: you can redistribute it and/or modify
    # it under the terms of the GNU General Public License as published by
    # the Free Software Foundation, either version 3 of the License, or
    # (at your option) any later version.
    #
    # Prady_runcom is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    # GNU General Public License for more details.
    #
    # You should have received a copy of the GNU General Public License
    # along with Prady_runcom.  If not, see <https://www.gnu.org/licenses/>.

  #+end_src

** Check availability
   #+begin_src sh :tangle ../bin/proxy_extract.sh
     affirm_availability () {
         for _import in pass curl; do
             if ! command -v "${_import}" >/dev/null 2>&1; then
                 unset _import
                 clean_exit 127 "${_import} is not installed\n"
             fi
         done
         unset _import
     }

   #+end_src

** Handle global variables and exits
   #+begin_src sh :tangle ../bin/proxy_extract.sh
     set_vars () {
         show=false
         proxy_header=
         pass_keys=
         if [ -z "${proxy_protocol}" ]; then
             proxy_protocol='all'
         fi
         proxy_username=
         proxy_password=
         proxy_host=
         proxy_port=
         usage="
         usage: ${0} -h
         usage: ${0} --help
         usage: ${0}
     "
         help_msg="${usage}

         DESCRIPTION: |
           extract proxy authentication from password store


         Optional Arguments: |
           -h\t\t\tprint usage message and exit
           --help\t\t\tprint this help message and exit

     "
     }

     unset_vars() {
         unset help_msg
         unset usage
         unset proxy_port
         unset proxy_host
         unset proxy_password
         unset proxy_username
         unset pass_keys
         unset proxy_header
     }


     clean_exit() {
         unset_vars
         if [ -n "${1}" ] && [ "${1}" -ne "0" ]; then
             if [ -n "${2}" ]; then
                 # shellcheck disable=SC2059
                 printf "${2}\n" >&2
             fi
             # shellcheck disable=SC2086
             exit ${1}
         fi
         if [ -n "${2}" ]; then
             # shellcheck disable=SC2059
             printf "${2}\n"
         fi
         exit 0
     }

   #+end_src

** Parse command
   #+begin_src sh :tangle ../bin/proxy_extract.sh
     cli () {
         while [ $# -gt 0 ]; do
             case "${1}" in
                 -h)
                     # shellcheck disable=SC2059
                     clean_exit 0 "${usage}"
                     ;;
                 --help)
                     # shellcheck disable=SC2059
                     clean_exit 0 "${help_msg}"
                     ;;
                 -s|--show)
                     show=true
                     shift
                     ;;
                 ,*)
                     clean_exit 1 "${usage}"
             esac
         done
     }

   #+end_src

** Extractor
   #+begin_src sh :tangle ../bin/proxy_extract.sh :exports none :tangle-mode (identity #o755)
     quote () {
         printf "%s" "$1" \
             | tr -d '\n' \
             | curl -Gso /dev/null -w "%{url_effective}" --data-urlencode @- "" \
             | cut -c 3-
     }

     extract_key () {
         key="$(printf "%s" "$1" | cut -d: -f1 )"
         value="$(printf "%s" "$1" | cut -d: -f2 )"
         value="${value## }"  # remove exactly 1 space from the start
         case "${key}" in
             protocol)
                 proxy_protocol="${value}"
                 ;;
             address)
                 proxy_host="${value}"
                 ;;
             port)
                 proxy_port="${value}"
                 ;;
             username)
                 proxy_username="$(quote "${value}")"
                 ;;
             password)
                 proxy_password="$(quote "${value}")"
                 ;;
             ,*)
                 # do nothing about misplaced information
                 true
                 ;;
         esac
         unset key
         unset value
     }

     extract_secret () {
         if [ -z "$1" ]; then
             return
         fi
         if [ "$(printf "%s" "$1" | wc -l)" = 1 ]; then
             # only 1 line, may be password or single secret
             if [ "${1##: *}" = "${1}" ]; then
                 # ': ' is not present in the secret, must be password
                 proxy_password="$(quote "$1")"
                 return
             fi
             for secret in ${pass_keys}; do
                 if [ "$(printf "%s" "${1}" | cut -d: -f1)" = "${secret}" ]; then
                     # secret key is found
                     extract_key "${1}"
                     unset secret
                     return
                 fi
             done
             unset secret_ley
         fi
         o_ifs="${IFS}"
         IFS="$(printf '\n ')" && IFS="${IFS% }"
         for line in $1; do
             extract_key "${line}"
         done
         IFS="${o_ifs}"
         unset o_ifs
         unset line
     }

     get_pass_proxy () {
         ## build proxy authentication
         if command -v "pass" >/dev/null 2>&1; then
             # password store is available
             if [ -n "${proxy_auth}" ]; then
                 extract_secret "$(pass show "${proxy_auth}")"
             fi
         fi
     }
   #+end_src

** Compiler
   #+begin_src sh :tangle ../bin/proxy_extract.sh
     compile_proxy () {
         if [ -z "${proxy_host}" ]; then
             return
         fi
         if [ -n "${proxy_protocol}" ]; then
             if [ "${proxy_protocol}" = "all" ]; then
                 proxy_header="http://"
             else
                 proxy_header="${proxy_protocol}://"
             fi
         fi
         if [ -n "${proxy_username}" ]; then
             scrt="${proxy_username}"
             if [ -n "${proxy_password}" ]; then
                 scrt="${proxy_username}:${proxy_password}"
             fi
             proxy_header="${proxy_header}${scrt}@"
         fi
         proxy_header="${proxy_header}${proxy_host}"
         if [ -n "${proxy_port}" ]; then
             proxy_header="${proxy_header}:${proxy_port}"
         fi
         proxy_header="${proxy_header}/"
         unset scrt
     }
   #+end_src

** Main routine call
   #+begin_src sh :tangle ../bin/proxy_extract.sh
     main() {
         # Main routine call
         set_vars
         cli "$@"
         get_pass_proxy
         compile_proxy
         printf "%s\n" "${proxy_header}"
         clean_exit
     }

     main "$@"
   #+end_src
