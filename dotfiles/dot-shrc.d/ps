# shellcheck shell=sh
# -*- coding: utf-8; mode: shell-script; -*-
#
# Copyright Â© 2020-2024 Pradyumna Paranjape
#
# This file is part of Prady_runcom.
#
# Prady_runcom is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Prady_runcom is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Prady_runcom.  If not, see <https://www.gnu.org/licenses/>.
#
#===================================================================
#  ___             _      ___                     _
# | _ \_ _ __ _ __| |_  _| _ \__ _ _ _ __ _ _ _  (_)_ __  ___
# |  _/ '_/ _` / _` | || |  _/ _` | '_/ _` | ' \ | | '_ \/ -_)
# |_| |_| \__,_\__,_|\_, |_| \__,_|_| \__,_|_||_|/ | .__/\___|
#                    |__/                      |__/|_|
#===================================================================

# Print ANSI terminal escape codes for colors according to exit status
# of latest (last) executed command
_rc_last_exit_color () {
    case "$1" in
        0)
            # success
            printf "\e[0;32m"
            ;;
        1)
            # general error
            printf "\e[0;33m"
            ;;
        2)
            # misuse of shell builtins
            printf "\e[0;31m"
            ;;
        126)
            # cannot execute
            printf "\e[0;37m"
            ;;
        127)
            # command not found
            printf "\e[0;30m"
            ;;
        255)
            # exit status limit
            printf "\e[0;31m"
            ;;
        *)
            if [ "$1" -gt "63" ] && [ "$1" -lt "84" ]; then
                # syserror.h
                printf "\e[0;91m"

            elif [ "$1" -gt "127" ] && [ "$1" -lt "191" ]; then
                # Fatal error
                printf "\e[0;41m"
            else
                printf "\e[0;31m"
            fi
            unset _err
            ;;
    esac
}

# Calculate time elapsed (min/sec) while executing last command
_elapsed_time() {
    # $1 is start time $2 is end time
    if [ $# -lt 2 ]; then
        return
    fi
    _sec=$(( "$2" - "$1" ))
    if [ "$_sec" -le 0 ]; then
        return
    fi
    if [ "$_sec" -le 60 ]; then
        printf "%s" "${_sec}"
        unset _sec
        return
    fi
    _min=$(( _sec/60 ))
    unset _sec
    if [ "$_min" -le 60 ]; then
        printf "%sm" "${_min}"
        unset _min
        return
    fi
    _hr=$(( _min/60 ))
    unset _min
    if [ "$_hr" -le 24 ]; then
        printf "%sh" "${_hr}"
        unset _hr
        return
    fi
    _day=$(( _hr/24 ))
    printf "%sd" "${_day}"
    unset _min _day
}

_rc_show_venv () {
    # if a virtualenv is active, print it's name
    if [ -n "${VIRTUAL_ENV}" ]; then
        base="$(basename "${VIRTUAL_ENV}")"
        if [ "${base}" = ".venv" ] || [ "${base}" = "venv"  ]; then
            printf "/%s" "$(basename "$(dirname "${VIRTUAL_ENV}")")"
            unset base
        else
            printf "/%s" "${base}"
            unset base
        fi
    fi
}

git_status() {
    _modified=0
    _cached=0
    _untracked=0

    while read -r _line; do
        case "${_line}" in
            _*_\ _)
                _cached=1
                ;;
            _\ _*_)
                _modified=1
                ;;
            _?_?_)
                _untracked=1
                ;;
        esac
    done << endstat
$(git status --short | cut -b -2 | sed -e 's/\(.\)\(.*\)/_\1_\2_/')
endstat

    _stat_str=''
    if [ "$_modified" -ne 0 ]; then
        _stat_str="${_stat_str}\033[0;31m\ue728"
    fi

    if [ "$_cached" -ne 0 ]; then
        _stat_str="${_stat_str}\033[0;32m\ue729"
    fi

    if [ "$_untracked" -ne 0 ]; then
        _stat_str="${_stat_str}\033[0;31m\uf476"
    fi

    if [ -n "$(git stash list)" ]; then
        _stat_str="${_stat_str}\e[0;36m\uf48e"
    fi
    if [ -n "${_stat_str}" ]; then
        # shellcheck disable=SC2059  # I do want escape characters
        printf "${_stat_str}\e[m"
    fi
    unset _modified _cached _untracked _stat_str
}

git_branch() {
    branch_str=''
    branch="$(git branch 2>/dev/null | grep '^\*' | sed -e 's/^* //')"
    if [ -n "${branch}" ]; then
        case "${branch}" in
            feat-*)
                branch_str="${branch_str}\033[0;32m"
                ;;
            bug-*)
                branch_str="${branch_str}\033[0;31m"
                ;;
            act-*)
                branch_str="${branch_str}\e[0;36m"
                ;;
            tmp-*)
                branch_str="${branch_str}\e[0;36m"
                ;;
            *HEAD\ detached*|,*rebasing*)
                branch_str="${branch_str}\e[0;33m"
                ;;
            main|master)
                unset branch branch_str
                return
                ;;
            *)
                branch_str="${branch_str}\e[0;35m"
                ;;
        esac
    fi
    printf "${branch_str}%s\ue725\e[m" "${branch}"
    unset branch_str branch
}

git_hash() {
    git log --pretty=format:'%h' -n 1
}

git_ps() {
    if ! git status --ignore-submodules >/dev/null 2>&1; then
        return
    else
        printf " %s%s%s " "$(git_branch)" "$(git_hash)" "$(git_status)"
    fi
}

vterm_prompt_end() {
    vterm_printf "51;A$(whoami)@$(hostname):$(pwd)"
}

vterm_printf() {
    if [ -n "$TMUX" ] \
           && { [ "${TERM%%-*}" = "tmux" ] \
                   || [ "${TERM%%-*}" = "screen" ]; }; then
        # Tell tmux to pass the escape sequences through
        printf "\ePtmux;\e\e]%s\007\e\\" "$1"
    elif [ "${TERM%%-*}" = "screen" ]; then
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf "\eP\e]%s\007\e\\" "$1"
    else
        printf "\e]%s\e\\" "$1"
    fi
}

vterm_cmd() {
    vterm_elisp=""
    while [ $# -gt 0 ]; do
        vterm_elisp="$vterm_elisp""$(printf '"%s" ' "$(printf "%s" "$1" | sed -e 's|\\|\\\\|g' -e 's|"|\\"|g')")"
        shift
    done
    vterm_printf "51;E$vterm_elisp"
}
