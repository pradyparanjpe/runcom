.TH "Proxy_send - send proxy authentication" "1" 

.SH "Description"
.IP \(em 4
This script is automatically called by prady_runcom's profile scripts when network is inferred as \fIoffice\fP.
.IP \(em 4
We try to open https://www.duckduckgo.com/ \fBat\fP \fIduckduckgo\fP and send proxy authentication secret.
.IP \(em 4
The proxy server generally 'remembers' that our machine was authenticated and
does not demand proxy authentication again.

.SH "Setup"
.PP
Proxy secret may be provided through any of the tools explained in following sections.

.IP \(em 4
If information is available at both locations, it is loaded in order.
.IP \(em 4
Information available from the latter supersedes the former.

.SS "Password store"
.IP \(em 4
https://www.passwordstore.org \fBat\fP \fIPassword manager\fP may hold the proxy-secret.
.IP \(em 4
Pass-name to the secret \fBMUST\fP be stored in an environment variable \fI${proxy_auth}\fP.
.IP \(em 4
Secret MUST \fBNOT\fP be url-encoded.

.IP \(em 4
\fIpass-name\fP can be declared by adding following lines to
\fI${XDG_CONFIG_HOME:\-${HOME/.config}/(pvt|local).d/.<some_name>rc\fP
.IP \(em 4
setup.org \fBat\fP \fIPersonalization\fP

.RS
.nf
\fCproxy_auth="office/proxy_server.example.com/best_employee"
export proxy_auth
\fP
.fi
.RE

.IP \(em 4
Secret \fBMUST\fP be stored in either of following formats.

.RS
.TP
.ft I
plain password
.ft
.PP
Password store stores just the <password>.
<password> may be stored in password manager using a command such as:
.RS
.nf
\fCpass insert office/proxy_server.example.com/best_employee
\fP
.fi
.RE
.RE

.TP
.ft I
multi-field
.ft
.PP
Information about \fIany\fP or \fIall\fP of following fields may be provided.
.IP \(em 4
Order is not strict.

.RS
.nf
\fCprotocol: <proxy protocol>
username: <username in plain text>
password: <password in plain text>
address: <proxy server address>
port: <proxy port>

\fP
.fi
.RE

.PP
Fields may be stored in password manager using a command such as:
.RS
.nf
\fCpass insert -m office/proxy_server.example.com/best_employee
\fP
.fi
.RE
.RE

.SS "Environment declaration"
.IP \(em 4
A \fI${proxy_protocol}\fP environment variable \fBmay\fP be declared.
It can be declared by adding following lines to
\fI${XDG_CONFIG_HOME:\-${HOME/.config}/(pvt|local).d/.<some_name>rc\fP

.RS
.nf
\fCproxy_protocol="http"
export proxy_protocol

\fP
.fi
.RE

.IP \(em 4
Proxy information extraction attempt is made from \fI${proxy_protocol}_proxy\fP environment variable
.IP \(em 4
e.g. \fIhttp_proxy\fP, \fIsocks_proxy\fP, etc.
.IP \(em 4
If \fIproxy_protocol\fP remains unset, extraction is attempted from \fIall_proxy\fP and \fIhttp\fP is used as default.

.IP \(em 4
\fI${<proxy_protocol>_proxy}\fP should be declared in
\fI${XDG_CONFIG_HOME:\-${HOME/.config}/(pvt|local).d/.<some_name>rc\fP.
.IP \(em 4
Special characters (symbols) in username and password \fBMUST\fP be https://en.wikipedia.org/wiki/Percent-encoding \fBat\fP \fIurl-encoded\fP.
.IP \(em 4
Its value must be of the form:
.RS
.nf
<p_type>_proxy="<protocol>://[<encoded_username>[:<encoded_password>]]@<address>[:<port>]/"

.fi
.RE

.IP \(em 4
example for \fIall_proxy\fP
.RS
.nf
\fCall_proxy="http://best_employee:secure%21secret@192.168.1.1:1080/"
export all_proxy
\fP
.fi
.RE

Storing password in environment is strongly \fBdiscouraged\fP.

.SH "Code"
.PP
This section tangles the code (POSIX)
.SS "Check availability"
.RS
.nf
\fCaffirm_availability () {
    for _import in curl printenv grep tr; do
        if ! command -v "${_import}" >/dev/null 2>&1; then
            unset _import
            clean_exit 127 "${_import} is not installed\n"
        fi
    done
    unset _import
}

\fP
.fi
.RE

.SS "Handle global variables and exits"
.RS
.nf
\fCset_vars () {
    show=false
    pass_keys="protocol username password host port"
    proxy_header=
    if [ -z "${proxy_protocol}" ]; then
        proxy_protocol='all'
    fi
    proxy_username=
    proxy_password=
    proxy_host=
    proxy_port=
    usage="
    usage: ${0} -h
    usage: ${0} --help
    usage: ${0} [Optional Arguments*] INSTANCE
"
    help_msg="${usage}

    DESCRIPTION: |
      Auto-send proxy authentication


    Optional Arguments: |
      -h\t\t\tprint usage message and exit
      --help\t\t\tprint this help message and exit
      -s|--show\tdisplay what will be sent as header, don't send

"
}

unset_vars() {
    unset help_msg
    unset usage
    unset show
    unset proxy_port
    unset proxy_host
    unset proxy_password
    unset proxy_username
    unset pass_keys
    unset proxy_header
}


clean_exit() {
    unset_vars
    if [ -n "${1}" ] && [ "${1}" -ne "0" ]; then
        if [ -n "${2}" ]; then
            # shellcheck disable=SC2059
            printf "${2}\n" >&2
        fi
        # shellcheck disable=SC2086
        exit ${1}
    fi
    if [ -n "${2}" ]; then
        # shellcheck disable=SC2059
        printf "${2}\n"
    fi
    exit 0
}

\fP
.fi
.RE

.SS "Parse command"
.RS
.nf
\fCcli () {
    while [ $# -gt 0 ]; do
        case "${1}" in
            -h)
                # shellcheck disable=SC2059
                clean_exit 0 "${usage}"
                ;;
            --help)
                # shellcheck disable=SC2059
                clean_exit 0 "${help_msg}"
                ;;
            -s|--show)
                show=true
                shift
                ;;
            *)
                clean_exit 1 "${usage}"
        esac
    done
}

\fP
.fi
.RE

.SS "Extract proxy information from environment variable"
.RS
.nf
\fCextract_env () {
    url="${1}"
    # keep consuming URL like $@ is consumed from command line
    _proto="$(printf "%s" "${url}" | grep :// | sed -e 's,^\(.*\)://.*,\1,g')"
    url="${url#${_proto}://}"  # - protocol
    userpass="$(printf "%s" "${url}" | grep @ | cut -d@ -f1)"
    _user="${userpass%:*}"
    _pass="$(printf "%s" "${userpass}" | grep : | sed -e 's,^.*\?:\(.*\),\1,g')"
    url="$(printf "%s" "${url##${userpass}@}" | cut -d/ -f1)"  # - credentials
    _host="${url%:*}"
    _port="$(printf "%s" "${url}" | \grep '[0-9]' | sed -e 's,^.*:\([0-9]\+\)$,\1,')"
    if [ -n "${_proto}" ]; then
        proxy_protocol="${_proto}"
    fi

    if [ -n "${_user}" ]; then
        proxy_username="${_user}"
    fi

    if [ -n "${_pass}" ]; then
        proxy_password="${_pass}"
    fi

    if [ -n "${_host}" ]; then
        proxy_host="${_host}"
    fi

    if [ -n "${_port}" ]; then
        proxy_port="${_port}"
    fi

     unset _port _host _pass _user _proto userpass url
}

get_env_proxy () {
    # Parse environment variable.
    proxy_str="$(printenv "${proxy_protocol}_proxy")"
    if [ -z "${proxy_str}" ]; then
        return
    fi
    extract_env "${proxy_str}"
    unset proxy_str
}

\fP
.fi
.RE

.SS "Compile proxy information"
.RS
.nf
\fCbuild () {
    all_proxy="$(${RUNCOMDIR:-${HOME}/.runcom}/bin/proxy_extract.sh)"
    extract_env "${all_proxy}"
    get_env_proxy
}

compile_proxy () {
    if [ -z "${proxy_host}" ]; then
        return
    fi
    if [ -n "${proxy_protocol}" ]; then
        if [ "${proxy_protocol}" = "all" ]; then
            proxy_header="http://"
        else
            proxy_header="${proxy_protocol}://"
        fi
    fi
    if [ -n "${proxy_username}" ]; then
        scrt="${proxy_username}"
        if [ -n "${proxy_password}" ]; then
            scrt="${proxy_username}:${proxy_password}"
        fi
        proxy_header="${proxy_header}${scrt}@"
    fi
    proxy_header="${proxy_header}${proxy_host}"
    if [ -n "${proxy_port}" ]; then
        proxy_header="${proxy_header}:${proxy_port}"
    fi
    proxy_header="${proxy_header}/"
    unset scrt
}

\fP
.fi
.RE

.SS "Html handling"
.RS
.nf
\fCquote () {
    printf "%s" "$1" \
        | tr -d '\n' \
        | curl -Gso /dev/null -w "%{url_effective}" --data-urlencode @- "" \
        | cut -c 3-
}

send_request () {
    curl -sLf -x "${proxy_header}" "https://www.duckduckgo.com/" >/dev/null 2>&1
    case $? in
        0)
            clean_exit
            ;;
        6)
            # Couldn't resolve
            clean_exit 6
            ;;
        7)
            # No route to proxy_host
            clean_exit
            ;;
        *)
            # other error
            clean_exit "$?"
            ;;
    esac
}

\fP
.fi
.RE

.SS "Main routine call"
.RS
.nf
\fCmain() {
    # Main routine call
    affirm_availability
    set_vars
    cli "$@"
    build
    compile_proxy
    if $show; then
        printf "auth: '%s'\n" "${proxy_header}"
        clean_exit
    fi
    send_request
    clean_exit
}


main "$@"
\fP
.fi
.RE
