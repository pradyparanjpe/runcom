# shellcheck shell=sh

# -*- coding:utf-8; mode:shell-script; -*-
#
# Copyright 2020, 2021 Pradyumna Paranjape
#
# This file is part of Prady_runcom.
#
# Prady_runcom is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Prady_runcom is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Prady_runcom.  If not, see <https://www.gnu.org/licenses/>.
#
#===================================================================
#  ___             _      ___                     _
# | _ \_ _ __ _ __| |_  _| _ \__ _ _ _ __ _ _ _  (_)_ __  ___
# |  _/ '_/ _` / _` | || |  _/ _` | '_/ _` | ' \ | | '_ \/ -_)
# |_| |_| \__,_\__,_|\_, |_| \__,_|_| \__,_|_||_|/ | .__/\___|
#                    |__/                      |__/|_|
#===================================================================

_RC_SHELL="$(readlink /proc/$$/exe | sed "s/.*\///")"
export _RC_SHELL

# shellcheck disable=SC1090
for unsync_d in "local.d" "pvt.d"; do
    for rcfile in "${XDG_CONFIG_HOME:-${HOME}/.config}/${unsync_d}"/.*rc; do
        . "${rcfile}"
    done 2>/dev/null
done 2>/dev/null

unset rcfile unsync_d

# use better alternatives
# Args:
#     canon_cmd: canonically used command
#     alt_cmds: optional list of alternative that may be used if available
# Environment Variables
#     _RC_NO_ALT: Don't replace alternatives for <space> separated
_rc_alternative () {
    if [ ! "${_RC_NO_ALT% "${1}"*}" = "${_RC_NO_ALT}" ] ||\
       [ ! "${_RC_NO_ALT#*"${1}" }" = "${_RC_NO_ALT}" ] ||\
       [ "${1}" = "${_RC_NO_ALT}" ]; then
        return
    fi
    _rc_old_cmd="${1}"
    shift
    for _rc_alt in "$@"; do
        if builtin command -v "${_rc_alt%% *}" >/dev/null 2>&1; then
            eval "alias ${_rc_old_cmd}=\"${_rc_alt}\"";
            return
        fi
    done
    unset _rc_alt _rc_old_cmd
}

_rc_alternative cat bat
_rc_alternative diff delta difft
_rc_alternative df lfs
_rc_alternative du "dust" "du -hc"
_rc_alternative grep "rg --color=auto" "ag" "pt" "ack"
_rc_alternative ls "exa -Fh --color=auto"
_rc_alternative vim nvim
_rc_alternative ex nvim
_rc_alternative docker podman
_rc_alternative docker-compose "podman compose"

if builtin command -v 'atuin' >/dev/null 2>&1; then
    eval "$(atuin init "${_RC_SHELL}" 2>/dev/null)"
fi

alias la='ls -a';
alias ll='ls -lr -s size';
alias lla='ls -la';
alias l.='ls -a |grep "^\."';
alias sl="ls";

export BEMENU_OPTS='--fn firacode 14 '

# default python version major.minor
python_ver() {
    python --version |cut -d "." -f1,2 |sed 's/ //' |sed 's/P/p/'
}

# Walk upto mount-point (if within 16 levels) and look for
# '.venv' directory that contains python
# virtual environment. If found, switch to it
to_venv () {
    test_d="$(readlink -f "${PWD}")"
    parents=16  # path too long to waste time
    until mountpoint "${test_d}" > /dev/null 2> /dev/null; do
        if [ $parents -le 0 ]; then
            printf "Too many branch-nodes searched" >&2
            unset parents test_d env_d
            return 126
        fi
        for env_d in ".venv" "venv"; do
            if [ -d "${test_d}/${env_d}" ] \
                   || [ -L "${test_d}/${env_d}" ]; then
                # shellcheck disable=SC1090
                . "${test_d}/${env_d}/bin/activate"
                printf "Found %s, switching...\n" "${test_d}/${env_d}"
                unset parents test_d env_d
                return 0
            fi
        done
        test_d="$(dirname "${test_d}")"
        parents=$((parents - 1))
    done
    printf "Couldn't find .venv upto mountpoint %s\n" "${test_d}" >&2
    unset parents test_d env_d
    return 126
}

_rc_show_venv () {
    # if a virtualenv is active, print it's name
    if [ -n "${VIRTUAL_ENV}" ]; then
        base="$(basename "${VIRTUAL_ENV}")"
        if [ "${base}" = ".venv" ] || [ "${base}" = "venv"  ]; then
            printf "/%s" "$(basename "$(dirname "${VIRTUAL_ENV}")")"
            unset base
        else
            printf "/%s" "${base}"
            unset base
        fi
    fi
}

vterm_printf() {
    if [ -n "$TMUX" ] && ([ "${TERM%%-*}" = "tmux" ] || [ "${TERM%%-*}" = "screen" ]); then
        # Tell tmux to pass the escape sequences through
        printf "\ePtmux;\e\e]%s\007\e\\" "$1"
    elif [ "${TERM%%-*}" = "screen" ]; then
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf "\eP\e]%s\007\e\\" "$1"
    else
        printf "\e]%s\e\\" "$1"
    fi
}

vterm_cmd() {
    local vterm_elisp
    vterm_elisp=""
    while [ $# -gt 0 ]; do
        vterm_elisp="$vterm_elisp""$(printf '"%s" ' "$(printf "%s" "$1" | sed -e 's|\\|\\\\|g' -e 's|"|\\"|g')")"
        shift
    done
    vterm_printf "51;E$vterm_elisp"
}

git_status() {
    _modified=0
    _cached=0
    _untracked=0

    while read -r _line; do
        case "${_line}" in
            _*_\ _)
                _cached=1
                ;;
            _\ _*_)
                _modified=1
                ;;
            _?_?_)
                _untracked=1
                ;;
        esac
    done << endstat
$(git status --short | cut -b -2 | sed -e 's/\(.\)\(.*\)/_\1_\2_/')
endstat

    _stat_str=''
    if [ "$_modified" -ne 0 ]; then
        _stat_str="${_stat_str}\033[0;31m\ue728"
    fi

    if [ "$_cached" -ne 0 ]; then
        _stat_str="${_stat_str}\033[0;32m\ue729"
    fi

    if [ "$_untracked" -ne 0 ]; then
        _stat_str="${_stat_str}\033[0;31m\uf476"
    fi

    if [ -n "$(git stash list)" ]; then
        _stat_str="${_stat_str}\e[0;36m\uf48e"
    fi
    if [ -n "${_stat_str}" ]; then
        # shellcheck disable=SC2059  # I do want escape characters
        printf "${_stat_str}\e[m"
    fi
    unset _modified _cached _untracked _stat_str
}

git_branch() {
    branch_str=''
    branch="$(git branch 2>/dev/null | grep '^\*' | sed -e 's/^* //')"
    if [ -n "${branch}" ]; then
        case "${branch}" in
            feat-*)
                branch_str="${branch_str}\033[0;32m"
                ;;
            bug-*)
                branch_str="${branch_str}\033[0;31m"
                ;;
            act-*)
                branch_str="${branch_str}\e[0;36m"
                ;;
            tmp-*)
                branch_str="${branch_str}\e[0;36m"
                ;;
            *HEAD\ detached*|,*rebasing*)
                branch_str="${branch_str}\e[0;33m"
                ;;
            main|master)
                unset branch branch_str
                return
                ;;
            *)
                branch_str="${branch_str}\e[0;35m"
                ;;
        esac
    fi
    printf "${branch_str}%s\ue725\e[m" "${branch}"
    unset branch_str branch
}

git_hash() {
    git log --pretty=format:'%h' -n 1
}

git_ps() {
    if ! git status --ignore-submodules >/dev/null 2>&1; then
        return
    else
        printf " %s%s%s " "$(git_branch)" "$(git_hash)" "$(git_status)"
    fi
}

# Print ANSI terminal escape codes for colors according to exit status
# of latest (last) executed command
_rc_last_exit_color () {
    case "$1" in
        0)
            # success
            printf "\e[0;32m"
            ;;
        1)
            # general error
            printf "\e[0;33m"
            ;;
        2)
            # misuse of shell builtins
            printf "\e[0;31m"
            ;;
        126)
            # cannot execute
            printf "\e[0;37m"
            ;;
        127)
            # command not found
            printf "\e[0;30m"
            ;;
        255)
            # exit status limit
            printf "\e[0;31m"
            ;;
        *)
            if [ "$1" -gt "63" ] && [ "$1" -lt "84" ]; then
                # syserror.h
                printf "\e[0;91m"

            elif [ "$1" -gt "127" ] && [ "$1" -lt "191" ]; then
                # Fatal error
                printf "\e[0;41m"
            else
                printf "\e[0;31m"
            fi
            unset _err
            ;;
    esac
}

# Calculate time elapsed (min/sec) while executing last command
_elapsed_time() {
    # $1 is start time $2 is end time
    _cmd_start="$1"
    _cmd_end="$2"
    if [ -z "$_cmd_end" ] || [ -z "$_cmd_start" ]; then
        return
    fi
    _sec=$(( _cmd_end - _cmd_start ))
    unset _cmd_start _cmd_end
    if [ "$_sec" -le 0 ]; then
        return
    fi
    if [ "$_sec" -le 60 ]; then
        printf "%s" "${_sec}"
        unset _sec
        return
    fi
    _min=$(( _sec/60 ))
    unset _sec
    if [ "$_min" -le 60 ]; then
        printf "%sm" "${_min}"
        unset _min
        return
    fi
    _hr=$(( _min/60 ))
    unset _min
    if [ "$_hr" -le 24 ]; then
        printf "%sh" "${_hr}"
        unset _hr
        return
    fi
    _day=$(( _hr/24 ))
    printf "%sd" "${_day}"
    unset _min _day
}

# quick cmoonad line calculator
mathcalc() {
    echo "$*"| bc -lq
}

# convert from decimal to hexadecimal and back
dec2hex() {
    echo "hex:"
    echo "obase=16; $*"| bc
    echo "dec:"
    echo "ibase=16; $*"| bc
}

# compile pdf from given latex file using pdflatex
pdfcompile() {
    if ! builtin command -v "pdflatex" 1>/dev/null 2>&1; then
        printf "pdftex is not installed\n"
        return 127
    fi

    pdflatex "$1"
    for ext in ".toc" ".log" ".aux"; do
        [ -f "${1%.tex}${ext}" ] && rm "${1%.tex}${ext}"
    done
    if builtin command -v "pdflatex" 1>/dev/null 2>&1; then
        zathura "${1%.tex}.pdf"
    fi
}

# export from org to 'other' using pandoc
# Usage: org2export [-f] <infile> <othtype>
org2export() {
    if ! builtin command -v "pandoc" 1>/dev/null 2>&1; then
        printf "pandoc is not installed\n"
        return 127
    fi
    proceed=false
    while test $# -gt 1; do
        case "$1" in
            -f|--force)
                proceed=true
                shift 1
                ;;
            -h|--help)
                printf "Usage: org2export [-h|--help] [-f|--force] FILENAME.org OUTFMT\n\n"
                printf "Optional Arguments:\n"
                printf "%s\tshow this help message\n\n" "-h|--help"
                printf "%s\tignore extension mismatch\n" "-f|--force"
                printf "Positional Arguments:\n"
                printf "FILENAME.org\tpath to input filename\n"
                printf "OUTFMT\t\tformat of output [pdf, docs, ...]\n"
                return 0
                ;;
            --)
                shift 1
                ;;
            *)
                infile="${1}";
                target="${2}";
                break
                ;;
        esac
    done
    if [ "${target}" = "pdf" ]; then
        target="latex"
    fi
    if [ "${infile%.org}" = "${infile}" ]; then
        # <infile>
        printf "Input file should be an org file\n"
    else
        # <infile>.org
        proceed=true
    fi
    if $proceed; then
        pandoc -f org -t "${target}" -o "${infile%.*}.${1}" "$infile"
    fi
    unset proceed target infile
}

# export from org to MS DOCX format using pandoc
org2doc () {
    org2export "$@" "docx"
}

# export from org to pdf format using pandoc
org2pdf () {
    org2export "$@" "pdf"
}

# export from MS DOCX to org mode using pandoc
doc2org() {
    if ! builtin command -v "pandoc" 1>/dev/null 2>&1; then
        printf "pandoc is not installed\n"
        return 127
    fi

    case "${1}" in
        *.docx)
            pandoc -f docx -t org -o "${1%.docx}.org" "$1"
            ;;
        *)
            echo "Input file must be a docx file"
            ;;
    esac
}

# mount standard cloud locations using sshfs (read doc)
mount_cloud_sshfs() {
    mount_script="${RUNCOMDIR:-${HOME}/.runcom}/bin/cloud_mount.sh"
    if [ -f "${mount_script}" ]; then
        eval "${mount_script}"
    fi
}

# unmount standard cloud locations using sshfs (read doc)
umount_cloud_sshfs() {
    mount_script="${RUNCOMDIR:-${HOME}/.runcom}/bin/cloud_mount.sh"
    if [ -f "${mount_script}" ]; then
        eval "${mount_script}" "umount"
    fi
}

# Launch command and kill current shell if command exists
gui () {
    "${RUNCOM:-${HOME}/.runcom}/bin/gui.sh" "$*"
    if [ $? = 65 ]; then
        # if bin/gui.sh returns 65, kill shell, else, maintain
        exit 0
    fi
}

# uncompress using appropriate protocol (guessed from extension)
deconvolute() {
    if builtin command -v "pigz" >/dev/null 2>&1; then
        _gzip="pigz"
    else
        _gzip='gzip'
    fi
    if [ ! -f "${1}" ]; then
        echo "${1}: no such file";
    else
        case "${1}" in
            *.tar.bz2) tar -xjf "${1}" ;;
            *.tbz2) tar -xjf "${1}" ;;
            *.tar.gz) tar -x --use-compress-program="${_gzip}" -f "${1}" ;;
            *.tgz) tar -x --use-compress-program="${_gzip}" -f "${1}" ;;
            *.gz) unpigz "${1}" || gunzip "${1}" ;;
            *.rar) unrar -x "${1}" ;;
            *.tar) tar -xf "${1}" ;;
            *.zip) unzip "${1}" ;;
            *.tar.xz) tar -xf "${1}" ;;
            *) echo "Cannot extract ${1}, provide explicit command";;
        esac
    fi
    unset _gzip
}

cd () {
    if [ -z "${1}" ]; then
        builtin cd "${HOME}" || true
    else
        builtin cd "${1}"  || true
    fi
    if [ -z "${VIRTUAL_ENV}" ]; then
        to_venv 2>/dev/null
    fi
}

# Navigate using 'lf' and cd to location
lfcd () {
    if ! command -v 'lf' >/dev/null 2>/dev/null; then
        printf "lf is not installed\n"
        return 127
    fi
    tmp_file="$(mktemp)"
    lf -last-dir-path="${tmp_file}" "$@"
    if [ -f "${tmp_file}" ]; then
        target_dir="$(cat "${tmp_file}")"
        rm -f "${tmp_file}" >/dev/null
        if [ -d "${target_dir}" ] && [ "${target_dir}" != "$(pwd)" ]; then
            cd "${target_dir}" || return
        fi
    fi
    unset tmp_file target_dir
}

# Navigate using pattern 'fzf' and cd to location
fzfcd () {
    if ! command -v 'fzf' >/dev/null 2>/dev/null; then
        printf "fzf is not installed\n"
        return 127
    fi
    cd "$(dirname "$(fzf)")" || true
}

# gunzip, word count
zwc () {
    args="$*"
    fname="${args##* }"
    args="${args% ${fname}}"
    args="${args%${fname}}"

    if gzip -t "${fname}" > /dev/null 2>&1; then
        if [ -z "${args}" ]; then
            zcat -f "${fname}" | wc
        else
            # shellcheck disable=SC2086
            zcat -f "${fname}" | wc $args
        fi
        return
    else
        wc "$@"
        return
    fi

}

# When we wish NOT to use first encountered venv (default behaviour)
# we use this function. (function behaviour: toggle)
force_global_venv () {
    if [ "${VIRTUAL_ENV}" = "Global_Env" ]; then
        unset VIRTUAL_ENV
        to_venv 2>/dev/null
    else
        deactivate 2>/dev/null
        VIRTUAL_ENV="Global_Env"
    fi
}

# gunzip and ls (if directory) or cat (if file)
lszcat () {
    args="$*"
    fname="${args##* }"
    args="${args%% ${fname}}"
    args="${args%%${fname}}"

    if builtin command -v bat >/dev/null 2>&1; then
        betcat="$(which bat)"
    else
        betcat="$(which cat)"
    fi

    if builtin command -v exa >/dev/null 2>&1; then
        betls="$(which exa)"
    else
        betls="$(which ls)"
    fi

    if [ -z "${fname}" ] || [ ! "${fname#-}" = "${fname}" ]; then
        if [ -z "${args}" ]; then
            args="${fname}"
        else
            args="${args} ${fname}"
        fi
        fname="$(readlink -f ".")"
        echo "${fname}"
    fi

    if [ -d "${fname}" ]; then
        # shellcheck disable=SC2086
        "${betls}" ${args} "${fname}"
    elif gzip -t "${fname}" >/dev/null 2>&1; then
        # shellcheck disable=SC2086
        zcat -f ${args} "${fname}" | "${betcat}"
    else
        # shellcheck disable=SC2086
        "${betcat}" ${args} "${fname}"
    fi
}

# if manpage is available, display. else display tldr if it is available
# else, assume '--help' argument and display output passing --help to command
_rc_man_help () {
    if man "$@"; then
        return 0
    elif tldr "$@"; then
        return 0
    elif builtin command -v "$1" >/dev/null 2>/dev/null; then
        printf "trying to display %s --help output\n" "${1}"
        if builtin command -v 'bat' >/dev/null 2>/dev/null; then
            $1 --help 2>&1 | bat
        else
            $1 --help 2>&1 | less -RF
        fi
        return 0
    else
        return 16
    fi
}

# posix selection option by index in cli
_rc_posix_select () {
    # select implementation for POSIX
    word_l=""
    count=0
    for word in "${@}"; do
        if [ -z "${word_l}" ]; then
            word_l="${word}"
        else
            word_l="${word_l} ${word}"
        fi
        count=$((count + 1))
        echo "${count}: ${word}" >&2
    done
    printf "Selection: " >&2
    read -r select_num
    echo "${word_l}" | cut -d' ' -f"${select_num}" 2>/dev/null
    unset word word_l
}

alias man="_rc_man_help";

alias nload='nload -u M -U G -t 10000 -a 3600 $(ip a | grep -m 1 " UP " | cut -d " " -f 2 | cut -d ":" -f 1)'
alias nethogs='sudo su -l -c "nethogs $(ip a | grep  "state UP" | cut -d " " -f 2 | cut -d ":" -f 1) -d 10"';
alias ping="ping -c 4 ";

alias watch="watch -n 10 --color";

alias qqqq="exit";

alias wc="zwc";

# does nothing
_rc_decrypt_netrc () {
    true
}
alias curl="curl --netrc-file <( gpg --batch -q -d ~/.netrc.gpg )"

"${RUNCOMDIR}/bin/timeout.sh"
