.TH "netcheck - identify connected network" "1" 

.SH "Description"
.PP
Identify connected network.
Print the following string
.RS
.nf
<IP-ADDRESS>\t<AP-ADDRESS>\t<Net-State-Code>

.fi
.RE
.SS "IP-ADDRESS"
.PP
Output of \fIhostname \-I\fP

.SS "AP-ADDRESS"
.PP
Access-Point address. Default route to which packets are sent.

.SS "Net-State-Code"
.PP
5-bit number representing inferred state of network
.IP \(em 4
bit 1: (1) Work-network connected
.IP \(em 4
bit 2: (2) Home-network connected
.IP \(em 4
bit 3: (4) AP responds to \fIping\fP
.IP \(em 4
bit 4: (8) Google's DNS server 8.8.8.8 responds to \fIping\fP
.IP \(em 4
bit 5: (16) Google's address (gets resolved) and responds to \fIping\fP

.SH "Setup"
.PP
Following variables should be declared by adding lines to
\fI${XDG_CONFIG_HOME:\-${HOME/.config}/(pvt|local).d/.<some_name>rc\fP
.IP \(em 4
home_ap: ip addresses that imply presence at home (separator: <space>)
.IP \(em 4
work_ap: ip addresses that imply presence at work (separator: <space>)

.RS
.nf
\fChome_ap="10.0.0.1 10.0.0.2"
work_ap="192.168.0.1 192.168.1.1"
export home_ap
export work_ap

\fP
.fi
.RE

.SH "Code"
.PP
This section tangles source code
.SS "Handle global variables and exits"
.RS
.nf
\fCset_vars() {
    google_ip="8.8.8.8"
    google_dn="www.google.com"
    if ! ip_addr="$(hostname -I 2>/dev/null)"; then
        ip_addr="$(hostname -i | awk '{print $(NF);}')"
    fi
    ap_addr="$(ip route show default \
            | grep -o "\([0-9]\{1,3\}\.\)\{3\}[0-9]\{1,3\}")"
    netstate=0
    work_net=1
    home_net=2
    intranet=4
    internet=8
    googledn=16
}

unset_vars() {
    unset netstate
    unset ip_addr
    unset ap_addr
    unset google_ip
    unset google_dn
    unset googledn
    unset internet
    unset intranet
    unset home_net
    unset work_net
}

clean_exit() {
    unset_vars
    if [ -n "${1}" ] && [ "${1}" -ne "0" ]; then
        if [ -n "${2}" ]; then
            # shellcheck disable=SC2059
            printf "${2}\n" >&2
        fi
        # shellcheck disable=SC2086
        exit ${1}
    fi
    if [ -n "${2}" ]; then
        # shellcheck disable=SC2059
        printf "${2}\n"
    fi
    exit 0
}

\fP
.fi
.RE

.SS "Identify intranet"
.RS
.nf
\fCat_home() {
    # shellcheck disable=SC2154
    for ap in ${home_ap}; do
        if [ "${ap}" = "${ap_addr}"  ]; then
            netstate=$((netstate | home_net))
            break
        fi
    done
    unset ap
}
\fP
.fi
.RE

.SS "ping"
.RS
.nf
\fCping_target () {
    if [ -z "${1}" ]; then
        return 1
    fi
    ping -c 1 -q -w 2 "${1}" >/dev/null 2>&1
    return $?
}

check_ping() {
    for line in $1; do
        extract_key "${line}"
    done

    if [ -z "$ip_addr" ]; then
        clean_exit 1
    fi
    if ping_target "${google_dn}"; then
        netstate=$((netstate | googledn | internet))
    elif ping_target "${google_ip}"; then
        # can't resolve dns
        netstate=$((netstate | internet))
    fi
    if ping_target "${ap_addr}"; then
        netstate=$((netstate | intranet))
    fi
    if [ ! $((netstate & home_net)) = $home_net ]; then
        # shellcheck disable=SC2154
        for ap in ${work_ap}; do
            if ping_target "${ap}"; then
                netstate=$((netstate | work_net))
                break
            fi
        done
    fi
    unset ap
}

\fP
.fi
.RE

.SS "Main routine call"
.RS
.nf
\fCmain() {
    set_vars
    at_home
    check_ping
    printf "%s\t%s\t%s\n" "${ip_addr}" "${ap_addr}" "${netstate}"
    clean_exit
}

main
\fP
.fi
.RE
