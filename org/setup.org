# -*- mode:org; coding: utf-8; -*-
#+TITLE: Setup runcom
#+SETUPFILE: header.org
#+PROPERTY: header-args :mkdirp t :results no :eval no

* Headers
#+begin_src bash :shebang #!/usr/bin/env sh :tangle ../setup/dependencies.sh :noweb yes :eval yes :exports none
  <<header.org:banner()>>
#+end_src

#+begin_src bash :shebang #!/usr/bin/env sh :tangle ../setup/setup.sh :noweb yes :eval yes :exports none
  <<header.org:banner()>>
#+end_src

#+begin_src bash :shebang #!/usr/bin/env sh :tangle ../setup/unset.sh :noweb yes :eval yes :exports none
  <<header.org:banner()>>
#+end_src

* Legend
** Brackets
- *Square* =[]=: optional parts: =W[orld]H[ealth]O[rganisation]=
- *Angular* =<>=: instructions to fill: =<a global organisation>=
- *Curly*, following a dollar =${}=: environment variable =${HOME}=
- *Round*, with bar separator: =(WHO|UNO)= = /WHO or UNO/

* Requirements
** Knowledge
- Linux shell commands. We shall try to be POSIX-compliant
- Knowledge of Linux, "dot-files"
- super user (sudo) permissions (only for package installation)
#+begin_warning
Avoid *sudo* as much as possible.
#+end_warning

** Dependencies
- A GNU/Linux distribution.
  I use [[https://archlinux.org][arch]] [[https://knowyourmeme.com/memes/btw-i-use-arch][btw]].
- GNU [[https://www.gnu.org/software/coreutils/coreutils.html][coreutils]]: Basic OS utilities.
- [[https://curl.se/][curl]] for proxy authentication.
- GNU [[https://www.gnu.org/software/stow/][stow]]: dot-file management
- [[https://git-scm.com/][git]]: git it.

#+begin_important
For Alpine Linux, [[/etc/apk/repositories][enable]] the [[https://<mirror-server>/alpine/<version>/community][community repository]].
- If you are using Alpine, you *MUST* know how.
#+end_important

*** Bootstrap installation of dependencies
For automated installation of dependencies, run the [[./setup/dependencies.sh][dependencies script]] with elevated privileges.
#+begin_src sh :tangle no
  curl -sLf "https://pradyparanjpe.gitlab.io/runcom/setup/dependencies.sh" | sudo sh
#+end_src

#+begin_note
Inspecting scripts before running them (especially with =sudo=) is always a good idea.
The /dependencies/ script is tangled (with automation wrappers) from the code below.
If you feel an urge to inspect it or if it fails, install dependencies manually instead, that's all it does.
#+end_note

*** Guide for manual installation of dependencies.
Use suitable package manager ([[https://wiki.debian.org/Apt][apt]]|[[https://pkgs.alpinelinux.org/packages][apk]]|[[https://docs.fedoraproject.org/en-US/fedora/latest/system-administrators-guide/package-management/DNF/][dnf]]|[[https://archlinux.org/pacman/][pacman]]|[[https://documentation.suse.com/smart/linux/html/concept-zypper/index.html][zypper]]) to install coreutils, curl, git, stow.
It may be useful to update existing packages and repository database before installing packages.
#+begin_src sh :tangle ../setup/dependencies.sh :exports none
  #!/usr/bin/env sh
  # -*- coding: utf-8; mode: shell-script; -*-
  dnf_install() {
#+end_src

**** dnf: Fedora, RockyLinux, RHEL, CentOS
#+begin_src sh :tangle ../setup/dependencies.sh
  dnf -y update || return 65
  dnf -y install coreutils curl git stow || return 66
#+end_src

#+begin_src sh :tangle ../setup/dependencies.sh :exports none
  }

   apk_install() {
#+end_src

**** apk: Alpine Linux
#+begin_src sh :tangle ../setup/dependencies.sh
  apk update || return 65
  apk --virtual runcom add coreutils curl git stow || return 66
#+end_src

#+begin_src sh :tangle ../setup/dependencies.sh :exports none
  }

   apt_install() {
#+end_src

**** apt: Debian, Ubuntu
#+begin_src sh :tangle ../setup/dependencies.sh
  apt update || return 65
  apt install -y coreutils curl git stow || return 66
#+end_src

#+begin_src sh :tangle ../setup/dependencies.sh :exports none
  }

   zypper_install() {
#+end_src

**** zypper: OpenSuSE, SuSE
#+begin_src sh :tangle ../setup/dependencies.sh
  zypper ref || return 65
  zypper -n install coreutils curl git stow || return 66
#+end_src

#+begin_src sh :tangle ../setup/dependencies.sh :exports none
  }

   pacman_install() {
#+end_src

**** pacman: Arch, Manjaro
#+begin_src sh :tangle ../setup/dependencies.sh
  pacman --noconfirm -Syu coreutils curl git stow || return 65
#+end_src

#+begin_src sh :tangle ../setup/dependencies.sh :exports none
  }

   brew_install() {
#+end_src

**** brew: Mac (untested)
#+begin_src sh :tangle ../setup/dependencies.sh
  brew update || return 65
  brew install coreutils curl git stow || return 66
#+end_src

#+begin_src sh :tangle ../setup/dependencies.sh :exports none
  }
   guess_manager() {
       for manager in apt apk dnf pacman zypper brew; do
           if command -v "${manager}" 1>/dev/null 2>&1; then
               printf "%s" "${manager}"
               return 0
           fi
       done
       printf ""
       return 127
   }

   install_dep () {
       if [ -z "$1" ]; then
           manager="$(guess_manager)"
           if [ -z "${manager}" ]; then
               return 127
           fi
       else
           manager="${1}"
       fi
       eval "${manager}_install"
   }

   main() {
       install_dep "$@"
       case $? in
           0)
               printf "Dependencies installation complete\n"
               printf "Proceed to setup\n"
               ;;
           65)
               printf "Manager is available, but update threw error\n"
               printf "Please install dependencies manually\n"
               printf "aborting...\n"
               return 1;
               ;;
           66)
               printf "Manager is available, but package installation threw error\n"
               printf "Please install dependencies manually\n"
               printf "aborting...\n"
               return 1;
               ;;
           127)
               printf "Couldn't guess package manger\n"
               printf "Please install dependencies manually\n"
               printf "aborting...\n"
               return 127;
               ;;
           ,*) printf "Error number %s was thrown by the package manager\n" "$?"
              printf "Please install dependencies manually\n"
              printf "aborting...\n"
              ;;
       esac
   }

   main "$@"
#+end_src

* Set-up
- Affirm [[*Requirements][requirements]].
#+begin_warning
Do *NOT* use =sudo= during set-up.
#+end_warning

#+begin_warning
The next steps require you to delete all [[file:index.org::tab_locs][stowed dotfiles]].
We shall copy them in a directory named =${XDG_CACHE_HOME:-${HOME}/.cache}/OLD_CONFIG= before proceeding.
Preserve this backup, you will need this during undoing set-up.
- You HAVE BEEN warned.
#+end_warning

** Bootstrap set-up using script
Set-up may be bootstrapped by running the [[./setup/setup.sh][setup]] script.
#+begin_src sh :tangle no
  curl -sLf "https://pradyparanjpe.gitlab.io/runcom/setup/setup.sh" | sh
#+end_src

#+begin_note
Inspecting scripts before running them is generally a good idea.
The /set-up/ script is tangled (with automation wrappers) from the code below.
If you feel an urge to inspect it or if it fails, follow manual set-up instructions with modifications instead.
#+end_note

** Guide for manual set-up.
#+begin_src sh :tangle ../setup/setup.sh :exports none
  # @description Edit file in appropriate text editor
  # @param $1 file to edit
  # Caution zsh doesn't split _text_edit variable
  edit_text () {
      _text_edit="${FCEDIT:-${VISUAL:-${EDITOR}}}"
      if [ -z "$_text_edit" ]; then
          for avail in nvim nano vim vi ed; do
              if builtin command -v "${avail}" >/dev/null 2>&1; then
                  _text_edit="${avail}"
                  break
              fi
          done
      fi
      $_text_edit "$1"
      unset _text_edit
  }
#+end_src

*** Clone the repository and place at =${RUNCOMDIR}=
#+begin_src sh :tangle ../setup/setup.sh :exports none
  clone_repo () {
      if [ ! -d "${RUNCOMDIR:-${HOME}/.runcom}" ]; then
#+end_src

#+begin_src sh :tangle ../setup/setup.sh
  RUNCOMDIR="${HOME}/.runcom"
  git clone --recurse-submodules \
      "https://gitlab.com/pradyparanjpe/runcom" \
      "${RUNCOMDIR}" || exit 1
#+end_src

#+begin_src sh :tangle ../setup/setup.sh :exports none
  else
      printf "%s already exists. Quitting...\n" "${RUNCOMDIR}"
      exit 0
  fi
  }

   unsubscribe () {
#+end_src

*** Stow dot-files
**** Optionally, edit =stow='s local ignore file
#+begin_seealso
- [[file:index.org::#unstow][Unsubscription]]
#+end_seealso

Use following as a template and place it at =dotfiles/.stow-local-ignore=.
#+begin_src markdown :tangle ../setup/dot-stow-local-ignore
  ## Stow ignore
  ## See runcom's 'Unsubscription from configuration'
  ## See https://www.gnu.org/software/stow/manual/html_node/Ignore-Lists.html
  #
  ## Uncomment appropriate lines to unsubscribe. (remove the '# ')
  ## Comment for subscribe.
  #
  ## Configuration
  \.config/
  # \.config/qt5ct
  #
  ## local bin
  # \.local/bin
  #
  ## profile
  # \.profile\.d
  # \.profile\.d/auth
  #
  ## shrc
  # \.shrc\.d
  # \.shrc\.d/alternatives
  # \.shrc\.d/
#+end_src

Or copy it.
This ignore-file, being /gitignored/, will not be altered upon upstream edits.
#+begin_src sh :tangle ../setup/setup.sh
  cp --update=none "${RUNCOMDIR}/setup/dot-stow-local-ignore" \
     "${RUNCOMDIR}/dotfiles/.stow-local-ignore"
#+end_src

Before going ahead, edit the file =${RUNCOMDIR}/dotfiles/.stow-local-ignore= to unsubscribe some files.
#+begin_src sh :tangle ../setup/setup.sh :exports none
  printf "Unsubscribe from some upstream configuration? [y/N]:\t"
  read -r response
  if echo "${response}" | grep -iq "y"; then
      edit_text "${RUNCOMDIR}/dotfiles/.stow-local-ignore" || exit 0
  fi
  unset response
  }

   mask_stow_directories() {
#+end_src

#+begin_tip
- My configuration =.config= is ignored by default; because opt-In is better than opt-out.
  To subscribe to some of my personal configuration, comment out the =\.config/= entry.
- Read GNU stow's ignore-list for fine-grained control
#+end_tip

**** Preserve 'current' configuration
#+begin_src markdown :tangle ../setup/backup.md
  # RUNCOM backup
  This directory contains a backup of configuration that existed before runcom was setup.
  Files in this directory may be merged to their respective place after inspection.
  A corresponding entry should be added to the `RUNCOMDIR/dotfiles/.stow-local-ignore`.
  I recommend that this directory should **NOT** be deleted.
  It will be required to undo the setup.

  See [Runcom setup](https://pradyparanjpe.github.io/runcom/setup.html).
#+end_src

Create a directory to store current configuration in a *visible* folder in =${XDG_CACHE_HOME}=.
Place the above =README=.md that describes this directory.
#+begin_src sh :tangle ../setup/setup.sh
  presence="${XDG_CACHE_HOME:-${HOME}/.cache}/OLD_CONFIG"
  mkdir -p "${presence}"
  cp --update=none "${RUNCOMDIR}/setup/backup.md" "${presence}/README.md"
#+end_src

**** Move conflicting files to OLD_CONFIG.
#+begin_src sh :tangle ../setup/setup.sh
  stow --simulate --no-folding --dotfiles --verbose --stow \
       -t "${HOME}" \
       -d "${RUNCOMDIR}/" \
       dotfiles 2>&1 >/dev/null \
      | grep -o 'target \+\S\+\? ' \
      | cut -d' ' -f2 \
      | xargs -I{} mv {} "${presence}"/{}
#+end_src

**** Use =GNU stow= to create symlinked structure for all contents in =${RUNCOMDIR}/dotfiles= in =${HOME}=.
With the following options, if =stow= finds a pre-existing directory, symlinks are created inside that directory.
If =stow= finds a pre-existing file (non-directory), it throws error.
#+begin_src sh :tangle ../setup/setup.sh :exports none
  }

   stow_deploy() {
#+end_src

#+begin_src sh :tangle ../setup/setup.sh
  if stow --no-folding --dotfiles -v --restow \
          -t "${HOME}" \
          -d "${RUNCOMDIR}" \
          dotfiles ; then

      # Engrave RUNCOMDIR path
      mkdir -p "${HOME}/.profile.d/base_path"
      printf "RUNCOMDIR=\"%s\"\nexport RUNCOMDIR\n" "${RUNCOMDIR}" \
             > "${HOME}/.profile.d/00-base-path"
  else
      # stow threw error
      stow_error="$?"
      printf "Fix above errors and try again."
      exit "${stow_error}"
  fi
#+end_src

#+begin_src sh :tangle ../setup/setup.sh :exports none
  }
#+end_src

*** Set up HOMEs for Languages
    Cargo (RUST), GO clutter =${HOME}= with its /data/.
    Put it at the right place.
    Cargo's binaries, GOBIN should be installed in =${XDG_DATA_HOME}/../bin= like python3.
#+begin_src sh :tangle ../setup/setup.sh
  # @description
  # Move root of LANGuage named as (HOME/$1) to XDG_DATA_HOME/$1. e.g. ".cargo"
  #  Any leading dots are stripped to unhide.
  # Set Language ROOT Variable ($2) to point to that location. e.g. "CARGO_HOME"
  # Symlink ($3) bin location relative to ROOT to "XDG_DATA_HOME/../bin/".
  #   E.g. bin: ROOT/bin -> "XDG_DATA_HOME/../bin/". Default: bin
  # Set BINVAR ($4) to point to "XDG_DATA_HOME/../bin/". e.g. GOBIN.
  move_roots () {
      local_bin="$(realpath "${XDG_DATA_HOME:-${HOME}/.local/share}/../bin")"
      lang_home="${XDG_DATA_HOME:-${HOME}/.local/share}/${1##*.}"
      bad_lang_home="${HOME}/${1}"
      root_lang_bin="${lang_home}/${3:-bin}"
      if [ -d "${bad_lang_home}" ] && [ ! -L "${bad_lang_home}" ]; then
          printf "Moving %s to a better location, %s.\n" "${bad_lang_home}" \
                 "${lang_home}"
          mv "${bad_lang_home}" "${lang_home}"
      fi
      eval "${2}=\"${lang_home}\""
      export "${2?}"
      if [ ! "$(readlink -f "${root_lang_bin}")" = "${local_bin}" ]; then
          mv -t "${local_bin}" "${root_lang_bin}"/* 2>&1
          rmdir "${root_lang_bin}"
          ln -s "${local_bin}" "${root_lang_bin}"
      fi
      if [ -n "${4}" ]; then
          eval "${4}=${local_bin}"
          export "${4?}"
      fi
      unset local_bin lang_home bad_lang_home root_lang_bin
  }
#+end_src

#+begin_src sh :tangle ../setup/setup.sh :exports none
  main () {
      clone_repo
      mask_stow_directories
      unsubscribe
      stow_deploy
#+end_src

Move roots for CARGO_HOME and GOPATH to =${XDG_DATA_HOME}=.
#+begin_src sh :tangle ../setup/setup.sh
  move_roots .cargo CARGO_HOME
  move_roots go GOPATH
#+end_src

#+begin_todo
TODO: Add more languages.
#+end_todo

#+begin_src sh :tangle ../setup/setup.sh :exports none
  }

  main "$@"
#+end_src

#+begin_tip
- Remember to keep the repository updated.

#+begin_src sh :tangle no
    git pull --recurse-submodules
#+end_src
#+end_tip

* Undo Set-up
#+begin_warning
Do *NOT* use =sudo= during unset.
#+end_warning

#+begin_note
- The next steps will require a directory containing 'old configuration files'.
- You HAD BEEN warned against deleting it during the set-up.
#+end_note

** Bootstrap unset using script
   - Unset may be bootstrapped by running the [[./setup/unset.sh][unset]] script.
#+begin_src sh :tangle no
  curl -sLf "https://pradyparanjpe.gitlab.io/runcom/setup/unset.sh" | sh
#+end_src

#+begin_note
Inspecting scripts before running them is generally a good idea.
The /unset/ script is tangled (with automation wrappers) from the code below.
If you feel an urge to inspect it or if it fails, follow manual unset instructions with modifications instead.
#+end_note

** Guide to manually undo set-up.
*** UnStow dot-files
Use =GNU stow= to unstow to un-linked structure for all contents in =${RUNCOMDIR}/dotfiles= from =${HOME}=.
**** RUNCOMDIR
We expect =$RUNCOMDIR= to be set via =${HOME}/.profile=.
Set it by hand otherwise.
#+begin_src sh :tangle ../setup/unset.sh :exports no
  RUNCOMDIR="${RUNCOMDIR:-${HOME}/.runcom}"
#+end_src

**** UnStow
#+begin_src sh :tangle no
  stow -v -t "${HOME}" -d "${RUNCOMDIR}" -D dotfiles
#+end_src

#+begin_src sh :tangle ../setup/unset.sh :exports none
  unstow_undeploy() {
      if ! stow -v -t "${HOME}" -d "${RUNCOMDIR}" -D dotfiles; then
          # stow threw error
          stow_error="$?"
          printf "Fix above errors and try again."
          exit "${stow_error}"
      fi
  }

  restore_configurations() {
#+end_src

**** Restore directories form =${XDG_CACHE_HOME:-${HOME}/.cache}/OLD_CONFIG=
#+begin_src sh :tangle ../setup/unset.sh :exports none
  if [ ! -d "${1:-${XDG_CACHE_HOME:-${HOME}/.cache}/OLD_CONFIG}" ]; then
      printf "Old Configuration not found. Please supply as a positional argument.\n"
      printf "Such as %s <path/to/old/config/directory>\n" "$0"
      exit 1
  fi
#+end_src

Replace the target directory =${1:-${XDG_CACHE_HOME:-${HOME}/.cache}/OLD_CONFIG}= in following code block with <path/to/old/config/directory>.
#+begin_src sh :tangle ../setup/unset.sh
  for conf_dir in "${1:-${XDG_CACHE_HOME:-${HOME}/.cache}/OLD_CONFIG}"/*; do
      cp -r "${conf_dir}" "${HOME}"/. || break
  done

  # shellcheck disable=SC2181
  if [ $? -ne 0 ]; then
      printf "Restoration unsuccessful, copy backup files manually.\n"
  else
      printf "Restoration successful, backup directory may be deleted.\n"
  fi
#+end_src

*** Delete runcom
Goodbye

#+begin_src sh :tangle ../setup/unset.sh :exports none
  }

   delete_repo () {
#+end_src

#+begin_src sh :tangle ../setup/unset.sh
  rm -rf "${RUNCOMDIR}" && printf "Goodbye 👋\n"
#+end_src

*** Restore LANG_HOME
Move =${XDG_DATA_HOME}/LANG= to =${HOME}/.LANG=.
#+begin_src sh :tangle no
  # @description
  # Move root of LANGuage named as XDG_DATA_HOME/$1 back to (HOME/$1). e.g. ".cargo"
  #  Any leading dots are stripped to unhide.
  # Unset Language ROOT Variable ($2). e.g. "CARGO_HOME"
  # Let the symlinked bin to remain at "XDG_DATA_HOME/../bin/"
  # Unset BINVAR ${3} e.g. GOBIN.
  move_roots () {
      local_bin="$(realpath "${XDG_DATA_HOME:-${HOME}/.local/share}/../bin")"
      lang_home="${XDG_DATA_HOME:-${HOME}/.local/share}/${1##*.}"
      bad_lang_home="${HOME}/${1}"
      root_lang_bin="${lang_home}/${3:-bin}"
      if [ -d "${lang_home}" ] && [ ! -L "${lang_home}" ] && [ -L "${bad_lang_home}" ]; then
          rm "${bad_lang_home}"
          printf "Moving %s back to canonical location, %s.\n" \
                 "${lang_home}" "${bad_lang_home}"
          mv "${lang_home}" "${bad_lang_home}"
          unset "${2?}" "${4?}"
          export "${2?}" "${4?}"
      fi
      unset local_bin lang_home bad_lang_home root_lang_bin
  }
#+end_src

#+begin_src sh :tangle ../setup/unset.sh :exports none
  }

   main () {
       unstow_undeploy
       restore_configurations "$@"
       delete_repo
#+end_src

#+begin_src sh :tangle ../setup/unset.sh
  move_roots .cargo CARGO_HOME
  move_roots go GOPATH
#+end_src

#+begin_src sh :tangle ../setup/unset.sh :exports none
  }

   main "$@"
#+end_src

* Personalization
- To disable ui launch from =/dev/tty*=, set export environment variable =RUNCOM_LAUNCH_UI=false= in =~/.profile.d/UI=.

** Proxy settings
Read set up for [[./proxy_send.html][proxy_send]].
