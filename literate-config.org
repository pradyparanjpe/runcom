#-*- coding:utf-8; mode:org; -*-
#+TITLE: Prady_runcom
#+AUTHOR: Pradyumna Paranjape
#+EMAIL: pradyparanjpe@rediffmail.com
#+LANGUAGE: en
#+OPTIONS: toc: t mathjax:t TeX:t num:t ::t :todo:nil tags:nil *:t skip:t
#+STARTUP: overview
#+PROPERTY: header-args :tangle
* Copyright/License Header
  Copyright 2020 Pradyumna Paranjape

  This file is part of Prady_runcom.

  Prady_runcom is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Prady_runcom is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with Prady_runcom.  If not, see <https://www.gnu.org/licenses/>.

* What is this?
  Following configuration files are available. This literate configuration tangles their contents.
  |----------------------------------+-------+--------+--------+------+-----+------+-----+------+-----|
  | Configuration File Path          | POSIX | Remote | Remote | CLI  | CLI | GUI  | GUI | SH   | SH  |
  |                                  |       | bash   | zsh    | bash | zsh | bash | zsh | bash | zsh |
  |----------------------------------+-------+--------+--------+------+-----+------+-----+------+-----|
  | /etc/profile                     | yes   |        |        |      |     |      |     |      |     |
  | /etc/bashrc                      | yes   |        |        |      |     |      |     |      |     |
  | /etc/zshrc                       | yes   |        |        |      |     |      |     |      |     |
  | /etc/profile.d/*                 | yes   |        |        |      |     |      |     |      |     |
  | ${HOME}/.bashrc                  | No    |        |        |      |     |      |     |      |     |
  | ${HOME}/.zshrc                   | No    |        |        |      |     |      |     |      |     |
  | ${HOME}/.bash_profile            | No    |        |        |      |     |      |     |      |     |
  | ${HOME}/.bash_login              | No    |        |        |      |     |      |     |      |     |
  | ${HOME}/.profile                 | Yes   |        |        |      |     |      |     |      |     |
  | ${HOME}/.zprofile                | No    |        |        |      |     |      |     |      |     |
  | ${HOME}/.bash_completion.d/*     | No    |        |        |      |     |      |     |      |     |
  | ${RUNCOMDIR}/bashrc              | No    |        |        |      |     |      |     |      |     |
  | ${RUNCOMDIR}/zshrc               | No    |        |        |      |     |      |     |      |     |
  | ${RUNCOMDIR}/shrc                | No    |        |        |      |     |      |     |      |     |
  | ${RUNCOMDIR}/profile             | Yes   |        |        |      |     |      |     |      |     |
  | ${RUNCOMDIR}/bash_login          | No    |        |        |      |     |      |     |      |     |
  | ${RUNCOMDIR}/zlogin              | No    |        |        |      |     |      |     |      |     |
  | ${RUNCOMDIR}/ui                  | Yes   |        |        |      |     |      |     |      |     |
  | ${RUNCOMDIR}/complete.bash       | No    |        |        |      |     |      |     |      |     |
  | ${XDG_COONFIG_HOME}/varrc        | yes   |        |        |      |     |      |     |      |     |
  | ${XDG_CONFIG_HOME}/pspman/bashrc | Yes   |        |        |      |     |      |     |      |     |
  |----------------------------------+-------+--------+--------+------+-----+------+-----+------+-----|

** Bash
*** /etc/profile
**** /etc/bashrc
***** /etc/profile.d/*

*** ${HOME}/.bash_profile
**** ${HOME}/.profile
***** ${XDG_CONFIG_HOME}/varrc
***** ${RUNCOMDIR}/profile
***** ${XDG_CONFIG_HOME}/pspman/profile
**** ${HOME}/.bashrc
***** ${RUNCOMDIR}/bashrc
****** ${RUNCOMDIR}/shrc
**** ${HOME}/.bash_login
***** ${RUNCOMDIR}/bash_login
****** ${RUNCOMDIR}/ui

** Zsh
*** /etc/profile
**** /etc/zshrc
***** /etc/profile.d/*

*** ${HOME}/.zshenv
*** ${HOME}/.zprofile
**** ${HOME}/.profile
***** ${XDG_CONFIG_HOME}/varrc
***** ${RUNCOMDIR}/profile
***** ${XDG_CONFIG_HOME}/pspman/profile
*** ${HOME}/.zshrc
**** ${RUNCOMDIR}/zshrc
***** ${RUNCOMDIR}/shrc
*** ${HOME}/.zlogin
**** ${RUNCOMDIR}/zlogin
***** ${RUNCOMDIR}/ui

* Headers
  #+BEGIN_SRC bash :tangle shrc
        # shellcheck shell=bash
        # -*- coding:utf-8; mode:shell-script; -*-
        #
        # Copyright 2020 Pradyumna Paranjape
        #
        # This file is part of Prady_runcom.
        #
        # Prady_runcom is free software: you can redistribute it and/or modify
        # it under the terms of the GNU General Public License as published by
        # the Free Software Foundation, either version 3 of the License, or
        # (at your option) any later version.
        #
        # Prady_runcom is distributed in the hope that it will be useful,
        # but WITHOUT ANY WARRANTY; without even the implied warranty of
        # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        # GNU General Public License for more details.
        #
        # You should have received a copy of the GNU General Public License
        # along with Prady_runcom.  If not, see <https://www.gnu.org/licenses/>.
        #
        #===================================================================
        #  ___             _      ___                     _
        # | _ \_ _ __ _ __| |_  _| _ \__ _ _ _ __ _ _ _  (_)_ __  ___
        # |  _/ '_/ _` / _` | || |  _/ _` | '_/ _` | ' \ | | '_ \/ -_)
        # |_| |_| \__,_\__,_|\_, |_| \__,_|_| \__,_|_||_|/ | .__/\___|
        #                    |__/                      |__/|_|
        #===================================================================

  #+END_SRC
  #+BEGIN_SRC bash :tangle bashrc
    # shellcheck shell=bash
    # -*- coding:utf-8; mode:shell-script; -*-
    #
    # Copyright 2020 Pradyumna Paranjape
    #
    # This file is part of Prady_runcom.
    #
    # Prady_runcom is free software: you can redistribute it and/or modify
    # it under the terms of the GNU General Public License as published by
    # the Free Software Foundation, either version 3 of the License, or
    # (at your option) any later version.
    #
    # Prady_runcom is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    # GNU General Public License for more details.
    #
    # You should have received a copy of the GNU General Public License
    # along with Prady_runcom.  If not, see <https://www.gnu.org/licenses/>.
    #
    #===================================================================
    #  ___             _      ___                     _
    # | _ \_ _ __ _ __| |_  _| _ \__ _ _ _ __ _ _ _  (_)_ __  ___
    # |  _/ '_/ _` / _` | || |  _/ _` | '_/ _` | ' \ | | '_ \/ -_)
    # |_| |_| \__,_\__,_|\_, |_| \__,_|_| \__,_|_||_|/ | .__/\___|
    #                    |__/                      |__/|_|
    #===================================================================

  #+END_SRC
  #+BEGIN_SRC bash :tangle zshrc
    # shellcheck shell=bash
    # -*- coding:utf-8; mode:shell-script; -*-
    #
    # Copyright 2020 Pradyumna Paranjape
    #
    # This file is part of Prady_runcom.
    #
    # Prady_runcom is free software: you can redistribute it and/or modify
    # it under the terms of the GNU General Public License as published by
    # the Free Software Foundation, either version 3 of the License, or
    # (at your option) any later version.
    #
    # Prady_runcom is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    # GNU General Public License for more details.
    #
    # You should have received a copy of the GNU General Public License
    # along with Prady_runcom.  If not, see <https://www.gnu.org/licenses/>.
    #
    #===================================================================
    #  ___             _      ___                     _
    # | _ \_ _ __ _ __| |_  _| _ \__ _ _ _ __ _ _ _  (_)_ __  ___
    # |  _/ '_/ _` / _` | || |  _/ _` | '_/ _` | ' \ | | '_ \/ -_)
    # |_| |_| \__,_\__,_|\_, |_| \__,_|_| \__,_|_||_|/ | .__/\___|
    #                    |__/                      |__/|_|
    #===================================================================

  #+END_SRC
  #+BEGIN_SRC bash :tangle bash_login
    # shellcheck shell=bash
    # -*- coding:utf-8; mode:shell-script; -*-
    #
    # Copyright 2020 Pradyumna Paranjape
    #
    # This file is part of Prady_runcom.
    #
    # Prady_runcom is free software: you can redistribute it and/or modify
    # it under the terms of the GNU General Public License as published by
    # the Free Software Foundation, either version 3 of the License, or
    # (at your option) any later version.
    #
    # Prady_runcom is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    # GNU General Public License for more details.
    #
    # You should have received a copy of the GNU General Public License
    # along with Prady_runcom.  If not, see <https://www.gnu.org/licenses/>.
    #
    #===================================================================
    #  ___             _      ___                     _
    # | _ \_ _ __ _ __| |_  _| _ \__ _ _ _ __ _ _ _  (_)_ __  ___
    # |  _/ '_/ _` / _` | || |  _/ _` | '_/ _` | ' \ | | '_ \/ -_)
    # |_| |_| \__,_\__,_|\_, |_| \__,_|_| \__,_|_||_|/ | .__/\___|
    #                    |__/                      |__/|_|
    #===================================================================

  #+END_SRC
  #+BEGIN_SRC bash :tangle zlogin
    # shellcheck shell=bash
    # -*- coding:utf-8; mode:shell-script; -*-
    #
    # Copyright 2020 Pradyumna Paranjape
    #
    # This file is part of Prady_runcom.
    #
    # Prady_runcom is free software: you can redistribute it and/or modify
    # it under the terms of the GNU General Public License as published by
    # the Free Software Foundation, either version 3 of the License, or
    # (at your option) any later version.
    #
    # Prady_runcom is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    # GNU General Public License for more details.
    #
    # You should have received a copy of the GNU General Public License
    # along with Prady_runcom.  If not, see <https://www.gnu.org/licenses/>.
    #
    #===================================================================
    #  ___             _      ___                     _
    # | _ \_ _ __ _ __| |_  _| _ \__ _ _ _ __ _ _ _  (_)_ __  ___
    # |  _/ '_/ _` / _` | || |  _/ _` | '_/ _` | ' \ | | '_ \/ -_)
    # |_| |_| \__,_\__,_|\_, |_| \__,_|_| \__,_|_||_|/ | .__/\___|
    #                    |__/                      |__/|_|
    #===================================================================

  #+END_SRC
  #+BEGIN_SRC sh :tangle profile
    # shellcheck shell=bash
    # -*- coding:utf-8; mode:shell-script; -*-
    #
    # Copyright 2020 Pradyumna Paranjape
    #
    # This file is part of Prady_runcom.
    #
    # Prady_runcom is free software: you can redistribute it and/or modify
    # it under the terms of the GNU General Public License as published by
    # the Free Software Foundation, either version 3 of the License, or
    # (at your option) any later version.
    #
    # Prady_runcom is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    # GNU General Public License for more details.
    #
    # You should have received a copy of the GNU General Public License
    # along with Prady_runcom.  If not, see <https://www.gnu.org/licenses/>.
    #
    #===================================================================
    #  ___             _      ___                     _
    # | _ \_ _ __ _ __| |_  _| _ \__ _ _ _ __ _ _ _  (_)_ __  ___
    # |  _/ '_/ _` / _` | || |  _/ _` | '_/ _` | ' \ | | '_ \/ -_)
    # |_| |_| \__,_\__,_|\_, |_| \__,_|_| \__,_|_||_|/ | .__/\___|
    #                    |__/                      |__/|_|
    #===================================================================

  #+END_SRC
  #+BEGIN_SRC sh :tangle ui
    # shellcheck shell=bash
    # -*- coding:utf-8; mode:shell-script; -*-
    #
    # Copyright 2020 Pradyumna Paranjape
    #
    # This file is part of Prady_runcom.
    #
    # Prady_runcom is free software: you can redistribute it and/or modify
    # it under the terms of the GNU General Public License as published by
    # the Free Software Foundation, either version 3 of the License, or
    # (at your option) any later version.
    #
    # Prady_runcom is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    # GNU General Public License for more details.
    #
    # You should have received a copy of the GNU General Public License
    # along with Prady_runcom.  If not, see <https://www.gnu.org/licenses/>.
    #
    #===================================================================
    #  ___             _      ___                     _
    # | _ \_ _ __ _ __| |_  _| _ \__ _ _ _ __ _ _ _  (_)_ __  ___
    # |  _/ '_/ _` / _` | || |  _/ _` | '_/ _` | ' \ | | '_ \/ -_)
    # |_| |_| \__,_\__,_|\_, |_| \__,_|_| \__,_|_||_|/ | .__/\___|
    #                    |__/                      |__/|_|
    #===================================================================

  #+END_SRC

* Init
** bash
   Settings
   #+BEGIN_SRC bash :tangle bashrc
     shopt -s autocd
     set -o vi
     bind '"jk":vi-movement-mode'
   #+END_SRC

** zsh
   Settings
   Unset options:
   - setopt SHARE_HISTORY             # Share history between all sessions.
   - setopt HIST_BEEP                 # Beep when accessing nonexistent history.
   - HISTCONTROL=ignoreboth           # ignore commands staring with " " and duplicate
     #+BEGIN_SRC bash :tangle zshrc
       HISTFILE="${HOME}/.zhistory"
       HISTSIZE=10000
       SAVEHIST=10000

       setopt autocd
       setopt interactive_comments
       setopt appendhistory extendedglob notify
       setopt BANG_HIST                 # Treat the '!' character specially during expansion.
       setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
       setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
       setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
       setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
       setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
       setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
       setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
       setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
       setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
       setopt HIST_VERIFY               # Don't execute immediately upon history expansion.
       unsetopt beep
       autoload colors && colors
       autoload bashcompinit
       bashcompinit

       # vim keybindings
       bindkey -v
       bindkey -s '^o' 'lfcd\n'
       bindkey -s '^f' 'fzfcd\n'
       bindkey '^[[P' delete-char

       export KEYTIMEOUT=40

       # Change cursor shape for different vi modes.
       zle-keymap-select () {
           if [[ ${KEYMAP} == vicmd ]] ||
                  [[ $1 = 'block' ]]; then
               echo -ne '\e[2 q'

           elif [[ ${KEYMAP} == main ]] ||
                    [[ ${KEYMAP} == viins ]] ||
                    [[ ${KEYMAP} = '' ]] ||
                    [[ $1 = 'beam' ]]; then
               echo -ne '\e[6 q'
           fi
       }
       # Use vim keys in tab complete menu:
       zmodload zsh/complist
       bindkey -M menuselect 'h' vi-backward-char
       bindkey -M menuselect 'k' vi-up-line-or-history
       bindkey -M menuselect 'l' vi-forward-char
       bindkey -M menuselect 'j' vi-down-line-or-history
       bindkey -v '^?' backward-delete-char

       zle -N zle-keymap-select

       # Use beam shape cursor for each new prompt.
       _fix_cursor () {
           echo -ne '\e[6 q'
       }
       precmd_functions+=(_fix_cursor)

       bindkey -M viins 'jk' vi-cmd-mode
       bindkey '^r' history-incremental-search-backward
       while read -r share_dir; do
           highlight_dir="${share_dir}/zsh-syntax-highlighting"
           if [ -d "${highlight_dir}" ]; then
               # shellcheck disable=SC1090
               . "${highlight_dir}/zsh-syntax-highlighting.zsh"
               break
           fi
       done << EOF
       /usr/local/share
       /usr/share
       ${XDG_DATA_HOME:-${HOME}/.local/share}
       ${XDG_DATA_HOME:-${HOME}/.local/share}/pspman/local/share
       ${HOME}/local/share
       ${HOME}/share
       EOF

       unset share_dir
       unset highlight_file
     #+END_SRC

* Inherit
** bash
   #+BEGIN_SRC bash :tangle bashrc
     # shellcheck source=".runcom/shrc"
     if [ -f "${RUNCOMDIR}"/shrc ]; then
         . "${RUNCOMDIR}"/shrc
     fi
   #+END_SRC

** zsh
   #+BEGIN_SRC bash :tangle zshrc
     # shellcheck source=".runcom/shrc"
     if [ -f "${RUNCOMDIR}"/shrc ]; then
         . "${RUNCOMDIR}"/shrc
     fi
   #+END_SRC

** shrc
*** Python
    [[https://github.com/kislyuk/argcomplete][Argcomplete]] to complete python commands
    #+BEGIN_SRC bash :tangle shrc
      # shellcheck source=.local/share/pspman/src/runcom/complete.bash
      if [ -f "${RUNCOMDIR}"/complete.bash ]; then
          # shellcheck source=.local/share/pspman/src/runcom/complete.bash
          . "${RUNCOMDIR}"/complete.bash
      fi

      export PY_ARG_COMPL_SCRIPTS=( "frac-time" "ppsid" "ppsi pspbar")
    #+END_SRC

* Variables
** PATH
   #+BEGIN_SRC sh :tangle profile
     RUNCOMDIR="${HOME}/.runcom"
     export RUNCOMDIR
     # shellcheck source="bin"
     if [ -d "${HOME}/bin" ] ; then
         if [ "${PATH#*${HOME}/bin}" = "${PATH}" ]; then
             PATH="${HOME}/bin:${PATH}"
         fi
     fi
     # shellcheck source=".local/bin"
     if [ -d "${HOME}/.local/bin" ] ; then
         if [ "${PATH#*${HOME}/.local/bin}" = "${PATH}" ]; then
             PATH="${HOME}/.local/bin:${PATH}"
         fi
     fi
     export PATH;
   #+END_SRC

** Editor wars
   #+BEGIN_SRC sh :tangle profile
     while read -r avail; do
         if command -v "${avail}" > /dev/null 2>&1; then
             EDITOR="${avail}"
         fi
     done << EOF
     nano
     vi
     vim
     nvim
     EOF
     export EDITOR

     case "$EDITOR" in
         vim)
             export MANPAGER='/bin/bash -c "vim -MRn -c \"set buftype=nofile showtabline=0 ft=man ts=8 nomod nolist norelativenumber nonu noma\" -c \"normal L\" -c \"nmap q :qa<CR>\"</dev/tty <(col -b)"'
             ;;
         nvim)
             export MANPAGER="nvim -c 'set ft=man' -"
             ;;
         ,*)
             export MANPAGER='bat -l man -p'
             ;;
     esac
     export MANPAGER
   #+END_SRC

** C(++) exports
   #+BEGIN_SRC sh :tangle profile
     LD_LIBRARY_PATH="${HOME}/.local/lib:${HOME}/.local/lib64";
     C_INCLUDE_PATH="${HOME}/.pspman/include/"
     CPLUS_INCLUDE_PATH="${HOME}/.pspman/include/"
     export LD_LIBRARY_PATH
     export C_INCLUDE_PATH
     export CPLUS_INCLUDE_PATH
   #+END_SRC

** GPU exports
   #+BEGIN_SRC sh :tangle profile
     PYOPENCL_CTX='0';
     PYOPENCL_COMPILER_OUTPUT=1;
     OCL_ICD_VENDORS="/etc/OpenCL/vendors/";
     export PYOPENCL_CTX
     export PYOPENCL_COMPILER_OUTPUT
     export OCL_ICD_VENDORS
   #+END_SRC

** Bemenu exports
   #+BEGIN_SRC bash :tangle shrc
     export BEMENU_OPTS='--fn firacode 14 '
   #+END_SRC

** GTK+ debugging output
   Silence debugging output for gtk+
   #+BEGIN_SRC sh :tangle profile
     NO_AT_BRIDGE=1
     export NO_AT_BRIDGE
   #+END_SRC

* Functions
** Python
*** Python version
    to locate site-packages

    #+BEGIN_SRC bash :tangle shrc
      function python_ver() {
          python --version |cut -d "." -f1,2 |sed 's/ //' |sed 's/P/p/'
      }
    #+END_SRC

*** Dummy placeholder
    If not in an python virtual environment, "deactivate" shouldn't through errors
    #+BEGIN_SRC bash :tangle shrc
      function deactivate() {
          true
      }
    #+END_SRC

*** Quickly change to virtualenv
    Scan upto mountpoint, if any direct parent has .venv, source that ".venv/bin/activate"
    This may require shell-identification for ksh, csh, fish since they have a different activate
    #+BEGIN_SRC bash :tangle shrc
      # shellcheck shell=sh
      function to_venv () {
          cwd="$(realpath $PWD)"
          testdir="${cwd}"
          until mountpoint "${testdir}" >/dev/null 2>/dev/null; do
              if [ -d "${testdir}"/.venv ] || [ -L "${testdir}"/.venv ]; then
                  # .venv found
                  . "${testdir}/.venv/bin/activate"
                  printf "Found .venv at %s, switching...\n" "${testdir}"
                  return
              fi
              testdir="$(dirname "${testdir}")"
          done
          printf "Couldn't find .venv upto mountpoint %s\n" "${testdir}"
      }
    #+END_SRC

** Git
*** Status
    #+BEGIN_SRC bash :tangle shrc
      function git_status() {
          local modified=0
          local cached=0
          local untracked=0

          while read -r line; do
              if [ "$line" = '_?_?_' ]; then
                  untracked=1
                  continue
              fi

              if [[ "$line" =~ ^_[^[:space:]]_.?_ ]]; then
                  cached=1
              fi

              if [[ "$line" =~ ^_._[^[:space:]]_ ]]; then
                  modified=1
              fi
          done < <(git status --short | cut -b -2 | sed -e 's/\(.\)\(.*\)/_\1_\2_/')

          stat_str=''
          if [ $modified -ne 0 ]; then
              stat_str="${stat_str}\033[0;31m\ue728"
          fi

          if [ $cached -ne 0 ]; then
              stat_str="${stat_str}\033[0;32m\ue729"
          fi

          if [ $untracked -ne 0 ]; then
              stat_str="${stat_str}\033[0;31m\uf476"
          fi

          if [ -n "$(git stash list)" ]; then
              stat_str="${stat_str}\e[0;36m\uf48e"
          fi
          if [[ -n "${stat_str}" ]]; then
              echo -en "${stat_str}\e[m"
          fi
      }
    #+END_SRC

*** Branch
    #+BEGIN_SRC bash :tangle shrc
      function git_branch() {
          local branch
          branch="$(git branch 2>/dev/null | grep '^\*' | sed -e "s/^* //")"
          if [[ -n "$branch" ]]; then
              if [[ "${branch}" =~ ^feat- ]]; then
                  echo -ne "\033[0;32m"
              elif [[ "${branch}" =~ ^bug- ]]; then
                  echo -ne "\033[0;31m"
              elif [[ "${branch}" =~ ^atc- ]]; then
                  echo -ne "\e[0;36m"
              elif [[ "${branch}" =~ ^tmp ]]; then
                  echo -ne "\e[0;35m"
              elif [[ "${branch}" = "(detached from hde/master)" ]]; then
                  echo -ne "\e[0;33m"
              elif [[ "${branch}" == "master" ]]; then
                  return
              else
                  echo -ne "\e[0;35m"
              fi
              echo -ne "${branch}\ue725"
              echo -ne "\e[m"
          fi
      }
    #+END_SRC
*** Hash
    #+BEGIN_SRC bash :tangle shrc
      function git_hash() {
          git log --pretty=format:'%h' -n 1
      }
    #+END_SRC

*** Prompt string
    Include git's branch, hash, status in PS1 if in git repository
    This function is called in PS1 section below
    #+NAME: Git PS
    #+BEGIN_SRC bash :tangle shrc
      function git_ps() {
          if ! git status --ignore-submodules &>/dev/null; then
              return
          else
              echo -ne " $(git_branch)$(git_hash)$(git_status) "
          fi
      }
    #+END_SRC

** Prompt String
*** Exit_color
    #+BEGIN_SRC bash :tangle shrc
      last_exit_color () {
          err="$1"
          if [ "$err"  = "0" ]; then
              # no error
              printf "\e[0;32m"
          elif [ "$err"  = "1" ]; then
              # general error
              printf "\e[0;33m"
          elif [ "$err"  = "2" ]; then
              # misuse of shell builtins
              printf "\e[0;31m"
          elif [ "$err" -gt "63" ] && [ "$err" -lt "84" ]; then
              # syserror.h
              printf "\e[0;91m"
          elif [ "$err"  = "126" ]; then
              # cannot execute
              printf "\e[0;37m"
          elif [ "$err"  = "127" ]; then
              # command not found
              printf "\e[0;30m"
          elif [ "$err" -gt "127" ] && [ "$err" -lt "191" ]; then
              # Fatal error
              printf "\e[0;41m"
          elif [ "$err"  = "255" ]; then
              # exit status limit
              printf "\e[0;31m"
          else
              printf "\e[0;31m"
          fi
      }
    #+END_SRC

*** PROMPT_COMMAND
**** bash
     #+BEGIN_SRC bash :tangle bashrc
       export PROMPT_COMMAND=__prompt_command
       __prompt_command () {
           exit_stat="$?"
           PS1=""
           PS1+="\[\$(last_exit_color ${exit_stat})\]┏━ \[\e[m\]"
           PS1+="\[\e[0;32m\]\u\[\e[m\]"
           PS1+="@"
           PS1+="\[\e[0;34m\]\h\[\e[m\]"
           PS1+="\$(git_ps)"
           PS1+="\[\e[0;37m\]<"
           PS1+="\[\e[0;36m\]\W"
           PS1+="\[\e[0;37m\]>"
           PS1+="\[\e[0;33m\]\t\[\e[m\]"
           PS1+="\n\[\$(last_exit_color ${exit_stat})\]┗━ \[\e[m\]"

           PS2=""
           PS2+="\[\e[0;36m\]cont..."
           PS2+="\[\e[m\]"
           PS2+="» ";

           PS3='Selection: ';
       }
     #+END_SRC

**** zsh
     #+BEGIN_SRC sh :tangle zshrc
       precmd () {
           exit_stat="$?"
           PS1=$''
           PS1+="%{$(last_exit_color ${exit_stat})%}"
           PS1+=$'┏━ \e[m'
           PS1+=$'%{\e[0;32m%}%n%{\e[m%}'
           PS1+=$'@'
           PS1+=$'%{\e[0;34m%}%m%{\e[m%}'
           PS1+="$(git_ps)"
           PS1+=$'%{\e[0;37m%}<'
           PS1+=$'%{\e[0;36m%}%1~'
           PS1+=$'%{\e[0;37m%}>'
           PS1+=$'%{\e[0;33m%}%*%{\e[m%}\n'
           PS1+="%{$(last_exit_color ${exit_stat})%}"
           PS1+=$'┗━ %{\e[m%}'

           PS2=$''
           PS2+=$'%{\e[0;36m%}cont...'
           PS2+=$'%{\e[m%}'
           PS2+=$'» ';

           PS3='Selection: ';
       }
     #+END_SRC

** Mathematical
*** In-Line Calculator
    #+BEGIN_SRC bash :tangle shrc
      function mathcalc() {
          echo "$*"| bc -lq
      }
    #+END_SRC

*** Computational
    #+BEGIN_SRC bash :tangle shrc
      function dec2hex() {
          echo "hex:"
          echo "obase=16; $*"| bc
          echo "dec:"
          echo "ibase=16; $*"| bc
      }
    #+END_SRC

** Compilation
*** PDF from Latex
    #+BEGIN_SRC bash :tangle shrc
      function pdfcompile() {
          pdflatex "$1"
          for ext in toc log aux; do
              delfile="${1/\.tex/\.$ext}"
              [[ -f "$delfile" ]] && rm "$delfile"
          done
          evince "${1/\.tex/\.pdf}"
      }
    #+END_SRC
*** Pandoc
**** Org to Something
     #+BEGIN_SRC bash :tangle shrc
       function org2export() {
           # Usage: org2oth [-f] <infile> <othtype>
           proceed=
           while test $# -gt 1; do
               case "$1" in
                   -f|--force)
                       proceed=true
                       shift 1
                       ;;
                   ,*)
                       infile="${1}"
                       shift 1
                       ;;
               esac
           done
           if [ "${1}" = "pdf" ]; then
               target="latex"
           else
               target="${1}"
           fi
           tarext="${1}"
           if [ "$infile" = *.org ]; then
               proceed=true
           else
               echo "Input file should be an org file"
           fi
           if [ -n "$proceed" ]; then
               pandoc -f org -t "${target}" -o "${infile/.org/}.${tarext}" "$infile"
           fi
           proceed=
           target=
           infile=
       }
     #+END_SRC

**** Org to Docx
     #+BEGIN_SRC bash :tangle shrc
       function org2doc () {
           org2export "$@" "docx"
       }
     #+END_SRC

**** Org to PDF
     #+BEGIN_SRC bash :tangle shrc
       function org2pdf () {
           org2export "$@" "pdf"
       }
     #+END_SRC

**** Docx to Org
     #+BEGIN_SRC bash :tangle shrc
       function doc2org() {
           if [ "$1" == *.docx ]; then
               pandoc -f docx -t org -o  "${1/%docx/org}" "$1"
           else
               echo "Input file must be a docx file"
           fi
       }
     #+END_SRC

** Mount Home Server
   Home Cloud mounts
   #+BEGIN_SRC bash :tangle shrc
     function mount_home_cloud() {
         # shellcheck disable=SC2154
         if [ -z "${home_cloud}" ] || [ -z "${cloud_user}" ]; then
             echo "variables \$home_cloud OR \$cloud_user haven't been defined"
             return
         fi
         # netcheck source=./netcheck.sh
         IFS=$'\t' read -r IP_ADDR AP_ADDR netstate <<< "$("${RUNCOMDIR}"/netcheck.sh)"
         # IFS=$'\t' read -r -a netcodes <<< "$("${RUNCOMDIR}"/netcheck.sh)"
         if [ $(( netstate % 4 )) -eq 2 ]; then
             clouddir=( "/media/data" "/home/${cloud_user}" )
             srv_mnt_dir="${HOME}/${home_cloud}"
             if [ $(mount | grep -c "${srv_mnt_dir}") \
                      -lt "${#clouddir[@]}" ]; then
                 # not mounted
                 for pathloc in "${clouddir[@]}"; do
                     mntpath="${srv_mnt_dir}${pathloc}"
                     mkdir -p "$mntpath"
                     sshfs -o "reconnect,ServerAliveInterval=15,ServerAliveCountMax=3" "${cloud_user}@${home_cloud}:${pathloc}" "$mntpath"
                 done
             fi
         fi
     }
   #+END_SRC

** Launch gui
   Launch application and exit terminal window
   Acts like a launcher
   Uninteractive terminal commands may also be called
   #+BEGIN_SRC bash :tangle shrc
     gui () {
         usage="usage: $0 [-h|--help] CMD\n"
         cmd_help="Launch CMD, switch to it, and exit the parent terminal\n\n"
         cmd_help="${cmd_help}Optional arguments:\n"
         cmd_help="${cmd_help}-h|--help\tdisplay this help and exit\n"
         command=
         call=

         while [ $# -gt 0 ]; do
             case "$1" in
                 --help|-h)
                     printf "%s""${usage}"
                     printf "%s""${cmd_help}"
                     shift 1
                     unset command
                     unset cmd_help
                     unset usage
                     unset call
                     return 0
                     ;;
                 --)
                     # end of gui arguments
                     command="${command} $*"
                     break
                     ;;
                 ,*)
                     command="${1}"
                     shift 1
                     ;;
             esac
         done

         call="$(echo "${command}" | cut -d " " -f 1)"
         if [ -n "${call}" ]; then
             if command -v "${call}" > /dev/null 2>&1; then
                 unset cmd_help
                 unset usage
                 unset call
                 nohup ${command} >/dev/null 0<&- 2>&1 & exit 0
             else
                 echo "${call} not found..."
                 unset command
                 unset cmd_help
                 unset usage
                 unset call
                 return 127
             fi
         else
             printf "%s""${usage}"
             unset command
             unset cmd_help
             unset usage
             unset call
             return 1
         fi

     }

   #+END_SRC

** Un-Compress by context
   #+BEGIN_SRC bash :tangle shrc
     deconvolute() {
         if [ ! -f "$1" ]; then
             echo "$1: no such file";
         else
             case "$1" in
                 ,*.tar.bz2) tar -xjf "$1" ;;
                 ,*.tbz2) tar -xjf "$1" ;;
                 ,*.tar.gz) tar -x --use-compress-program=pigz -f "$1" ;;
                 ,*.tgz) tar -x --use-compress-program=pigz -f "$1" ;;
                 ,*.gz) pigz "$1" ;;
                 ,*.rar) unrar -x "$1" ;;
                 ,*.tar) tar -xf "$1" ;;
                 ,*.zip) unzip "$1" ;;
                 ,*.tar.xz) tar -xf "$1" ;;
                 ,*) echo "Cannot extract $1, provide explicit command";;
             esac
         fi
     }
   #+END_SRC

** Navigate
   #+BEGIN_SRC bash :tangle shrc
     # Inspired by lukesmith.xyz
     lfcd () {
         if ! command -v 'lf' > /dev/null 2>/dev/null; then
             return
         fi
         tmp="$(mktemp)"
         lf -last-dir-path="$tmp" "$@"
         if [ -f "$tmp" ]; then
             dir="$(cat "$tmp")"
             rm -f "$tmp" >/dev/null
             [ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "$dir"
         fi
     }
     fzfcd () {
         cd "$(dirname "$(fzf)")"
     }
   #+END_SRC
* Aliases
** Disk Usage
   #+BEGIN_SRC bash :tangle shrc
     alias du='du -hc';
     alias df='df -h';
     alias duall="du -hc |\grep '^[3-9]\{3\}M\|^[0-9]\{0,3\}\.\{0,1\}[0-9]\{0,1\}G'";
   #+END_SRC

** Network
   #+BEGIN_SRC bash :tangle shrc
     alias nload='nload -u M -U G -t 10000 -a 3600 $(ip a | grep -m 1 " UP " | cut -d " " -f 2 | cut -d ":" -f 1)'
     alias nethogs='\su - -c "nethogs $(ip a |grep  "state UP" | cut -d " " -f 2 | cut -d ":" -f 1) -d 10"';
     alias ping="ping -c 4 ";
   #+END_SRC

** Monitor Job queues
   #+BEGIN_SRC bash :tangle shrc
     alias watch="watch -n 10 --color";
     alias psauxgrep="ps aux |head -1 && ps aux | grep -v 'grep' | grep -v 'rg'| grep -i";
   #+END_SRC

** Lazy single-handed exit
   #+BEGIN_SRC bash :tangle shrc
     alias qqqq="exit";
   #+END_SRC

* Better alternatives
** cat
   #+BEGIN_SRC bash :tangle shrc
     if command -v 'bat' >/dev/null 2>/dev/null; then
         alias cat="bat --color=auto";
     fi
   #+END_SRC

** g/re/p
   #+BEGIN_SRC bash :tangle shrc
     for sc in "ack" "pt" "ag" "rg"; do
         if command -v "${sc%% *}" &>/dev/null; then
             # shellcheck disable=SC2139
             alias grep="${sc} --color=auto";
         fi
     done
   #+END_SRC

** List Contents
   #+BEGIN_SRC bash :tangle shrc
     if command -v "exa" >>/dev/null; then
         alias ls="exa -Fh --color=auto";
         alias la='exa -a --color=auto';
         alias ll='exa -lr -s size';
         alias lla='exa -a';
         alias l.='exa -a --color=auto |grep "^\."';
         alias sl="ls";
     fi
   #+END_SRC

** neo visual editor improved
   #+BEGIN_SRC bash :tangle shrc
     if command -v nvim >>/dev/null; then
         alias ex="nvim"; ## always open vim in normal mode
         alias vim="nvim"; ## always use neo
     fi
   #+END_SRC

** Container
   #+BEGIN_SRC bash :tangle shrc
     if command -v podman >>/dev/null; then
         alias docker="podman";  # Podman is drop-in replacement for docker
         alias docker-compose="podman-compose";  # Podman is drop-in replacement for docker
     fi
   #+END_SRC

* Networking
** State
   Display state of network connection at the beginning
   #+BEGIN_SRC bash :tangle shrc
     # shellcheck source=./netcheck.sh
     IFS=$'\t' read -r IP_ADDR AP_ADDR netstate <<< "$("${RUNCOMDIR}"/netcheck.sh)"
     # IFS=$'\t' read -r -a netcodes <<< "$("${RUNCOMDIR}"/netcheck.sh)"
     export IP_ADDR
     export AP_ADDR
     if [ "${netstate}" -gt 7 ]; then
         printf "\e[1;34mInternet (GOOGLE) Connected\e[m\n"
         printf "\033[0;32m$IP_ADDR \e[m is current wireless ip address\n"
     else
         printf "\e[1;31mInternet (GOOGLE) Not reachable\e[m\n"
         if [ $(( netstate % 8 )) -gt 3 ]; then  # Intranet is connected
             printf "\033[0;31mInternet Down\e[m\n"
             case $(( netstate % 4 )) in
                 2) printf "Home network connected,\n"
                    ;;
                 1) printf "CCMB network connected,\n"
                    # shellcheck source=./proxy_send.py
                    if [ -f "${RUNCOMDIR}/proxy_send.py" ]; then
                        # shellcheck source=./proxy_send.py
                        "${RUNCOMDIR}/proxy_send.py" \
                            && printf "\e[0;33mPROXY AUTH SENT\e[m\n";
                    fi
                    ;;
                 ,*) printf "HOTSPOT connected\n"
                    ;;
             esac
         else
             printf "\e[1;33mNetwork connection Disconnected\e[m\n"
         fi
     fi
   #+END_SRC

** SSH Agent
   Reuse ssh agent for all logins
   #+BEGIN_SRC sh :tangle ui
     if [ ! -S ~/.ssh/ssh_auth_sock ]; then
         eval "$(ssh-agent)"
         ln -sf "$SSH_AUTH_SOCK" ~/.ssh/ssh_auth_sock
     fi
     SSH_AUTH_SOCK=~/.ssh/ssh_auth_sock
     export SSH_AUTH_SOCK
     ssh-add -l > /dev/null || ssh-add
   #+END_SRC

* Window Manager settings
** Terminal
   #+BEGIN_SRC sh :tangle ui
     for term in foot termite tilix xterm gnome-terminal; do
         if [ -n "$(command -v $term)" ]; then
             defterm="$term";
             export defterm
             break;
         fi;
     done
   #+END_SRC

** Sway exports
   Don't really remember why these were made
   Not using currently. Preserved for future
   tangle to bash_login
   export WLR_BACKENDS="headless";
   export WLR_LIBINPUT_NO_DEVICES=1;

** User Interface (GUI/CLI)
   If running from tty1 setup sway environment and start ui
   #+BEGIN_SRC sh :tangle ui
     if [ "$(tty)" = "/dev/tty1" ]; then
         # export DISPLAY=":0"
         # export WAYLAND_DISPLAY=wayland-0
         # export GDK_BACKEND=wayland,x11
         if [ -z "$XDG_RUNTIME_DIR" ]; then
             XDG_RUNTIME_DIR="/run/user/${UID}"
         fi
         XDG_SESSION_TYPE=wayland
         SDL_VIDEODRIVER=wayland
         ECORE_EVAS_ENGINE=wayland_egl
         ELM_DISPLAY=wl
         ELM_ENGINE=wayland_egl
         ELM_ACCEL=opengl
         QT_QPA_PLATFORM=wayland-egl
         QT_WAYLAND_FORCE_DPI=100
         QT_PLUGIN_PATH=/usr/lib/kde4/plugins/
         QT_AUTO_SCREEN_SCALE_FACTOR=0
         QT_QPA_PLATFORMTHEME=gtk3
         QT_WAYLAND_DISABLE_WINDOWDECORATION=1
         MOZ_ENABLE_WAYLAND=1
         _JAVA_AWT_WM_NONREPARENTING=1
         SWAYROOT="${HOME}/.wm/sway"
         export XDG_SESSION_TYPE
         export SDL_VIDEODRIVER
         export ECORE_EVAS_ENGINE
         export ELM_DISPLAY
         export ELM_ENGINE
         export ELM_ACCEL
         export QT_QPA_PLATFORM
         export QT_WAYLAND_FORCE_DPI
         export QT_PLUGIN_PATH
         export QT_AUTO_SCREEN_SCALE_FACTOR
         export QT_QPA_PLATFORMTHEME
         export QT_WAYLAND_DISABLE_WINDOWDECORATION
         export DBUS_SESSION_BUS_ADDRESS
         export DBUS_SESSION_BUS_PID
         export MOZ_ENABLE_WAYLAND
         export _JAVA_AWT_WM_NONREPARENTING
         export SWAYROOT
         exec sway
     fi
     if [ "$TERM" = "linux" ]; then
         printf "\e]P0000000" #black
         printf "\e]P83f3f3f" #darkgrey
         printf "\e]P19f3f3f" #darkred
         printf "\e]P9ff9f9f" #red
         printf "\e]P23f9f3f" #darkgreen
         printf "\e]PAbfefbf" #green
         printf "\e]P3bf9f3f" #brown
         printf "\e]PB9fff9f" #yellow
         printf "\e]P45f5f9f" #darkblue
         printf "\e]PC9f9fff" #blue
         printf "\e]P59f3f9f" #darkmagenta
         printf "\e]PDff9fff" #magenta
         printf "\e]P63f9f9f" #darkcyan
         printf "\e]PE9fffff" #cyan
         printf "\e]P7afafaf" #lightgrey
         printf "\e]PFffffff" #white
         clear #for background artifacting
     fi
   #+END_SRC

* Calls
** bash
   #+BEGIN_SRC bash :tangle bash_login
     # netcheck source=.local/share/pspman/src/runcom/ui
     if [ -f "${RUNCOMDIR}"/ui ]; then
         . "${RUNCOMDIR}"/ui
     fi
   #+END_SRC

** zsh
   #+BEGIN_SRC bash :tangle zlogin
     # netcheck source=.local/share/pspman/src/runcom/ui
     if [ -f "${RUNCOMDIR}"/ui ]; then
         . "${RUNCOMDIR}"/ui
     fi
   #+END_SRC
