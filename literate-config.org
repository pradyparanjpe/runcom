# -*- mode:org; coding: utf-8; -*-
#+TITLE: Prady_runcom
#+AUTHOR: Pradyumna Paranjape
#+EMAIL: pradyparanjpe@rediffmail.com
#+LANGUAGE: en
#+OPTIONS: toc:2 num:nil html-postamble:nil ^:nil mathjax:t TeX:t ::t tags:nil *:t skip:t ^:nil
#+STARTUP: overview
#+PROPERTY: header-args :tangle
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+HTML_HEAD: <style> @media only screen and (max-width: 960px) {#content{background-color: #e7f0f7; color: 101018; max-width: 100%; overflow-x: scroll;}} </style>
#+HTML_HEAD: <style> body{background-color: #e7f0f7; color: 101018; font-size: 18px;} </style>
#+HTML_HEAD: <style> #content{background-color: #e7f0f7; color: 101018;} </style>
#+HTML_HEAD: <style> #left-panel-button{display: none;}</style>
#+HTML_HEAD: <style> #minitoc{display: none;}</style>
#+HTML_HEAD: <style> #tabs{background-color: #e5e7ea; font-size: 18px;} </style>
#+HTML_HEAD: <style> #tabs li a{background-color: #e5e7ea; font-size: 18px;} </style>
#+HTML_HEAD: <style> .buttons{background-color: #f2f3f4;} </style>
#+HTML_HEAD: <style> #table-of-contents header{background-color: #e7f0f7; color: 101018;}</style>
#+HTML_HEAD: <style> table, th, td {border: none; border-left: none; border-right: none;} </style>
#+HTML_HEAD: <style> b{background-color: #e7f0f7; color: #000000;} </style>
#+HTML_HEAD: <style> i{background-color: #e7f0f7; color: 101018;} </style>
#+HTML_HEAD: <style> a, a:link, a:visited, a:hover{color: #0087bf; text-decoration: none}</style>
#+HTML_HEAD: <style> h1{color: #e00030; background: #f6fafe; font-size: 2em;} </style>
#+HTML_HEAD: <style> h2{color: #0040c0; font-size: 1.75em; border-bottom: 1px solid #585c60;} </style>
#+HTML_HEAD: <style> h3{color: #00c060; font-size: 1.5em; border-bottom: 1px dotted #585c60;} </style>
#+HTML_HEAD: <style> h4{color: #7f8f00; font-size: 1.25em; border-bottom: none;} </style>
#+HTML_HEAD: <style> code{color: #4f0000; background: #ffffff; font-weight: bold} </style>
#+HTML_HEAD: <style> table thead th{background-color: #ffffff;}</style>
#+HTML_HEAD: <style> table tr:nth-child(2n-1) td{background-color: #e7e7ef;}</style>
#+HTML_HEAD: <style> table tr:nth-child(2n) td{background-color: #f7f7ff;}</style>
#+LATEX_CMD: xelatex
#+LATEX_COMPILER: xelatex
#+LATEX_HEADER: \usepackage[a4paper, margin=1in]{geometry}
#+LATEX_HEADER: \usepackage[perpage]{footmisc}
#+LATEX_HEADER: \usepackage{fontspec}
#+LATEX_HEADER: \usepackage{polyglossia}
#+LATEX_HEADER: \newfontfamily \devanagarifont[Script=Devanagari]{Lohit Devanagari}
#+LATEX_HEADER: \setmainlanguage{sanskrit}
#+LATEX_HEADER: \setotherlanguages{english}
#+LATEX: \today



* Copyright/License Header
  Copyright 2020, 2021 Pradyumna Paranjape

  This file is part of Prady_runcom.

  Prady_runcom is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Prady_runcom is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with Prady_runcom.  If not, see <https://www.gnu.org/licenses/>.

* What is this?
  Following configuration files are available. This literate configuration tangles their contents.
  |-----------------------------------+-------|
  | Configuration File Path           | POSIX |
  |                                   |       |
  |-----------------------------------+-------|
  | /etc/profile       (system)       | yes   |
  | /etc/bashrc        (system)       | yes   |
  | /etc/zshrc         (system)       | yes   |
  | /etc/profile.d/*   (system)       | yes   |
  | ${HOME}/.bashrc                   | no    |
  | ${HOME}/.zshrc                    | no    |
  | ${HOME}/.bash_profile             | yes   |
  | ${HOME}/.bash_login               | yes   |
  | ${HOME}/.profile                  | yes   |
  | ${HOME}/.zprofile                 | yes   |
  | ${HOME}/.zlogin                   | yes   |
  | ${HOME}/.bash_completion.d/*      | no    |
  | ${RUNCOMDIR}/bashrc               | no    |
  | ${RUNCOMDIR}/local.d/*            | no    |
  | ${RUNCOMDIR}/zshrc                | no    |
  | ${RUNCOMDIR}/shrc                 | yes   |
  | ${RUNCOMDIR}/profile              | yes   |
  | ${RUNCOMDIR}/bash_login           | yes   |
  | ${RUNCOMDIR}/zlogin               | yes   |
  | ${RUNCOMDIR}/ui                   | yes   |
  | ${RUNCOMDIR}/complete.bash        | yes   |
  | ${XDG_CONFIG_HOME}/varrc          | yes   |
  | ${XDG_CONFIG_HOME}/pspman/profile | yes   |
  |-----------------------------------+-------|
  They are loaded in following order.

** Bash
*** /etc/profile
**** /etc/bashrc
***** /etc/profile.d/*


*** ${HOME}/.bash_profile

**** ${HOME}/.profile
***** ${XDG_CONFIG_HOME}/varrc
***** ${RUNCOMDIR}/profile
***** ${XDG_CONFIG_HOME}/pspman/profile

**** ${HOME}/.bashrc
***** ${RUNCOMDIR}/bashrc
****** ${RUNCOMDIR}/shrc
******* ${RUNCOMDIR}/local.d/*

**** ${HOME}/.bash_login
***** ${RUNCOMDIR}/bash_login
****** ${RUNCOMDIR}/ui

** Zsh
*** /etc/profile
**** /etc/zshrc
***** /etc/profile.d/*

*** ${HOME}/.zshenv

*** ${HOME}/.zprofile
**** ${HOME}/.profile
***** ${XDG_CONFIG_HOME}/varrc
***** ${RUNCOMDIR}/profile
***** ${XDG_CONFIG_HOME}/pspman/profile

*** ${HOME}/.zshrc
**** ${RUNCOMDIR}/zshrc
***** ${RUNCOMDIR}/shrc
****** ${RUNCOMDIR}/local.d/*

*** ${HOME}/.zlogin
**** ${RUNCOMDIR}/zlogin
***** ${RUNCOMDIR}/ui

* Headers
  #+BEGIN_SRC sh :tangle shrc
    # shellcheck shell=sh
    # -*- coding:utf-8; mode:shell-script; -*-
    #
    # Copyright 2020, 2021 Pradyumna Paranjape
    #
    # This file is part of Prady_runcom.
    #
    # Prady_runcom is free software: you can redistribute it and/or modify
    # it under the terms of the GNU General Public License as published by
    # the Free Software Foundation, either version 3 of the License, or
    # (at your option) any later version.
    #
    # Prady_runcom is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    # GNU General Public License for more details.
    #
    # You should have received a copy of the GNU General Public License
    # along with Prady_runcom.  If not, see <https://www.gnu.org/licenses/>.
    #
    #===================================================================
    #  ___             _      ___                     _
    # | _ \_ _ __ _ __| |_  _| _ \__ _ _ _ __ _ _ _  (_)_ __  ___
    # |  _/ '_/ _` / _` | || |  _/ _` | '_/ _` | ' \ | | '_ \/ -_)
    # |_| |_| \__,_\__,_|\_, |_| \__,_|_| \__,_|_||_|/ | .__/\___|
    #                    |__/                      |__/|_|
    #===================================================================

  #+END_SRC
  #+BEGIN_SRC bash :tangle bashrc
    # shellcheck shell=bash
    # -*- coding:utf-8; mode:shell-script; -*-
    #
    # Copyright 2020, 2021 Pradyumna Paranjape
    #
    # This file is part of Prady_runcom.
    #
    # Prady_runcom is free software: you can redistribute it and/or modify
    # it under the terms of the GNU General Public License as published by
    # the Free Software Foundation, either version 3 of the License, or
    # (at your option) any later version.
    #
    # Prady_runcom is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    # GNU General Public License for more details.
    #
    # You should have received a copy of the GNU General Public License
    # along with Prady_runcom.  If not, see <https://www.gnu.org/licenses/>.
    #
    #===================================================================
    #  ___             _      ___                     _
    # | _ \_ _ __ _ __| |_  _| _ \__ _ _ _ __ _ _ _  (_)_ __  ___
    # |  _/ '_/ _` / _` | || |  _/ _` | '_/ _` | ' \ | | '_ \/ -_)
    # |_| |_| \__,_\__,_|\_, |_| \__,_|_| \__,_|_||_|/ | .__/\___|
    #                    |__/                      |__/|_|
    #===================================================================

  #+END_SRC
  #+BEGIN_SRC bash :tangle zshrc
    # shellcheck shell=bash
    # -*- coding:utf-8; mode:shell-script; -*-
    #
    # Copyright 2020, 2021 Pradyumna Paranjape
    #
    # This file is part of Prady_runcom.
    #
    # Prady_runcom is free software: you can redistribute it and/or modify
    # it under the terms of the GNU General Public License as published by
    # the Free Software Foundation, either version 3 of the License, or
    # (at your option) any later version.
    #
    # Prady_runcom is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    # GNU General Public License for more details.
    #
    # You should have received a copy of the GNU General Public License
    # along with Prady_runcom.  If not, see <https://www.gnu.org/licenses/>.
    #
    #===================================================================
    #  ___             _      ___                     _
    # | _ \_ _ __ _ __| |_  _| _ \__ _ _ _ __ _ _ _  (_)_ __  ___
    # |  _/ '_/ _` / _` | || |  _/ _` | '_/ _` | ' \ | | '_ \/ -_)
    # |_| |_| \__,_\__,_|\_, |_| \__,_|_| \__,_|_||_|/ | .__/\___|
    #                    |__/                      |__/|_|
    #===================================================================

  #+END_SRC
  #+BEGIN_SRC bash :tangle bash_login
    # shellcheck shell=bash
    # -*- coding:utf-8; mode:shell-script; -*-
    #
    # Copyright 2020, 2021 Pradyumna Paranjape
    #
    # This file is part of Prady_runcom.
    #
    # Prady_runcom is free software: you can redistribute it and/or modify
    # it under the terms of the GNU General Public License as published by
    # the Free Software Foundation, either version 3 of the License, or
    # (at your option) any later version.
    #
    # Prady_runcom is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    # GNU General Public License for more details.
    #
    # You should have received a copy of the GNU General Public License
    # along with Prady_runcom.  If not, see <https://www.gnu.org/licenses/>.
    #
    #===================================================================
    #  ___             _      ___                     _
    # | _ \_ _ __ _ __| |_  _| _ \__ _ _ _ __ _ _ _  (_)_ __  ___
    # |  _/ '_/ _` / _` | || |  _/ _` | '_/ _` | ' \ | | '_ \/ -_)
    # |_| |_| \__,_\__,_|\_, |_| \__,_|_| \__,_|_||_|/ | .__/\___|
    #                    |__/                      |__/|_|
    #===================================================================

  #+END_SRC
  #+BEGIN_SRC bash :tangle zlogin
    # shellcheck shell=bash
    # -*- coding:utf-8; mode:shell-script; -*-
    #
    # Copyright 2020, 2021 Pradyumna Paranjape
    #
    # This file is part of Prady_runcom.
    #
    # Prady_runcom is free software: you can redistribute it and/or modify
    # it under the terms of the GNU General Public License as published by
    # the Free Software Foundation, either version 3 of the License, or
    # (at your option) any later version.
    #
    # Prady_runcom is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    # GNU General Public License for more details.
    #
    # You should have received a copy of the GNU General Public License
    # along with Prady_runcom.  If not, see <https://www.gnu.org/licenses/>.
    #
    #===================================================================
    #  ___             _      ___                     _
    # | _ \_ _ __ _ __| |_  _| _ \__ _ _ _ __ _ _ _  (_)_ __  ___
    # |  _/ '_/ _` / _` | || |  _/ _` | '_/ _` | ' \ | | '_ \/ -_)
    # |_| |_| \__,_\__,_|\_, |_| \__,_|_| \__,_|_||_|/ | .__/\___|
    #                    |__/                      |__/|_|
    #===================================================================

  #+END_SRC
  #+BEGIN_SRC sh :tangle profile
    # shellcheck shell=bash
    # -*- coding:utf-8; mode:shell-script; -*-
    #
    # Copyright 2020, 2021 Pradyumna Paranjape
    #
    # This file is part of Prady_runcom.
    #
    # Prady_runcom is free software: you can redistribute it and/or modify
    # it under the terms of the GNU General Public License as published by
    # the Free Software Foundation, either version 3 of the License, or
    # (at your option) any later version.
    #
    # Prady_runcom is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    # GNU General Public License for more details.
    #
    # You should have received a copy of the GNU General Public License
    # along with Prady_runcom.  If not, see <https://www.gnu.org/licenses/>.
    #
    #===================================================================
    #  ___             _      ___                     _
    # | _ \_ _ __ _ __| |_  _| _ \__ _ _ _ __ _ _ _  (_)_ __  ___
    # |  _/ '_/ _` / _` | || |  _/ _` | '_/ _` | ' \ | | '_ \/ -_)
    # |_| |_| \__,_\__,_|\_, |_| \__,_|_| \__,_|_||_|/ | .__/\___|
    #                    |__/                      |__/|_|
    #===================================================================

  #+END_SRC
  #+BEGIN_SRC sh :tangle ui
    # shellcheck shell=bash
    # -*- coding:utf-8; mode:shell-script; -*-
    #
    # Copyright 2020, 2021 Pradyumna Paranjape
    #
    # This file is part of Prady_runcom.
    #
    # Prady_runcom is free software: you can redistribute it and/or modify
    # it under the terms of the GNU General Public License as published by
    # the Free Software Foundation, either version 3 of the License, or
    # (at your option) any later version.
    #
    # Prady_runcom is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    # GNU General Public License for more details.
    #
    # You should have received a copy of the GNU General Public License
    # along with Prady_runcom.  If not, see <https://www.gnu.org/licenses/>.
    #
    #===================================================================
    #  ___             _      ___                     _
    # | _ \_ _ __ _ __| |_  _| _ \__ _ _ _ __ _ _ _  (_)_ __  ___
    # |  _/ '_/ _` / _` | || |  _/ _` | '_/ _` | ' \ | | '_ \/ -_)
    # |_| |_| \__,_\__,_|\_, |_| \__,_|_| \__,_|_||_|/ | .__/\___|
    #                    |__/                      |__/|_|
    #===================================================================

  #+END_SRC

* Init
** bash
   Settings
   #+BEGIN_SRC bash :tangle bashrc
     shopt -s autocd
     set -o vi
     bind '"jk":vi-movement-mode'
   #+END_SRC

** zsh
   Settings
   Unset options:
   - setopt SHARE_HISTORY             # Share history between all sessions.
   - setopt HIST_BEEP                 # Beep when accessing nonexistent history.
   - HISTCONTROL=ignoreboth           # ignore commands staring with " " and duplicate
     #+BEGIN_SRC bash :tangle zshrc
       HISTFILE="${XDG_CACHE_HOME:-${HOME}/.cache}/.zhistory"
       HISTSIZE=10000
       SAVEHIST=10000
       ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#5f6f7f,bg=#172737"
       ZSH_AUTOSUGGEST_STRATEGY=("history" "completion")
       setopt autocd
       setopt interactive_comments
       setopt appendhistory extendedglob notify
       setopt BANG_HIST                 # Treat the '!' character specially during expansion.
       setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
       setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
       setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
       setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
       setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
       setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
       setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
       setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
       setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
       setopt HIST_VERIFY               # Don't execute immediately upon history expansion.
       unsetopt beep
       autoload colors && colors
       autoload add-zsh-hook
       term_key_source="${HOME}/.zkbd/$TERM-${${DISPLAY:t}:-$VENDOR-$OSTYPE}"
       if [ -f "${term_key_source}" ]; then
           source "${term_key_source}"
       fi
       # vim keybindings
       bindkey -v
       bindkey -s '^o' 'lfcd\n'
       bindkey -s '^f' 'fzfcd\n'
       bindkey '^[[P' delete-char  # backspace key
       bindkey '^[[1;5D' vi-backward-word  # ctrl <-
       bindkey '^[[1;5C' vi-forward-word  # ctrl ->
       bindkey '^[[3~' vi-delete-char  # delete key
       bindkey '^[[F' vi-end-of-line  # end key
       bindkey '^[[H' vi-beginning-of-line  # home key
       bindkey "^[[27;2;13~" vi-open-line-below  # shift Return
       export KEYTIMEOUT=10

       # Use beam shape cursor for each new prompt.
       _fix_cursor () {
           echo -ne '\e[6 q'
       }
       add-zsh-hook precmd _fix_cursor

       # Change cursor shape for different vi modes.
       zle-keymap-select () {
           if [ "${KEYMAP}" = "vicmd" ] ||
                  [ "${1}" = 'block' ]; then
               printf '\e[2 q'

           elif [ "${KEYMAP}" = "main" ] ||
                    [ "${KEYMAP}" = "viins" ] ||
                    [ "${KEYMAP}" = '' ] ||
                    [ "${1}" = 'beam' ]; then
               printf '\e[6 q'
           elif [ "${KEYMAP}" = "visual" ]; then
               printf '\e[4 q'
           fi
       }
       # Use vim keys in tab complete menu:
       zmodload zsh/complist
       zmodload zsh/mapfile
       bindkey -M menuselect 'h' vi-backward-char
       bindkey -M menuselect 'k' vi-up-line-or-history
       bindkey -M menuselect 'l' vi-forward-char
       bindkey -M menuselect 'j' vi-down-line-or-history
       bindkey -v '^?' backward-delete-char
       bindkey -M viins 'jk' vi-cmd-mode
       bindkey '^r' history-incremental-search-backward

       zle -N zle-keymap-select

     #+END_SRC

* Inherit
** bash
   #+BEGIN_SRC bash :tangle bashrc
     # shellcheck source=".runcom/shrc"
     if [ -f "${RUNCOMDIR}"/shrc ]; then
         . "${RUNCOMDIR}"/shrc
     fi
   #+END_SRC

** zsh
   #+BEGIN_SRC bash :tangle zshrc
     # shellcheck source=".runcom/shrc"
     if [ -f "${RUNCOMDIR}"/shrc ]; then
         . "${RUNCOMDIR}"/shrc
     fi
     while read -r addition; do
         while read -r share_dir; do
             add_dir="${share_dir}/zsh-${addition}"
             if [ -d "${add_dir}" ]; then
                 # shellcheck disable=SC1090
                 . "${add_dir}/zsh-${addition}.zsh"
                 break
             fi
         done << data_dir
     /usr/local/share
     /usr/share
     ${XDG_DATA_HOME:-${HOME}/.local/share}
     ${XDG_DATA_HOME:-${HOME}/.local/share}/pspman/local/share
     ${HOME}/local/share
     ${HOME}/share
     data_dir
     done << addlist
     syntax-highlighting
     autosuggestions
     addlist

     unset addition
     unset share_dir
     unset add_dir


   #+END_SRC

** shrc
*** Local unsynced changes
    All files in ${RUNCOMDIR}/local.d will be sourced
    #+BEGIN_SRC sh :tangle shrc
      # shellcheck disable=SC1090
      if [ -d "${RUNCOMDIR}"/local.d ]; then
          for local_src in "${RUNCOMDIR}"/local.d/*; do
              . "${local_src}"
          done
      fi
      unset local_src
    #+END_SRC

*** Python
    [[https://github.com/kislyuk/argcomplete][Argcomplete]] to complete python commands
    #+BEGIN_SRC sh :tangle shrc
      # shellcheck source=.local/share/pspman/src/runcom/complete.bash
      if [ -f "${RUNCOMDIR}"/complete.bash ]; then
          # shellcheck source=.local/share/pspman/src/runcom/complete.bash
          . "${RUNCOMDIR}"/complete.bash
      fi
    #+END_SRC

* Better alternatives
** cat
   #+BEGIN_SRC sh :tangle shrc
     if builtin command -v 'bat' >/dev/null 2>&1; then
         alias cat="bat --color=auto";
     fi
   #+END_SRC

** g/re/p
   #+BEGIN_SRC sh :tangle shrc
     for sc in "ack" "pt" "ag" "rg"; do
         if builtin command -v "${sc%% *}" >/dev/null 2>&1; then
             # shellcheck disable=SC2139
             alias grep="${sc} --color=auto";
         fi
     done
   #+END_SRC

** List Contents
   #+BEGIN_SRC sh :tangle shrc
     if builtin command -v "exa" >/dev/null 2>&1; then
         alias ls="exa -Fh --color=auto";
         alias la='exa -a --color=auto';
         alias ll='exa -lr -s size';
         alias lla='exa -a';
         alias l.='exa -a --color=auto |grep "^\."';
         alias sl="ls";
     fi
   #+END_SRC

** neo visual editor improved
   #+BEGIN_SRC sh :tangle shrc
     if builtin command -v nvim >/dev/null 2>&1; then
         alias ex="nvim"; # always open vim in normal mode
         alias vim="nvim"; # always use neo
     fi
   #+END_SRC

** Container
   #+BEGIN_SRC sh :tangle shrc
     if builtin command -v podman >/dev/null 2>&1; then
         alias docker="podman";  # Podman is drop-in replacement for docker
         alias docker-compose="podman-compose";  # Podman is drop-in replacement for docker
     fi
   #+END_SRC

* Variables
** PATH
   #+BEGIN_SRC sh :tangle profile
     RUNCOMDIR="${HOME}/.runcom"
     export RUNCOMDIR
     # shellcheck source="bin"
     if [ -d "${HOME}/bin" ] ; then
         if [ "${PATH#*${HOME}/bin}" = "${PATH}" ]; then
             PATH="${HOME}/bin:${PATH}"
         fi
     fi
     # shellcheck source=".local/bin"
     if [ -d "${HOME}/.local/bin" ] ; then
         if [ "${PATH#*${HOME}/.local/bin}" = "${PATH}" ]; then
             PATH="${HOME}/.local/bin:${PATH}"
         fi
     fi
     export PATH;
   #+END_SRC

** Editor wars
   #+BEGIN_SRC sh :tangle profile
     while read -r avail; do
         if builtin command -v "${avail}" >/dev/null 2>&1; then
             EDITOR="${avail}"
         fi
     done << EOF
     nano
     vi
     vim
     nvim
     EOF
     export EDITOR

     case "$EDITOR" in
         vim)
             export MANPAGER='/bin/bash -c "vim -MRn -c \"set buftype=nofile showtabline=0 ft=man ts=8 nomod nolist norelativenumber nonu noma\" -c \"normal L\" -c \"nmap q :qa<CR>\"</dev/tty <(col -b)"'
             ;;
         nvim)
             export MANPAGER="nvim -c 'set ft=man' -"
             ;;
         ,*)
             export MANPAGER='bat -l man -p'
             ;;
     esac
     export MANPAGER
   #+END_SRC

** C(++) exports
   #+BEGIN_SRC sh :tangle profile
     LD_LIBRARY_PATH="${HOME}/.local/lib:${HOME}/.local/lib64";
     C_INCLUDE_PATH="${HOME}/.local/share/pspman/include/"
     CPLUS_INCLUDE_PATH="${HOME}/.local/share/pspman/include/"
     export LD_LIBRARY_PATH
     export C_INCLUDE_PATH
     export CPLUS_INCLUDE_PATH
   #+END_SRC

** GPU exports
   #+BEGIN_SRC sh :tangle profile
     PYOPENCL_CTX='0';
     PYOPENCL_COMPILER_OUTPUT=1;
     OCL_ICD_VENDORS="/etc/OpenCL/vendors/";
     export PYOPENCL_CTX
     export PYOPENCL_COMPILER_OUTPUT
     export OCL_ICD_VENDORS
   #+END_SRC

** Bemenu exports
   #+BEGIN_SRC sh :tangle shrc
     export BEMENU_OPTS='--fn firacode 14 '
   #+END_SRC

** GTK+ debugging output
   Silence debugging output for gtk+
   #+BEGIN_SRC sh :tangle profile
     NO_AT_BRIDGE=1
     export NO_AT_BRIDGE
   #+END_SRC

* Functions
** Python
*** Python version
    to locate site-packages

    #+BEGIN_SRC sh :tangle shrc
      python_ver() {
          python --version |cut -d "." -f1,2 |sed 's/ //' |sed 's/P/p/'
      }
    #+END_SRC

*** Quickly change to virtualenv
    Scan upto mountpoint, if any direct parent has .venv, source that ".venv/bin/activate"
    This may require shell-identification for ksh, csh, fish since they have a different activate
    #+BEGIN_SRC sh :tangle shrc
      to_venv () {
          test_d="$(realpath "${PWD}")"
          parents=16  # path too long to waste time
          until mountpoint "${test_d}" > /dev/null 2> /dev/null; do
              if [ $parents -le 0 ]; then
                  printf "Too many branch-nodes searched" >&2
                  unset parents
                  unset test_d
                  unset env_d
                  return 126
              fi
              for env_d in ".venv" "venv"; do
                  if [ -d "${test_d}/${env_d}" ] \
                         || [ -L "${test_d}/${env_d}" ]; then
                      # shellcheck disable=SC1090
                      . "${test_d}/${env_d}/bin/activate"
                      printf "Found %s, switching...\n" "${test_d}/${env_d}"
                      unset parents
                      unset test_d
                      unset env_d
                      return 0
                  fi
              done
              test_d="$(dirname "${test_d}")"
              parents=$((parents - 1))
          done
          printf "Couldn't find .venv upto mountpoint %s\n" "${test_d}" >&2
          unset parents
          unset test_d
          unset env_d
          return 126
      }
    #+END_SRC

*** Virtualenv in prompt string
    #+BEGIN_SRC sh :tangle shrc
      _show_venv () {
          # if a virtualenv is active, print it's name
          if [ -n "${VIRTUAL_ENV}" ]; then
              base="$(basename "${VIRTUAL_ENV}")"
              if [ "${base}" = ".venv" ] || [ "${base}" = "venv"  ]; then
                  printf "/%s" "$(basename "$(dirname "${VIRTUAL_ENV}")")"
                  unset base
              else
                  printf "/%s" "${base}"
                  unset base
              fi
          fi
      }
    #+END_SRC
** Git
*** Status
    #+BEGIN_SRC sh :tangle shrc
      git_status() {
          modified=0
          cached=0
          untracked=0

          while read -r line; do
              case "${line}" in
                  _*_\ _)
                      cached=1
                      ;;
                  _\ _*_)
                      modified=1
                      ;;
                  _?_?_)
                      untracked=1
                      ;;
              esac
          done << endstat
      $(git status --short | cut -b -2 | sed -e 's/\(.\)\(.*\)/_\1_\2_/')
      endstat

          stat_str=''
          if [ $modified -ne 0 ]; then
              stat_str="${stat_str}\033[0;31m\ue728"
          fi

          if [ $cached -ne 0 ]; then
              stat_str="${stat_str}\033[0;32m\ue729"
          fi

          if [ $untracked -ne 0 ]; then
              stat_str="${stat_str}\033[0;31m\uf476"
          fi

          if [ -n "$(git stash list)" ]; then
              stat_str="${stat_str}\e[0;36m\uf48e"
          fi
          if [ -n "${stat_str}" ]; then
              # shellcheck disable=SC2059  # I do want escape characters
              printf "${stat_str}\e[m"
          fi
          unset modified
          unset cached
          unset untracked
      }
    #+END_SRC

*** Branch
    #+BEGIN_SRC sh :tangle shrc
      #!/usr/bin/env sh
      # -*- coding: utf-8; mode: shell-script; -*-


      git_branch() {
          branch_str=''
          branch="$(git branch 2>/dev/null | grep '^\*' | sed -e 's/^* //')"
          if [ -n "${branch}" ]; then
              case "${branch}" in
                  feat-*)
                      branch_str="${branch_str}\033[0;32m"
                      ;;
                  bug-*)
                      branch_str="${branch_str}\033[0;31m"
                      ;;
                  act-*)
                      branch_str="${branch_str}\e[0;36m"
                      ;;
                  tmp-*)
                      branch_str="${branch_str}\e[0;36m"
                      ;;
                  ,*HEAD\ detached*)
                      branch_str="${branch_str}\e[0;33m"
                      ;;
                  master)
                      unset branch
                      unset branch_str
                      return
                      ;;
                  ,*)
                      branch_str="${branch_str}\e[0;35m"
                      ;;
              esac
          fi
          printf "${branch_str}%s\ue725\e[m" "${branch}"
          unset branch_str
          unset branch
      }

    #+END_SRC
*** Hash
    #+BEGIN_SRC sh :tangle shrc
      git_hash() {
          git log --pretty=format:'%h' -n 1
      }
    #+END_SRC

*** Prompt string
    Include git's branch, hash, status in PS1 if in git repository
    This function is called in PS1 section below
    #+NAME: Git PS
    #+BEGIN_SRC sh :tangle shrc
      git_ps() {
          if ! git status --ignore-submodules >/dev/null 2>&1; then
              return
          else
              printf " %s%s%s " "$(git_branch)" "$(git_hash)" "$(git_status)"
          fi
      }
    #+END_SRC

** Prompt String
*** Exit_color
    #+BEGIN_SRC sh :tangle shrc
      last_exit_color () {
          err="$1"
          if [ "$err"  = "0" ]; then
              # no error
              printf "\e[0;32m"
          elif [ "$err"  = "1" ]; then
              # general error
              printf "\e[0;33m"
          elif [ "$err"  = "2" ]; then
              # misuse of shell builtins
              printf "\e[0;31m"
          elif [ "$err" -gt "63" ] && [ "$err" -lt "84" ]; then
              # syserror.h
              printf "\e[0;91m"
          elif [ "$err"  = "126" ]; then
              # cannot execute
              printf "\e[0;37m"
          elif [ "$err"  = "127" ]; then
              # command not found
              printf "\e[0;30m"
          elif [ "$err" -gt "127" ] && [ "$err" -lt "191" ]; then
              # Fatal error
              printf "\e[0;41m"
          elif [ "$err"  = "255" ]; then
              # exit status limit
              printf "\e[0;31m"
          else
              printf "\e[0;31m"
          fi
          unset err
      }
    #+END_SRC

*** PROMPT_COMMAND
**** bash
     #+BEGIN_SRC bash :tangle bashrc
       export PROMPT_COMMAND=__prompt_command
       __prompt_command () {
           exit_stat="$?"
           PS1=""
           PS1+="\[\$(last_exit_color ${exit_stat})\]┏━ \[\e[m\]"
           PS1+="\[\e[0;32m\]\u\[\e[m\]"
           PS1+="\[\e[3;35m\]\$(_show_venv)\[\e[m\]"
           PS1+="@"
           PS1+="\[\e[0;34m\]\h\[\e[m\]"
           PS1+="\$(git_ps)"
           PS1+="\[\e[0;37m\]<"
           PS1+="\[\e[0;36m\]\W"
           PS1+="\[\e[0;37m\]>"
           PS1+="\[\e[0;33m\]\t\[\e[m\]"
           PS1+="\n\[\$(last_exit_color ${exit_stat})\]┗━ \[\e[m\]"

           PS2=""
           PS2+="\[\e[0;36m\]cont..."
           PS2+="\[\e[m\]"
           PS2+="» ";

           PS3='Selection: ';
       }
     #+END_SRC

**** zsh
     #+BEGIN_SRC bash :tangle zshrc
       _pspps () {
           exit_stat="$?"
           PS1=$''
           PS1+="%{$(last_exit_color ${exit_stat})%}"
           PS1+=$'┏━ \e[m'
           PS1+=$'%{\e[0;32m%}%n%{\e[m%}'
           PS1+=$'%{\e[3;35m%}'
           PS1+="$(_show_venv)"
           PS1+=$'%{\e[m%}'
           PS1+=$'@'
           PS1+=$'%{\e[0;34m%}%m%{\e[m%}'
           PS1+="$(git_ps)"
           PS1+=$'%{\e[0;37m%}<'
           PS1+=$'%{\e[0;36m%}%1~'
           PS1+=$'%{\e[0;37m%}>'
           PS1+=$'%{\e[0;33m%}%*%{\e[m%}\n'
           PS1+="%{$(last_exit_color ${exit_stat})%}"
           PS1+=$'┗━ %{\e[m%}'

           PS2=$''
           PS2+=$'%{\e[0;36m%}cont...'
           PS2+=$'%{\e[m%}'
           PS2+=$'» ';

           PS3='Selection: ';
       }

       add-zsh-hook precmd _pspps

     #+END_SRC

** Mathematical
*** In-Line Calculator
    #+BEGIN_SRC sh :tangle shrc
      mathcalc() {
          echo "$*"| bc -lq
      }
    #+END_SRC

*** Computational
    #+BEGIN_SRC sh :tangle shrc
      dec2hex() {
          echo "hex:"
          echo "obase=16; $*"| bc
          echo "dec:"
          echo "ibase=16; $*"| bc
      }
    #+END_SRC

** Compilation
*** PDF from Latex
    #+BEGIN_SRC sh :tangle shrc
      pdfcompile() {
          pdflatex "$1"
          for ext in ".toc" ".log" ".aux"; do
              [ -f "${1%.tex}${ext}" ] && rm "${1%.tex}${ext}"
          done
          evince "${1%.tex}.pdf"
      }
    #+END_SRC
*** Pandoc
**** Org to Something
     #+BEGIN_SRC sh :tangle shrc
       org2export() {
           # Usage: org2oth [-f] <infile> <othtype>
           proceed=
           while test $# -gt 1; do
               case "$1" in
                   -f|--force)
                       proceed=true
                       shift 1
                       ;;
                   ,*)
                       infile="${1}"
                       shift 1
                       ;;
               esac
           done
           if [ "${1}" = "pdf" ]; then
               target="latex"
           else
               target="${1}"
           fi
           case "$infile" in
               ,*.org)
                   proceed=true
                   ;;
               ,*)
                   echo "Input file should be an org file"
                   ;;
           esac
           if [ -n "$proceed" ]; then
               pandoc -f org -t "${target}" -o "${infile%.*}.${1}" "$infile"
           fi
           unset proceed
           unset target
           unset infile
       }
     #+END_SRC

**** Org to Docx
     #+BEGIN_SRC sh :tangle shrc
       org2doc () {
           org2export "$@" "docx"
       }
     #+END_SRC

**** Org to PDF
     #+BEGIN_SRC sh :tangle shrc
       org2pdf () {
           org2export "$@" "pdf"
       }
     #+END_SRC

**** Docx to Org
     #+BEGIN_SRC sh :tangle shrc
       doc2org() {
           case "${1}" in
               ,*.docx)
                   pandoc -f docx -t org -o "${1%.docx}.org" "$1"
                   ;;
               ,*)
                   echo "Input file must be a docx file"
                   ;;
           esac
       }
     #+END_SRC

** Mount Home Server
   Home Cloud mounts
   #+BEGIN_SRC sh :tangle shrc
     mount_home_cloud() {
         # shellcheck disable=SC2154
         if [ -z "${home_cloud}" ] || [ -z "${cloud_user}" ]; then
             echo "variables \$home_cloud OR \$cloud_user haven't been defined"
             return
         fi
         # netcheck source=./netcheck.sh
         IFS="$(printf '\t')" read -r IP_ADDR AP_ADDR netstate << netcheck
     $("${RUNCOMDIR}"/netcheck.sh)
     netcheck
         if [ $(( netstate % 4 )) -eq 2 ]; then
             srv_mnt_dir="${HOME}/${home_cloud}"

             set -- "/media/data" "/home/${cloud_user}"
             if [ "$(mount | grep -c "${srv_mnt_dir}")" -lt "$#" ]; then
                 # not mounted
                 while [ $# -gt 0 ]; do
                     mkdir -p "${srv_mnt_dir}${1}"
                     sshfs -o \
                           "reconnect,ServerAliveInterval=15,ServerAliveCountMax=3" \
                           "${cloud_user}@${home_cloud}:${1}" "${srv_mnt_dir}${1}"
                     shift
                 done
             fi
         fi
         unset srv_mnt_dir
     }

   #+END_SRC

** Launch gui
   Launch application and exit terminal window
   Acts like a launcher
   Uninteractive terminal commands may also be called
   #+BEGIN_SRC sh :tangle shrc
     gui () {
         usage="usage: $0 [-h|--help] CMD\n"
         cmd_help="Launch CMD, switch to it, and exit the parent terminal\n\n"
         cmd_help="${cmd_help}Optional arguments:\n"
         cmd_help="${cmd_help}-h|--help\tdisplay this help and exit\n"
         cmd=
         call=

         while [ $# -gt 0 ]; do
             case "$1" in
                 --help|-h)
                     printf "%s""${usage}"
                     printf "%s""${cmd_help}"
                     shift 1
                     unset cmd
                     unset cmd_help
                     unset usage
                     unset call
                     return 0
                     ;;
                 --)
                     # end of gui arguments
                     cmd="${cmd} $*"
                     break
                     ;;
                 ,*)
                     cmd="${1}"
                     shift 1
                     ;;
             esac
         done

         call="$(echo "${cmd}" | cut -d " " -f 1)"
         if [ -n "${call}" ]; then
             if builtin command -v "${call}" >/dev/null 2>&1; then
                 unset cmd_help
                 unset usage
                 unset call
                 nohup "${cmd}" >/dev/null 0<&- 2>&1 & exit 0
             else
                 echo "${call} not found..."
                 unset cmd
                 unset cmd_help
                 unset usage
                 unset call
                 return 127
             fi
         else
             printf "%s""${usage}"
             unset cmd
             unset cmd_help
             unset usage
             unset call
             return 1
         fi

     }

   #+END_SRC

** Un-Compress by context
   #+BEGIN_SRC sh :tangle shrc
     deconvolute() {
         if [ ! -f "${1}" ]; then
             echo "${1}: no such file";
         else
             case "${1}" in
                 ,*.tar.bz2) tar -xjf "${1}" ;;
                 ,*.tbz2) tar -xjf "${1}" ;;
                 ,*.tar.gz) tar -x --use-compress-program=pigz -f "${1}" ;;
                 ,*.tgz) tar -x --use-compress-program=pigz -f "${1}" ;;
                 ,*.gz) unpigz "${1}" ;;
                 ,*.rar) unrar -x "${1}" ;;
                 ,*.tar) tar -xf "${1}" ;;
                 ,*.zip) unzip "${1}" ;;
                 ,*.tar.xz) tar -xf "${1}" ;;
                 ,*) echo "Cannot extract ${1}, provide explicit command";;
             esac
         fi
     }
   #+END_SRC

** Navigate
   - When no virtualenv is active, but one is available, switch to it
   #+BEGIN_SRC sh :tangle shrc
     cd () {
         if [ -z "${1}" ]; then
             builtin cd "${HOME}" || true
         else
             builtin cd "${1}"  || true
         fi
         if [ -z "${VIRTUAL_ENV}" ]; then
             to_venv 2>/dev/null
         fi
     }
   #+END_SRC

   - Inspired by lukesmith.xyz
   #+BEGIN_SRC sh :tangle shrc
     lfcd () {
         if ! command -v 'lf' >/dev/null 2>/dev/null; then
             return
         fi
         tmp_file="$(mktemp)"
         lf -last-dir-path="${tmp_file}" "$@"
         if [ -f "${tmp_file}" ]; then
             target_dir="$(cat "${tmp_file}")"
             rm -f "${tmp_file}" >/dev/null
             if [ -d "${target_dir}" ] && [ "${target_dir}" != "$(pwd)" ]; then
                 cd "${target_dir}" || return
             fi
         fi
         unset tmp_file
         unset target_dir
     }
     fzfcd () {
         cd "$(dirname "$(fzf)")" || true
     }
   #+END_SRC

** zwc
   - Guess whether target is zipped;
     if zipped, unzip and count else classical wc
   #+begin_src sh :tangle shrc
     zwc () {
         args="$*"
         fname="${args##* }"
         args="${args% ${fname}}"
         args="${args%${fname}}"

         if gzip -t "${fname}" > /dev/null 2>&1; then
             if [ -z "${args}" ]; then
                 zcat -f "${fname}" | wc
             else
                 # shellcheck disable=SC2086
                 zcat -f "${fname}" | wc $args
             fi
             return
         else
             wc "$@"
             return
         fi

     }
   #+end_src

** disable autovenv
   - To disable autoswitching virtualenvs, hard-set VIRTUAL_ENV
     - Calling the function again reverts
   #+BEGIN_SRC sh :tangle shrc
     force_global_venv () {
         if [ "${VIRTUAL_ENV}" = "Global_Env" ]; then
             unset VIRTUAL_ENV
             to_venv 2>/dev/null
         else
             deactivate
             VIRTUAL_ENV="Global_Env"
         fi
     }
   #+END_SRC

** lszcat
   #+begin_src sh :tangle shrc
     lszcat () {
         args="$*"
         fname="${args##* }"
         args="${args%% ${fname}}"
         args="${args%%${fname}}"

         if builtin command -v bat >/dev/null 2>&1; then
             betcat="$(which bat)"
         else
             betcat="$(which cat)"
         fi

         if builtin command -v exa >/dev/null 2>&1; then
             betls="$(which exa)"
         else
             betls="$(which ls)"
         fi

         if [ -z "${fname}" ] || [ ! "${fname#-}" = "${fname}" ]; then
             if [ -z "${args}" ]; then
                 args="${fname}"
             else
                 args="${args} ${fname}"
             fi
             fname="$(readlink -f ".")"
             echo "${fname}"
         fi

         if [ -d "${fname}" ]; then
             # shellcheck disable=SC2086
             "${betls}" ${args} "${fname}"
         elif gzip -t "${fname}" >/dev/null 2>&1; then
             # shellcheck disable=SC2086
             zcat -f ${args} "${fname}" | "${betcat}"
         else
             # shellcheck disable=SC2086
             "${betcat}" ${args} "${fname}"
         fi
     }
   #+end_src

** manual pages
   #+BEGIN_SRC sh :tangle shrc
     man_help () {
         if man "$@"; then
             return 0
         elif tldr "$@"; then
             return 0
         elif builtin command -v "$1" >/dev/null 2>/dev/null; then
             printf "trying to display %s --help output\n" "${1}"
             if builtin command -v 'bat' >/dev/null 2>/dev/null; then
                 $1 --help 2>&1 | bat
             else
                 $1 --help 2>&1 | less -RF
             fi
             return 0
         else
             return 16
         fi
     }
   #+END_SRC

* Aliases
** Disk Usage
   #+BEGIN_SRC sh :tangle shrc
     alias du='du -hc';
     alias df='df -h';
     alias duall="du -hc |\grep '^[3-9]\{3\}M\|^[0-9]\{0,3\}\.\{0,1\}[0-9]\{0,1\}G'";
   #+END_SRC

** manual page help
   #+BEGIN_SRC sh :tangle shrc
     alias man="man_help";
   #+END_SRC
** Network
   #+BEGIN_SRC sh :tangle shrc
     alias nload='nload -u M -U G -t 10000 -a 3600 $(ip a | grep -m 1 " UP " | cut -d " " -f 2 | cut -d ":" -f 1)'
     alias nethogs='\su - -c "nethogs $(ip a |grep  "state UP" | cut -d " " -f 2 | cut -d ":" -f 1) -d 10"';
     alias ping="ping -c 4 ";
   #+END_SRC

** Monitor Job queues
   #+BEGIN_SRC sh :tangle shrc
     alias watch="watch -n 10 --color";
   #+END_SRC

** Lazy single-handed exit
   #+BEGIN_SRC sh :tangle shrc
     alias qqqq="exit";
   #+END_SRC

** [z]wc
   #+begin_src sh :tangle shrc
     alias wc="zwc";
   #+end_src


* Networking
** State
   Display state of network connection at the beginning
   #+BEGIN_SRC sh :tangle shrc
     # shellcheck source=./netcheck.sh
     IFS="$(printf '\t')" read -r IP_ADDR AP_ADDR netstate << netcheck
     $("${RUNCOMDIR}"/netcheck.sh)
     netcheck
     export IP_ADDR
     export AP_ADDR
     if [ "${netstate}" -gt 7 ]; then
         printf "\e[1;34mInternet (GOOGLE) Connected\e[m\n"
         printf "\033[0;32m%s \e[m is current wireless ip address\n" "$IP_ADDR"
     else
         printf "\e[1;31mInternet (GOOGLE) Not reachable\e[m\n"
         if [ $(( netstate % 8 )) -gt 3 ]; then  # Intranet is connected
             printf "\033[0;31mInternet Down\e[m\n"
             case $(( netstate % 4 )) in
                 2) printf "Home network connected,\n"
                    ;;
                 1) printf "OFFICE network connected,\n"
                    # shellcheck source=./proxy_send.py
                    if [ -f "${RUNCOMDIR}/proxy_send.py" ]; then
                        # shellcheck source=./proxy_send.py
                        "${RUNCOMDIR}/proxy_send.py" \
                            && printf "\e[0;33mPROXY AUTH SENT\e[m\n";
                    fi
                    ;;
                 ,*) printf "HOTSPOT connected\n"
                    ;;
             esac
         else
             printf "\e[1;33mNetwork connection Disconnected\e[m\n"
         fi
     fi
   #+END_SRC

** SSH Agent
   Reuse ssh agent for all logins
   #+BEGIN_SRC sh :tangle ui
     if [ ! -S ~/.ssh/ssh_auth_sock ]; then
         eval "$(ssh-agent)"
         ln -sf "$SSH_AUTH_SOCK" ~/.ssh/ssh_auth_sock
     fi
     SSH_AUTH_SOCK=~/.ssh/ssh_auth_sock
     export SSH_AUTH_SOCK
     ssh-add -l > /dev/null || ssh-add
   #+END_SRC

* Window Manager settings
** Terminal
   #+BEGIN_SRC sh :tangle ui
     for term in foot termite tilix xterm gnome-terminal; do
         if [ -n "$(builtin command -v $term)" ]; then
             defterm="$term";
             export defterm
             break;
         fi;
     done
   #+END_SRC

** Sway exports
   Don't really remember why these were made
   Not using currently. Preserved for future
   tangle to bash_login
   export WLR_BACKENDS="headless";
   export WLR_LIBINPUT_NO_DEVICES=1;

** User Interface (GUI/CLI)
   If running from tty1 setup sway environment and start ui
   #+BEGIN_SRC sh :tangle ui
     if [ "$(tty)" = "/dev/tty1" ]; then
         if sway --validate; then
             # export DISPLAY=":0"
             # export WAYLAND_DISPLAY=wayland-0
             # export GDK_BACKEND=wayland,x11
             if [ -z "$XDG_RUNTIME_DIR" ]; then
                 XDG_RUNTIME_DIR="/run/user/$(id -u)"
             fi
             XDG_SESSION_TYPE=wayland
             SDL_VIDEODRIVER=wayland
             ECORE_EVAS_ENGINE=wayland_egl
             ELM_DISPLAY=wl
             ELM_ENGINE=wayland_egl
             ELM_ACCEL=opengl
             QT_QPA_PLATFORM=wayland-egl
             QT_WAYLAND_FORCE_DPI=100
             QT_PLUGIN_PATH=/usr/lib/kde4/plugins/
             QT_AUTO_SCREEN_SCALE_FACTOR=0
             QT_QPA_PLATFORMTHEME=gtk3
             QT_WAYLAND_DISABLE_WINDOWDECORATION=1
             MOZ_ENABLE_WAYLAND=1
             _JAVA_AWT_WM_NONREPARENTING=1
             SWAYROOT="${XDG_CONFIG_HOME:-${HOME}/.config}"/sway
             export XDG_SESSION_TYPE
             export SDL_VIDEODRIVER
             export ECORE_EVAS_ENGINE
             export ELM_DISPLAY
             export ELM_ENGINE
             export ELM_ACCEL
             export QT_QPA_PLATFORM
             export QT_WAYLAND_FORCE_DPI
             export QT_PLUGIN_PATH
             export QT_AUTO_SCREEN_SCALE_FACTOR
             export QT_QPA_PLATFORMTHEME
             export QT_WAYLAND_DISABLE_WINDOWDECORATION
             export DBUS_SESSION_BUS_ADDRESS
             export DBUS_SESSION_BUS_PID
             export MOZ_ENABLE_WAYLAND
             export _JAVA_AWT_WM_NONREPARENTING
             export SWAYROOT
             exec dbus-launch --sh-syntax --exit-with-session sway
         else
             echo "Error while validating sway configuration"
         fi
     elif [ "$TERM" = "linux" ]; then
         printf "\e]P0000000" #black
         printf "\e]P83f3f3f" #darkgrey
         printf "\e]P19f3f3f" #darkred
         printf "\e]P9ff9f9f" #red
         printf "\e]P23f9f3f" #darkgreen
         printf "\e]PAbfefbf" #green
         printf "\e]P3bf9f3f" #brown
         printf "\e]PB9fff9f" #yellow
         printf "\e]P45f5f9f" #darkblue
         printf "\e]PC9f9fff" #blue
         printf "\e]P59f3f9f" #darkmagenta
         printf "\e]PDff9fff" #magenta
         printf "\e]P63f9f9f" #darkcyan
         printf "\e]PE9fffff" #cyan
         printf "\e]P7afafaf" #lightgrey
         printf "\e]PFffffff" #white
         clear #for background artifacting
     fi
   #+END_SRC

* Calls
** bash
   #+BEGIN_SRC bash :tangle bash_login
     # netcheck source=.local/share/pspman/src/runcom/ui
     if [ -f "${RUNCOMDIR}"/ui ]; then
         . "${RUNCOMDIR}"/ui
     fi
   #+END_SRC

** zsh
   #+BEGIN_SRC bash :tangle zlogin
     # netcheck source=.local/share/pspman/src/runcom/ui
     if [ -f "${RUNCOMDIR}"/ui ]; then
         . "${RUNCOMDIR}"/ui
     fi
   #+END_SRC
