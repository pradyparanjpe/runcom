# -*- mode:org; coding: utf-8; -*-
#+TITLE: Prady runcom login and logout
#+SETUPFILE: header.org
#+PROPERTY: header-args :mkdirp t :results no :eval no

* Headers
#+begin_src emacs-lisp :tangle ../dotfiles/dot-bash_login :noweb yes :eval yes :exports none
  <<header.org:bash-check()>>
  <<header.org:banner()>>
#+end_src

#+begin_src emacs-lisp :tangle ../dotfiles/dot-zlogin :noweb yes :eval yes :exports none
  <<header.org:posix-check()>>
  <<header.org:banner()>>
#+end_src

#+begin_src emacs-lisp :tangle ../dotfiles/dot-login :noweb yes :exports none
  <<header.org:posix-check()>>
  <<header.org:banner()>>
#+end_src

#+begin_src emacs-lisp :tangle ../dotfiles/dot-bash_logout :noweb yes :eval yes :exports none
  <<header.org:bash-check()>>
  <<header.org:banner()>>
#+end_src

#+begin_src emacs-lisp :tangle ../dotfiles/dot-zlogout :noweb yes :eval yes :exports none
  <<header.org:posix-check()>>
  <<header.org:banner()>>
#+end_src

#+begin_src emacs-lisp :tangle ../dotfiles/dot-logout :noweb yes :exports none
  <<header.org:posix-check()>>
  <<header.org:banner()>>
#+end_src

#+begin_src emacs-lisp :tangle ../dotfiles/dot-login.d/ui.d/graphical :noweb yes :exports none
  <<header.org:posix-check()>>
  <<header.org:banner()>>
#+end_src

#+begin_src emacs-lisp :tangle ../env/ui :noweb yes :exports none
  <<header.org:posix-check()>>
  <<header.org:banner()>>
#+end_src

* Logins
** bash
#+begin_src bash :tangle ../dotfiles/dot-bash_login :noweb-ref loginref
  if [ -f "${HOME}/.login" ]; then
      . "${HOME}/.login"
  fi
#+end_src

** zsh
#+begin_src bash :tangle ../dotfiles/dot-zlogin :noweb yes
  <<loginref>>
#+end_src

** common
*** Call files from all *.d directories
#+begin_src bash :tangle ../dotfiles/dot-login
  _rc_drop_in "${HOME}/.login"
#+end_src

*** Launch
#+begin_src bash :tangle ../dotfiles/dot-login
  # shellcheck source=~/.runcom/env/ui
  if [ -f "${RUNCOMDIR}/env/ui" ]; then
      . "${RUNCOMDIR}/env/ui"
  fi
#+end_src

* Logouts
** bash
#+begin_src bash :tangle ../dotfiles/dot-logout :noweb-ref logoutref
  if [ -f "${HOME}/.logout" ]; then
      . "${HOME}/.logout"
  fi
#+end_src

** zsh
#+begin_src bash :tangle ../dotfiles/dot-zlogout :noweb yes
  <<logoutref>>
#+end_src

* DE/WM Launchers
** Selection menu
*** Pure POSIX
#+begin_src sh :tangle ../env/ui
  # Select menu using only print/read
  _rc_posix_select () {
      heading="${1}"
      shift
      box_border="$(head -c ${#heading} /dev/zero | tr '\0' '-')"
      printf "\n--%s--\n" "${box_border}" >&2
      printf "| %s |: [%s]" "${heading}" "${1}" >&2
      printf "\n--%s--\n" "${box_border}" >&2
      unset box_border heading
      word_l=""
      count=0
      for word in "$@"; do
          word_l="${word_l:+$word_l }${word}"
          count=$((count + 1))
          echo "${count}: ${word}" >&2
      done
      printf "Selection: " >&2
      read -r s_num
      echo "${word_l}" | cut -d' ' -f"${s_num}" 2>/dev/null
      unset word word_l count
  }
#+end_src

*** NCURSES Dialog
# TODO: a better temporary declaration of =DIALOGRC=
#+begin_src sh :tangle ../env/ui
  _rc_dialog_select () {
      heading="${1}"
      shift
      opt_list=
      opt_num=0
      while [ $# -gt 0 ]; do
          opt_num=$(( opt_num + 1 ))
          opt_list="${opt_list} $opt_num ${1}"
          shift
      done
      export DIALOGRC="${RUNCOMDIR}/env/dialogrc"
      s_num="$(echo "${opt_list}" \
                    | xargs dialog --stdout \
                    --menu "${heading}" 0 0 0 2>/dev/null)"
      export DIALOGRC=
      echo "$opt_list" | cut -d " " -f $((s_num + s_num + 1))
      unset opt_list opt_num s_num
  }
#+end_src

*** Appropriate
#+begin_src sh :tangle ../env/ui
  _rc_select () {
      # We DO want to split the array again
      if [ "${_RC_SHELL}" = "zsh" ]; then
          mod_opt=false
          now_setopts="$(setopt)"
          if [ "${now_setopts#*shwordsplit}" = "${now_setopts}" ]; then
              setopt shwordsplit
              mod_opt=true
          fi
      fi

      if builtin command -v dialog >/dev/null 2>&1; then
          # shellcheck disable=SC2068
          _selected="$(_rc_dialog_select $@)"
      else
          # shellcheck disable=SC2068
          _selected="$(_rc_posix_select $@)"
      fi

      if [ "${_RC_SHELL}" = "zsh" ] && $mod_opt; then
          unsetopt shwordsplit
      fi

      if [ -z "${_selected}" ]; then
          _selected="$(echo "$@" | cut -d" " -f1)"
      fi
      echo "${_selected}"
      unset mod_opt now_setopts _selected
  }
#+end_src

** Graphical exports preparation
Exports to be made according to selected graphical environment.
AWT_TOOLKIT=MToolkit [[https://wiki.archlinux.org/title/Java#Troubleshooting][needs to be set for some window managers]].
#+begin_src sh :tangle ../env/ui
  # exports common to both wayland and X11
  _rc_common_exports () {
      if [ -z "$XDG_RUNTIME_DIR" ]; then
          case "$(uname -s)" in
              L|linux)
                  XDG_RUNTIME_DIR="/run/user/$(id -u)"
                  ;;
              D|darwin)
                  # MacOS doesn't allow creation of a /run directory
                  XDG_RUNTIME_DIR="${HOME}/Library/Caches/TemporaryItems/"\
                                 "runtime/$(id -u)"
                  mkdir -p "${XDG_RUNTIME_DIR}"
                  ;;
          esac
      fi
      export XDG_RUNTIME_DIR

      LOGIN_GRAPHICAL=true
      export LOGIN_GRAPHICAL

      QT_PLUGIN_PATH="/usr/lib/kde4/plugins/"
      QT_AUTO_SCREEN_SCALE_FACTOR=0
      QT_QPA_PLATFORMTHEME="qt6ct"

      export QT_PLUGIN_PATH
      export QT_AUTO_SCREEN_SCALE_FACTOR
      export QT_QPA_PLATFORMTHEME

      AWT_TOOLKIT=1
      export AWT_TOOLKIT
  }

  # exports specific to wayland
  _rc_exports_for_wayland () {
      # export DISPLAY=":0"
      # export WAYLAND_DISPLAY=wayland-0
      # export GDK_BACKEND=wayland,x11
      _rc_common_exports

      XDG_SESSION_TYPE="wayland"
      SDL_VIDEODRIVER="wayland"
      ECORE_EVAS_ENGINE="wayland_egl"
      ELM_DISPLAY="wl"
      ELM_ENGINE="wayland_egl"
      ELM_ACCEL="opengl"
      MOZ_ENABLE_WAYLAND=1

      QT_QPA_PLATFORM="wayland-egl;xcb"
      QT_WAYLAND_FORCE_DPI=100
      QT_WAYLAND_DISABLE_WINDOWDECORATION=1

      # TODO: move to private sway config under ui.d
      SWAYROOT="${XDG_CONFIG_HOME:-${HOME}/.config}/sway"

      export XDG_SESSION_TYPE
      export SDL_VIDEODRIVER
      export ECORE_EVAS_ENGINE
      export ELM_DISPLAY
      export ELM_ENGINE
      export ELM_ACCEL
      export QT_QPA_PLATFORM
      export QT_WAYLAND_FORCE_DPI
      export QT_WAYLAND_DISABLE_WINDOWDECORATION
      export MOZ_ENABLE_WAYLAND
      export SWAYROOT
  }

  # exports specific to x11
  _rc_exports_for_x11 () {
      _rc_common_exports

      XDG_SESSION_TYPE="x11"
      SDL_VIDEODRIVER="x11"
      unset ECORE_EVAS_ENGINE
      unset ELM_DISPLAY
      unset ELM_ENGINE
      unset ELM_ACCEL
      unset QT_QPA_PLATFORM
      unset QT_WAYLAND_FORCE_DPI
      unset QT_WAYLAND_DISABLE_WINDOWDECORATION
      unset MOZ_ENABLE_WAYLAND

      export XDG_SESSION_TYPE
      export SDL_VIDEODRIVER

      # TODO: move to private i3 config under ui.d
      I3ROOT="${XDG_CONFIG_HOME:-${HOME}/.config}/i3"
      export I3ROOT
  }

  # yes/no prompt using dialog
  # Args:
  #    $1: Title
  #    $2: Prompt
  #
  # Returns: "yes" or "no"
  _rc_dialog_yesno () {
      if DIALOGRC="${RUNCOMDIR}/env/dialogrc" dialog \
                 --clear --defaultno --stdout --title "${1}" \
                 --yesno "${2}" 0 0 >/dev/null 2>&1; then
          printf "yes\n"
      else
          printf "no\n"
      fi
  }

  # Offer to export proxies to global environment before launching GUI
  _rc_exports_for_proxies () {
      if  [ -n "${all_proxy}" ]; then
          # all_proxy is already exported by now
          return
      fi
      if [ -z "${export_proxies}" ]; then
          if builtin command -v dialog >/dev/null 2>&1; then
              export_proxies="$(_rc_dialog_yesno "Proxies" "Use proxies?")"
          else
              printf "\n|-------|\n"
              printf "|Proxies|\n"
              printf "|-------|\n"
              printf "Use proxies?[y/N]:\t"
              read -r export_proxies
          fi
      fi
      case "${export_proxies}" in
          [Yy]*)
              all_proxy="$("${RUNCOMDIR}"/bin/proxy_extract.sh)"
              http_proxy="${all_proxy}"
              https_proxy="${all_proxy}"
              ftp_proxy="${all_proxy}"
              ftps_proxy="${all_proxy}"

              export all_proxy
              export http_proxy
              export https_proxy
              export ftp_proxy
              export ftps_proxy
              ;;
          ,*)
              ;;
      esac

  }
#+end_src

*** Terminal
With graphical environment, better terminals and graphical editors become accessible.
#+begin_src sh :tangle ../dotfiles/dot-login.d/ui.d/graphical
  # -*- coding: utf-8; mode: shell-script; -*-
  if ${LOGIN_GRAPHICAL}; then
      # use emacsclient
      if builtin command -v emacsclient >/dev/null 2>&1; then
          export VISUAL="emacsclient -c -a emacs"
      fi

      # default terminal
      for term in kitty alacritty foot termite tilix urxvt xterm; do
          if [ -n "$(command -v $term)" ]; then
              defterm="$term";
              export defterm
              break;
          fi;
      done
  fi
#+end_src

** Graphical selections
Display protocol and session selection.
#+begin_src sh :tangle ../env/ui
  # clear TTY, recolor
  _rc_clean_up_tty() {
      _rc_common_exports
      if [ "$TERM" = "linux" ]; then
          printf "\e]P0000000" #black
          printf "\e]P83f3f3f" #darkgrey
          printf "\e]P19f3f3f" #darkred
          printf "\e]P9ff9f9f" #red
          printf "\e]P23f9f3f" #darkgreen
          printf "\e]PAbfefbf" #green
          printf "\e]P3bf9f3f" #brown
          printf "\e]PB9fff9f" #yellow
          printf "\e]P45f5f9f" #darkblue
          printf "\e]PC9f9fff" #blue
          printf "\e]P59f3f9f" #darkmagenta
          printf "\e]PDff9fff" #magenta
          printf "\e]P63f9f9f" #darkcyan
          printf "\e]PE9fffff" #cyan
          printf "\e]P7afafaf" #lightgrey
          printf "\e]PFffffff" #white
          clear #for background artifacting
      fi
  }

  # Choice for wayland/X11
  _rc_select_display_protocol () {
      cache_file="${XDG_CACHE_HOME:-${HOME}/.cache}/runcom/graph_proto"
      default_proto="$(cat "${cache_file}")" 2>/dev/null
      default_proto="${default_proto:-non-graphical}"
      graph_avail="wayland x11 non-graphical"
      graph_avail="${default_proto} ${graph_avail%%"${default_proto}"*} ${graph_avail#*"${default_proto}"}"
      graph_proto="$(_rc_select "Display-Protocol" "${graph_avail}")"
      mkdir -p "${XDG_CACHE_HOME:-${HOME}/.cache}/runcom"
      echo "${graph_proto}" > "${cache_file}"
      unset default_proto graph_avail
  }


  # Choice of window manager / desktop environment
  # Args:
  #     $1: protocol name
  _rc_select_proto_session () {
      proto_name="${1}"
      sessions_mem="${XDG_CACHE_HOME:-${HOME}/.cache}/runcom/${proto_name}_session"

      protoinitrc=".xinitrc"
      sessions_dir="/usr/share/xsessions/"
      if [ "${proto_name}" = "wayland" ]; then
          protoinitrc=".wayinitrc"
          sessions_dir="/usr/share/wayland-sessions/"
      fi

      default_session="$(cat "${sessions_mem}")" 2>/dev/null
      default_session="${default_session:-${protoinitrc}}"

      # shellcheck disable=SC2046
      sessions_avail="$(ls "${sessions_dir}")"
      sessions_avail="${default_session}${sessions_avail#*"${default_session}"} ${sessions_avail%%"${default_session}"*}"
      exec_session="$(_rc_select "${proto_name}"-sessions "${sessions_avail}")"
      echo "${exec_session}" > "${sessions_mem}"
      unset default_session sessions_avail
      unset protoinitc
      unset sessions_dir
      unset proto_name
  }
#+end_src

** Interaction
Right before launching the desktop environment or window manager, all drop-ins from =~/.login.d/ui.d/*= are executed with all DE / WM variables set.
#+begin_src sh :tangle ../env/ui
  # main UI choice routine
  main () {
      nowtty="$(tty)"
      if [ "${nowtty#/dev/tty}" = "${nowtty}" ]; then
          unset nowtty
          _rc_clean_up_tty
          return
      fi
      unset nowtty
      _rc_exports_for_proxies
      if ${RUNCOM_LAUNCH_UI} && [ -z "${RUNCOM_SESSION}" ]; then
          _rc_select_display_protocol
          if [ "${graph_proto}" = "x11" ]; then
              _rc_exports_for_x11
              _rc_select_proto_session "${graph_proto}"
              export RUNCOM_SESSION="${graph_proto}${DISPLAY}: ${exec_session}"
              exec "${RUNCOMDIR}/bin/x11start" "${exec_session}"
          elif [ "${graph_proto}" = "wayland" ]; then
              _rc_exports_for_wayland
              _rc_select_proto_session "${graph_proto}"
              export RUNCOM_SESSION="${graph_proto}${DISPLAY}: ${exec_session}"
              _rc_drop_in "${HOME}/.login.d/ui"
              exec "${RUNCOMDIR}/bin/waystart" "${exec_session}"
          fi
      fi
      unset graph_proto exec_session RUNCOM_SESSION
     _rc_clean_up_tty
  }

  main "$@"
#+end_src
