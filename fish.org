#-*- coding:utf-8; mode:org -*-
#+TITLE: Prady_runcom
#+AUTHOR: Pradyumna Paranjape
#+EMAIL: pradyparanjpe@rediffmail.com
#+LANGUAGE: en
#+OPTIONS: toc: t mathjax:t TeX:t num:t ::t :todo:nil tags:nil *:t skip:t
#+STARTUP: overview
#+PROPERTY: header-args :tangle config.fish

* Copyright/License Header
  Copyright 2020 Pradyumna Paranjape

  This file is part of Prady_runcom.

  Prady_runcom is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Prady_runcom is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with Prady_runcom.  If not, see <https://www.gnu.org/licenses/>.

* Table of Contents :toc:
- [[#copyrightlicense-header][Copyright/License Header]]
- [[#what-is-this][What is this?]]
- [[#mode-line][Mode line]]
- [[#copyrightlicense-export][Copyright/License Export]]
- [[#colors][Colors]]
  - [[#definitions][Definitions]]
  - [[#plain-tty-colors][Plain TTY colors]]
- [[#extensions][Extensions]]
  - [[#bash-behaviour-options-extensions][Bash Behaviour Options Extensions]]
  - [[#identify-self][Identify Self]]
  - [[#editor-wars-00][Editor wars]]
  - [[#python-exports][Python exports]]
  - [[#c-exports][C(++) exports]]
  - [[#gpu-exports][GPU exports]]
  - [[#sway-exports][Sway exports]]
- [[#spark][Spark]]
- [[#custom-defined-functions][Custom defined functions]]
  - [[#git][Git]]
    - [[#status][Status]]
    - [[#branch][Branch]]
    - [[#hash][Hash]]
    - [[#prompt-string-addition][Prompt string addition]]
- [[#prompt-string][Prompt String]]
  - [[#ps1][PS1]]
- [[#assumed-options][Assumed options]]
  - [[#compression][Compression]]
  - [[#disk-usage][Disk Usage]]
  - [[#network][Network]]
  - [[#environment][Environment]]
  - [[#monitor-job-queues][Monitor Job queues]]
  - [[#lazy-single-handed-exit][Lazy single-handed exit]]
- [[#better-program-defaults][Better program defaults]]
  - [[#grep][g/re/p]]
  - [[#list-contents][List Contents]]
  - [[#neo-visual-editor-improved][neo visual editor improved]]
  - [[#container][Container]]
- [[#functions][Functions]]
  - [[#mathematical][Mathematical]]
    - [[#in-line-calculator][In-Line Calculator]]
    - [[#computational][Computational]]
  - [[#dummy-placeholder][Dummy placeholder]]
  - [[#compilation][Compilation]]
    - [[#pdf-from-latex][PDF from Latex]]
    - [[#pandoc][Pandoc]]
      - [[#org-to-something][Org to Something]]
      - [[#org-to-docx][Org to Docx]]
      - [[#org-to-pdf][Org to PDF]]
      - [[#docx-to-org][Docx to Org]]
- [[#alias-like-functions][Alias-like Functions]]
  - [[#launch-gui][Launch gui]]
  - [[#un-compress-by-context][Un-Compress by context]]
- [[#networking][Networking]]
  - [[#state][State]]
  - [[#ssh-agent][SSH Agent]]
  - [[#mount-home-server][Mount Home Server]]
- [[#remote][Remote]]
- [[#window-manager-settings][Window Manager settings]]
  - [[#terminal][Terminal]]
  - [[#sway][Sway]]

* What is this?
  Bash executes functions from $HOME/.config/fish/config.fish
  whenever a new shell is called. Maintaining its syncronized copy is hard.
  Furthercase  dependencies (if any
    need to be packaged with executions.
  Hence, a separate file may be maintained in ~/.runcom/fishrc,
  and linked to standard configuration location.

  #+BEGIN_EXAMPLE
  ln -s ~/.runcom/fishrc ~/.config/fish/config.fish
  #+END_EXAMPLE

* Mode line
  #+begin_src fish
    #!/usr/bin/env fish
    # -*- coding:utf-8; mode:shell-script; -*-
  #+END_SRC
* Copyright/License Export
  #+begin_src fish
    #
    # Copyright 2020 Pradyumna Paranjape
    #
    # This file is part of Prady_runcom.
    #
    # Prady_runcom is free software: you can redistribute it and/or modify
    # it under the terms of the GNU General Public License as published by
    # the Free Software Foundation, either version 3 of the License, or
    # (at your option) any later version.
    #
    # Prady_runcom is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    # GNU General Public License for more details.
    #
    # You should have received a copy of the GNU General Public License
    # along with Prady_runcom.  If not, see <https://www.gnu.org/licenses/>.
    #
  #+END_SRC

* Colors
** Definitions
   #+NAME: Color definitionss
   #+begin_src fish
     set -xU BLACK "\033[0;30m";
     set -xU BLACK_BOLD "\033[1;30m";
     set -xU RED "\033[0;31m";
     set -xU RED_BOLD "\033[1;31m";
     set -xU GREEN "\033[0;32m";
     set -xU GREEN_BOLD "\033[1;32m";
     set -xU YELLOW "\033[0;33m";
     set -xU YELLOW_BOLD "\033[1;33m";
     set -xU BLUE "\033[0;34m";
     set -xU BLUE_BOLD "\033[1;34m";
     set -xU MAGENTA "\033[0;35m";
     set -xU MAGENTA_BOLD "\033[1;35m";
     set -xU CYAN "\033[0;36m";
     set -xU CYAN_BOLD "\033[1;36m";
     set -xU WHITE "\033[0;37m";
     set -xU WHITE_BOLD "\033[1;37m";
     set -xU BG_BLACK "\033[0;40m";
     set -xU BG_BLACK_BOLD "\033[1;40m";
     set -xU BG_RED "\033[0;41m";
     set -xU BG_RED_BOLD "\033[1;41m";
     set -xU BG_GREEN "\033[0;42m";
     set -xU BG_GREEN_BOLD "\033[1;42m";
     set -xU BG_YELLOW "\033[0;43m";
     set -xU BG_YELLOW_BOLD "\033[1;43m";
     set -xU BG_BLUE "\033[0;44m";
     set -xU BG_BLUE_BOLD "\033[1;44m";
     set -xU BG_MAGENTA "\033[0;45m";
     set -xU BG_MAGENTA_BOLD "\033[1;45m";
     set -xU BG_CYAN "\033[0;46m";
     set -xU BG_CYAN_BOLD "\033[1;46m";
     set -xU BG_WHITE "\033[0;47m";
     set -xU BG_WHITE_BOLD "\033[1;47m";
     set -xU NO_EFFECTS "\033[m";
   #+END_SRC

** Plain TTY colors
   #+NAME: TTY colors
   #+begin_src fish
      if [ "$TERM" = "linux" ]
         echo -en "\e]P0000000" #black
         echo -en "\e]P83f3f3f" #darkgrey
         echo -en "\e]P19f3f3f" #darkred
         echo -en "\e]P9ff9f9f" #red
         echo -en "\e]P23f9f3f" #darkgreen
         echo -en "\e]PAbfefbf" #green
         echo -en "\e]P3bf9f3f" #brown
         echo -en "\e]PB9fff9f" #yellow
         echo -en "\e]P45f5f9f" #darkblue
         echo -en "\e]PC9f9fff" #blue
         echo -en "\e]P59f3f9f" #darkmagenta
         echo -en "\e]PDff9fff" #magenta
         echo -en "\e]P63f9f9f" #darkcyan
         echo -en "\e]PE9fffff" #cyan
         echo -en "\e]P7afafaf" #lightgrey
         echo -en "\e]PFffffff" #white
         clear #for background artifacting
     end
   #+END_SRC

* Extensions
** Bash Behaviour Options Extensions
   #+begin_src fish  :tangle no
     shopt -s autocd # Allows to cd by only typing name
     set -o vi
     bind '"jk":vi-movement-mode'
   #+END_SRC

** Identify Self
   #+begin_src fish
     set -xU RUNCOMDIR "$HOME/.runcom"
     set PATH "$PATH" "$HOME/bin";
     set -xU PATH "$PATH" "$HOME/.local/bin";
     set fish_greeting
   #+END_SRC

** TODO Editor wars [0/0]
   #+begin_src fish :tangle no
      set avail_editors 'emacsclient -nw -c -a ""' 'nvim' 'vim' 'vi' 'nano'
     for avail in "${avail_editors[@]}"
         if command -v $avail -- >/dev/null
              set EDITOR "$avail"
             break
         end
     end
     export EDITOR
   #+END_SRC

** Python exports
   #+begin_src fish
     function python_ver
         python --version |cut -d "." -f1,2 |sed 's/ //' |sed 's/P/p/'
     end
     set -xU PYTHONPATH "$PYTHONPATH $HOME/lib/(python_ver)/site-packages" "$HOME/lib64/(python_ver)/site-packages";
   #+END_SRC

** C(++) exports
   #+begin_src fish
     set -xU LD_LIBRARY_PATH "$HOME/.local/lib" "$HOME/.local/lib64";
   #+END_SRC

** GPU exports
   #+begin_src fish
     set -xU PYOPENCL_CTX '0';
     set -xU PYOPENCL_COMPILER_OUTPUT 1;
     set -xU OCL_ICD_VENDORS "/etc/OpenCL/vendors/";
   #+END_SRC

** Sway exports
   Don't really remember why these were made
   Not using currently. Preserved for future
   set -xU WLR_BACKENDS "headless";
   set -xU WLR_LIBINPUT_NO_DEVICES 1;

* Spark
 #+begin_src fish
 set -g spark_version 1.0.0

complete -xc spark -n __fish_use_subcommand -a --help -d "Show usage help"
complete -xc spark -n __fish_use_subcommand -a --version -d "$spark_version"
complete -xc spark -n __fish_use_subcommand -a --min -d "Minimum range value"
complete -xc spark -n __fish_use_subcommand -a --max -d "Maximum range value"

function spark -d "sparkline generator"
    if isatty
        switch "$argv"
            case {,-}-v{ersion,}
                echo "spark version $spark_version"
            case {,-}-h{elp,}
                echo "usage: spark [--min=<n> --max=<n>] <numbers...>  Draw sparklines"
                echo "examples:"
                echo "       spark 1 2 3 4"
                echo "       seq 100 | sort -R | spark"
                echo "       awk \\\$0=length spark.fish | spark"
            case \*
                echo $argv | spark $argv
        end
        return
    end

    command awk -v FS="[[:space:],]*" -v argv="$argv" '
        BEGIN {
            min = match(argv, /--min=[0-9]+/) ? substr(argv, RSTART + 6, RLENGTH - 6) + 0 : ""
            max = match(argv, /--max=[0-9]+/) ? substr(argv, RSTART + 6, RLENGTH - 6) + 0 : ""
        }
        {
            for (i = j = 1; i <= NF; i++) {
                if ($i ~ /^--/) continue
                if ($i !~ /^-?[0-9]/) data[count + j++] = ""
                else {
                    v = data[count + j++] = int($i)
                    if (max == "" && min == "") max = min = v
                    if (max < v) max = v
                    if (min > v ) min = v
                }
            }
            count += j - 1
        }
        END {
            n = split(min == max && max ? "▅ ▅" : "▁ ▂ ▃ ▄ ▅ ▆ ▇ █", blocks, " ")
            scale = (scale = int(256 * (max - min) / (n - 1))) ? scale : 1
            for (i = 1; i <= count; i++)
                out = out (data[i] == "" ? " " : blocks[idx = int(256 * (data[i] - min) / scale) + 1])
            print out
        }
    '
end
#+end_src

* Custom defined functions
** TODO Git
*** Status
    #+begin_src fish :tangle no
      function git_status
           set local modified 0
           set local cached 0
           set local untracked 0

          while read -r line; do
               if [ "$line"   '_?_?_' ]
                   set untracked 1
                  continue
              end

               if [[ "$line"  ~ ^_[^[:space:]]_.?_ ]]
                   set cached 1
              end

               if [[ "$line"  ~ ^_._[^[:space:]]_ ]]
                   set modified 1
              end
          end < <(git status --short | cut -b -2 | sed -e 's/\(.\)\(.*\)/_\1_\2_/')

          if [ $modified -ne 0 ]
              echo -ne "$REDM"
          end

          if [ $cached -ne 0 ]
              echo -ne "$GREENC"
          end

          if [ $untracked -ne 0 ]
              echo -ne "$RED?"
          end

          if [ -n "(git stash list)" ]
              echo -ne "$CYANS"
          end
          echo -e "$NO_EFFECTS"
      end
    #+END_SRC

*** Branch
    #+begin_src fish :tangle no
      function git_branch
          local branch
           set branch "(git branch 2>/dev/null | grep '^\*' | sed -e "s/^* //")"
           if [[ "$branch"  ~ ^bug- ]]
              echo -ne "$GREEN"
           set elif [[ "$branch"  ~ ^atc- ]]
              echo -ne "$CYAN"
           set elif [[ "$branch"  ~ ^tmp ]]
              echo -ne "$MAGRNTA"
           set elif [[ "$branch"   "(detached from hde/master)" ]]
              echo -ne "$YELLOW"
           set elif [[ "$branch" =  "master" ]]
              return
          else
              echo -ne "$MAGENTA"
          end
          echo -n "$branch"
          echo -e "$NO_EFFECTS"
      end
    #+END_SRC
*** Hash
    #+begin_src fish :tangle no
      function git_hash
           set git log --pretty format:'%h' -n 1
      end
    #+END_SRC

*** Prompt string addition
    Include git's branch, hash, status in PS1 if in git repository
    This function is called in PS1 section below
    #+NAME: Git PS
    #+begin_src fish :tangle no
      function git_ps
          if ! git status --ignore-submodules &>/dev/null
              return
          else
              echo " (git_branch)·$(git_hash)·$(git_status) "
          end
      end
    #+END_SRC

* Prompt String
** PS1
   #+NAME: PS1
   #+begin_src fish
      set PS1 ""
      set PS1 "$PS1\n"
      set PS1 "$PS1\[$GREEN\]\u\[$NO_EFFECTS\]"
      set PS1 "$PS1@"
      set PS1 "$PS1\[$BLUE\]\h\[$NO_EFFECTS\]"
      # set PS1 "$PS1\(git_ps)"
      set PS1 "$PS1\[$WHITE\]<"
      set PS1 "$PS1\[$CYAN\]\W"
      set PS1 "$PS1\[$WHITE\]>"
      set PS1 "$PS1\[$YELLOW\]\t\[$NO_EFFECTS\]"
      set PS1 "$PS1\n» "
     set -xU PS1 $PS1
   #+END_SRC

   #+NAME: PS2
   #+begin_src fish
      set PS2 ""
      set PS2 "$PS2\[$CYAN\]cont..."
      set PS2 "$PS2\[$NO_EFFECTS\]"
      set PS2 "$PS2» ";
     set -xU PS2 $PS2
   #+END_SRC

   #+NAME: PS3
   #+begin_src fish
      set PS3 "Selection" " ";
     set -xU PS3 $PS3
   #+END_SRC

* Assumed options
** Compression
   Use multiple threads
   #+begin_src fish
      function tcpz
          tar -c --use-compress-program pigz $argv
      end
      function txpz
          tar -x --use-compress-program pigz $argv
      end
   #+END_SRC

** Disk Usage
   #+begin_src fish
      function du
          du -hc $argv
      end
      function df
          df -h $argv
      end
      function duall
          du -hc |grep '^[3-9]\{3\}M\|^[0-9]\{0,3\}\.\{0,1\}[0-9]\{0,1\}G' $argv
      end
   #+END_SRC

** Network
   #+begin_src fish
      function nload
          /usr/bin/nload -u M -U G -t 10000 -a 3600 "(ip a | grep -m 1 " UP " | cut -d " " -f 2 | cut -d "" "" -f 1)"
      end
      function nethogs
          /usr/bin/su - -c "nethogs (ip a |grep  'state UP' | cut -d ' ' -f 2 | cut -d '" "' -f 1) -d 10" $argv
      end
      function ping
          ping -c 4 $argv
      end
   #+END_SRC

** Environment
   Change python3 environments
   #+begin_src fish
      function to_venv
          source .venv/bin/activate $argv
      end
      function activateGRN
          deactivate || true; source $HOME/.virtualenvs/Leish_Petri/bin/activate $argv
      end
      function activateRNA
          deactivate || true; source $HOME/.virtualenvs/RNASeq3/bin/activate $argv
      end
   #+END_SRC

** Monitor Job queues
   #+begin_src fish
      function watch
          watch -n 10 --color=auto $argv
      end
      function psauxgrep
          ps aux |head -1 && ps aux | grep -v 'grep' | grep -v 'rg'| grep -i $argv
      end
   #+END_SRC
** Lazy single-handed exit
   #+begin_src fish
      function qqqq
          exit $argv
      end
   #+END_SRC

* Better program defaults
** g/re/p
   #+begin_src fish
     for sc in "rg" "ag" "pt" "ack" "grep"
         if command -v "$sc" >>/dev/null
             function grep
                 $sc --color=auto $argv
             end;
             break
         end
     end
   #+END_SRC

** List Contents
   #+begin_src fish
     if command -v "exa" >>/dev/null
         function ls
             exa -Fh --color=auto $argv
         end
         function la
             exa -a --color=auto $argv
         end
         function ll
             exa -lr -s size $argv
         end
         function lla
             exa -a $argv
         end
         function l.
             exa -a --color=auto |grep "^\." $argv
         end
         function sl
             /usr/bin/sl -al $argv
         end
     end
   #+END_SRC

** neo visual editor improved
   #+begin_src fish
     if command -v nvim >>/dev/null
          function ex
              nvim $argv
          end ## always open vim in normal mode
          function vim
              nvim $argv
          end ## always use neo
     end
   #+END_SRC

** Container
   #+begin_src fish
     if command -v podman >>/dev/null
          function docker
              podman $argv
          end  # Podman is drop-in replacement for docker
          function docker-compose
              podman-compose $argv
          end  # Podman is drop-in replacement for docker
     end
     function pip
         python -m pip $argv
     end # Invoke pip with python
   #+END_SRC

* Functions
** Mathematical
*** In-Line Calculator
    #+begin_src fish
      function mathcalc
          echo "scale 4; $argv"| bc
      end
    #+END_SRC

*** Computational
    #+begin_src fish
      function dec2hex
          echo "hex:"
          echo "obase 16; $argv"| bc
          echo "dec:"
          set echo "ibase 16; $argv"| bc
      end
    #+END_SRC

** Dummy placeholder
   If not in an python virtual environment, "deactivate" shouldn't through errors

   #+begin_src fish
     function deactivate
         true
     end
   #+END_SRC

** TODO Compilation
*** PDF from Latex
    #+begin_src fish :tangle no
      function pdfcompile
          pdflatex $1
          for ext in "toc" "log" "aux"
              set delfile ${1/\.tex/\.$ext}
              if [ -f "$delfile" ]
                  rm "$delfile"
              end
          end
          zathura ${1/\.tex/\.pdf}
      end
    #+END_SRC
*** Pandoc
**** Org to Something
     #+begin_src fish :tangle no
       function org2export
           # Usage: org2oth [-f] <infile> <othtype>
           proceed=
           while test $# -gt 1; do
               switch "$1"
                   -f|--force)
                        set proceed true
                       shift 1

                   ,*)
                        set infile "$1"
                       shift 1

               end
           end
            if [[ "$1" =  "pdf" ]]
                set target "latex"
           else
                set target "$1"
           end
            set tarext "$1"
            if [[ "$infile" =  *.org ]]
                set proceed true
           else
               echo "Input file should be an org file"
           end
           if [[ -n "$proceed" ]]
               pandoc -f org -t "$target" -o "${infile/.org/}.$tarext" "$infile"
           end
           proceed=
           target=
           infile=
       end
     #+END_SRC

**** Org to Docx
     #+begin_src fish :tangle no
       function org2doc
           org2export "$argv" "docx"
       end
     #+END_SRC

**** Org to PDF
     #+begin_src fish :tangle no
       function org2pdf
           org2export "$argv" "pdf"
       end
     #+END_SRC

**** Docx to Org
     #+begin_src fish :tangle no
       function doc2org
            if [[ "$1" =  *.docx ]]
               pandoc -f docx -t org -o  "${1/%docx/org}" "$1"
           else
               echo "Input file must be a docx file"
           end
       end
     #+END_SRC

* Alias-like Functions
** Launch gui
   Launch application and exit terminal window
   Acts like a launcher
   Uninteractive terminal commands may also be called
   #+begin_src fish
     function gui
         if [ -n "$argv" ]
             if command -v "$1" >> /dev/null
                 exec nohup "$argv" &>/dev/null 0<&- &
                 exit 0
             end
         end
     end
   #+END_SRC

** Un-Compress by context
   #+begin_src fish
     function deconvolute
         if [ ! -f "$1" ]
             echo "$1" " no such file";
         else
             switch "$1"
                 case *.tar.bz2
                     tar -xjf "$1"
                 case *.tbz2
                     tar -xjf "$1"
                 case *.tar.gz
                     tar -x --use-compress-program pigz -f "$1"
                 case *.tgz
                     tar -x --use-compress-program pigz -f "$1"
                 case *.gz
                     pigz "$1"
                 case *.rar
                     unrar -x "$1"
                 case *.tar
                     tar -xf "$1"
                 case *.zip
                     unzip "$1"
                 case *.tar.xz
                     tar -xf "$1"
                 case *
                     echo "Cannot extract $1, provide explicit command"
             end
         end
     end
   #+END_SRC

* Networking
** TODO State
   Display state of network connection at the beginning
   #+begin_src fish :tangle no
     set netcodes ( $RUNCOMDIR/netcheck.sh )
     set -xU IP_ADDR "${netcodes[0]}"
     set -xU AP_ADDR "${netcodes[1]}"
     if [[ "${netcodes[2]}" -gt 7 ]]
         echo -e "${BLUE_BOLD}Internet (GOOGLE) Connected$NO_EFFECTS"
         echo -e "$GREEN$IP_ADDR $NO_EFFECTS is current wireless ip address"
     else
         echo -e "${RED_BOLD}Internet (GOOGLE) Not reachable$NO_EFFECTS"
         if [[ (( netcodes[2] % 8 )) -gt 3 ]]  # Intranet is connected
             echo -e "$REDInternet Down$NO_EFFECTS"
             switch (( netcodes[2] % 4 ))
                 2) echo -e "Home network connected,"

                 1) echo -e "CCMB network connected,"
                    if [[ -f "$RUNCOMDIR/proxy_send.py" ]]
                        $RUNCOMDIR/proxy_send.py \
                            && echo -e "$YELLOWPROXY AUTH SENT$NO_EFFECTS";
                    end

                 case *
                     echo -e "HOTSPOT connected"

             end
         else
             echo -e "${YELLOW_BOLD}Network connection Disconnected$NO_EFFECTS"
         end
     end
   #+END_SRC

** SSH Agent
   Reuse ssh agent for all logins
   #+begin_src fish
     if [ ! -S ~/.ssh/ssh_auth_sock ]
         eval `ssh-agent`
         ln -sf "$SSH_AUTH_SOCK" ~/.ssh/ssh_auth_sock
     end
     set -xU SSH_AUTH_SOCK ~/.ssh/ssh_auth_sock
     ssh-add -l > /dev/null || ssh-add
   #+END_SRC

** TODO Mount Home Server
   Home Cloud mounts
   #+begin_src fish :tangle no
     if [[ (( netcodes[2] % 4 )) -eq 2 ]]
          set clouddir ( "/media/data" "/home/pradyumna" )
          set srv_mnt_dir "$HOME/www.anubandha.d"
         if [[ (mount | grep -c "${srv_mnt_dir}") \
                   -lt "${#clouddir[@]}" ]]; then
             # not mounted
             for pathloc in ${clouddir[@]}
                  set mntpath "${srv_mnt_dir}$pathloc"
                 mkdir -p "$mntpath"
                  set sshfs -o "reconnect,ServerAliveInterval=15,ServerAliveCountMax 3" "pradyumna@www.anubandha.home" "$pathloc" "$mntpath"
             end
         end
     end
   #+END_SRC
* Remote
  Wayland Display manager needs this for some reason...
  Don't remember why
  #+begin_src fish
    set -xU NO_AT_BRIDGE 1
  #+END_SRC

* Window Manager settings
** Terminal
   #+begin_src fish
     for term in foot termite tilix xterm gnome-terminal
         if [ -n "(command -v $term)" ]
             set -xU defterm "$term";
             break;
         end
     end
   #+END_SRC

** Sway
   If running from tty1 setup sway environment and start sway
   #+begin_src fish
      if [ "(tty)" = "/dev/tty1" ]
         # set -xU DISPLAY "" "0.0"
         # set -xU WAYLAND_DISPLAY wayland-0
         set -xU XDG_SESSION_TYPE wayland
         set -xU SDL_VIDEODRIVER wayland
         set -xU QT_QPA_PLATFORM wayland-egl
         set -xU ELM_DISPLAY wl
         set -xU ECORE_EVAS_ENGINE wayland_egl
         set -xU ELM_ENGINE wayland_egl
         set -xU ELM_ACCEL opengl
         set -xU GDK_BACKEND wayland
         unset GDK_BACKEND
         # export DBUS_SESSION_BUS_ADDRESS
         # export DBUS_SESSION_BUS_PID
         set -xU MOZ_ENABLE_WAYLAND 1
         # unset WAYLAND_DISPLAY
         exec sway
     end
   #+END_SRC
