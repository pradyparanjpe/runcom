.TH "Cloud mount" "1" 

.SH "Description"
.PP
mount (unmount) cloud-media using sshfs

.SH "Setup"
.PP
Following variables should be declared by adding lines to
\fI${XDG_CONFIG_HOME:\-${HOME/.config}/(pvt|local).d/.<some_name>rc\fP
.IP \(em 4
cloud_sship: address (ip/domain name) for ssh
.IP \(em 4
cloud_locs: absolute paths on \fIcloud_sship\fP to mount (space-separated)
.IP \(em 4
cloud_user: user name for ssh
.IP \(em 4
mount_net: network code necessary for \fIcloud_sship\fP to be accessible
.IP \(em 4
1: home
.IP \(em 4
2: work
.IP \(em 4
4: (any) intranet
.IP \(em 4
8: internet

.RS
.nf
\fCcloud_sship="10.0.0.10"
cloud_user="weatherman"
cloud_locs="/media/shared /home/weatherman"
mount_net=2
export cloud_sship
export cloud_user
export cloud_locs
export mount_net

\fP
.fi
.RE

.SH "Code"
.PP
This section tangles source code
.SS "Check availability"
.RS
.nf
\fCaffirm_availability () {
    for _import in sshfs grep; do
        if ! command -v "${_import}" >/dev/null 2>&1; then
            unset _import
            clean_exit 127 "${_import} is not installed\n"
        fi
    done
    unset _import
}
\fP
.fi
.RE

.SS "Handle global variables and exits"
.RS
.nf
\fCset_vars() {
    # shellcheck disable=SC2154
    if [ -z "${cloud_sship}" ] || [ -z "${cloud_user}" ]; then
        clean_exit 127 "\$cloud_sship AND/OR \$cloud_user is unset\n"
    fi
    srv_mnt_dir=
    num_locs=0
    action="mount"
    usage="
    usage: ${0} -h
    usage: ${0} --help
"
    help_msg="${usage}

    DESCRIPTION: |
      ssh filesystem mount


    Optional Arguments: |
      -h\t\t\tprint usage message and exit
      --help\t\t\tprint this help message and exit

    Optional Positional Arguments: |
      u[n]mount\t\tunmount filesystems
"
}

unset_vars () {
    unset help_msg
    unset usage
    unset action
    unset num_locs
    unset srv_mnt_dir
}

clean_exit() {
    unset_vars
    if [ -n "${1}" ] && [ "${1}" -ne "0" ]; then
        if [ -n "${2}" ]; then
            # shellcheck disable=SC2059
            printf "${2}\n" >&2
        fi
        # shellcheck disable=SC2086
        exit ${1}
    fi
    if [ -n "${2}" ]; then
        # shellcheck disable=SC2059
        printf "${2}\n"
    fi
    exit 0
}

\fP
.fi
.RE

.SS "Parse command"
.RS
.nf
\fC
cli () {
    while [ $# -gt 0 ]; do
        case "${1}" in
            -h)
                # shellcheck disable=SC2059
                clean_exit 0 "${usage}"
                ;;
            --help)
                # shellcheck disable=SC2059
                clean_exit 0 "${help_msg}"
                ;;
            unmount|umount)
                action="unmount"
                shift
                ;;
            *)
                clean_exit 1 "${usage}"
        esac
    done
}

\fP
.fi
.RE

.SS "Mount/Unmount"
.RS
.nf
\fCdiscover () {
    IFS="$(printf '\t')" read -r _ _ netstate << netcheck
$(eval "${RUNCOMDIR:-${HOME}/.runcom}/bin/netcheck.sh")
netcheck
    # shellcheck disable=SC2154
    if [ $(( netstate & mount_net )) ]; then
        # On home network
        srv_mnt_dir="${HOME}/${cloud_sship}"
        # shellcheck disable=SC2154
        num_locs="$(echo "${cloud_locs}" | grep ' ' -c)"
        if [ -n "${clod_locs}" ]; then
            num_locs="$(( num_locs + 1 ))"
        fi
    else
        clean_exit 1 "Not on correct network"
    fi
}

mountssh () {
    if [ "$(mount | grep -c "${srv_mnt_dir}")" -lt "${num_locs}" ]; then
        # not mounted
        CDR="${cloud_locs} "
        while [ -n "${CDR}" ]; do
            CAR="${CDR%% *}"
            printf "mounting %s -> %s\n" \
                   "${cloud_user}@${cloud_sship}:${CAR}" \
                   "${srv_mnt_dir}${CAR}"
            mkdir -p "${srv_mnt_dir}${CAR}"
            sshfs -o \
                  "reconnect,ServerAliveInterval=15,ServerAliveCountMax=3" \
                  "${cloud_user}@${cloud_sship}:${CAR}" "${srv_mnt_dir}${CAR}"
            CDR="${CDR#* }";
        done;
        unset CAR CDR
    fi
}

umountssh () {
    set -- "${cloud_locs}"
    if [ "$(mount | grep -c "${srv_mnt_dir}")" -ge "${num_locs}" ]; then
        # mounted
        CDR="${cloud_locs} "
        while [ -n "${CDR}" ]; do
            CAR="${CDR%% *}"
            printf "unmounting %s\n" "${srv_mnt_dir}${CAR}"
            umount "${srv_mnt_dir}${CAR}"
            CDR="${CDR#* }";
        done
    fi
    unset CAR CDR
}
\fP
.fi
.RE

.SS "Main routine call"
.RS
.nf
\fCmain () {
    affirm_availability
    set_vars
    cli "$@"
    discover
    if [ "${action}" = 'unmount' ]; then
        umountssh
    else
        mountssh
    fi
    clean_exit
}

main "$@"
\fP
.fi
.RE

.SH "References"
.IP \(em 4
POSIX iterator was inspired by https://gist.github.com/biiont/290341b29657c0bb2df6 \fBat\fP \fIbiiont\fP
