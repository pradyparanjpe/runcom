# shellcheck shell=sh
# -*- coding:utf-8; mode:shell-script; -*-
#
# Copyright 2020, 2021 Pradyumna Paranjape
#
# This file is part of Prady_runcom.
#
# Prady_runcom is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Prady_runcom is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Prady_runcom.  If not, see <https://www.gnu.org/licenses/>.
#
#===================================================================
#  ___             _      ___                     _
# | _ \_ _ __ _ __| |_  _| _ \__ _ _ _ __ _ _ _  (_)_ __  ___
# |  _/ '_/ _` / _` | || |  _/ _` | '_/ _` | ' \ | | '_ \/ -_)
# |_| |_| \__,_\__,_|\_, |_| \__,_|_| \__,_|_||_|/ | .__/\___|
#                    |__/                      |__/|_|
#===================================================================

if [ ! -S "${HOME}/.ssh/ssh_auth_sock" ]; then
    eval "$(ssh-agent)"
    ln -sf "$SSH_AUTH_SOCK" ~/.ssh/ssh_auth_sock
fi
SSH_AUTH_SOCK=~/.ssh/ssh_auth_sock
export SSH_AUTH_SOCK
ssh-add -l > /dev/null || ssh-add

for term in foot alacritty termite tilix urxvt xterm; do
    if [ -n "$(command -v $term)" ]; then
        defterm="$term";
        export defterm
        break;
    fi;
done

_common_exports() {
    if [ -z "$XDG_RUNTIME_DIR" ]; then
        XDG_RUNTIME_DIR="/run/user/$(id -u)"
    fi
    QT_PLUGIN_PATH="/usr/lib/kde4/plugins/"
    QT_AUTO_SCREEN_SCALE_FACTOR=0
    QT_QPA_PLATFORMTHEME="qt5ct"
    _JAVA_AWT_WM_NONREPARENTING=1

    export XDG_RUNTIME_DIR
    export QT_PLUGIN_PATH
    export QT_AUTO_SCREEN_SCALE_FACTOR
    export QT_QPA_PLATFORMTHEME
    export _JAVA_AWT_WM_NONREPARENTING
}

_exports_for_wayland () {
    # export DISPLAY=":0"
    # export WAYLAND_DISPLAY=wayland-0
    # export GDK_BACKEND=wayland,x11
    _common_exports

    XDG_SESSION_TYPE="wayland"
    SDL_VIDEODRIVER="wayland"
    ECORE_EVAS_ENGINE="wayland_egl"
    ELM_DISPLAY="wl"
    ELM_ENGINE="wayland_egl"
    ELM_ACCEL="opengl"
    QT_QPA_PLATFORM="wayland-egl;xcb"
    QT_WAYLAND_FORCE_DPI=100
    QT_WAYLAND_DISABLE_WINDOWDECORATION=1
    MOZ_ENABLE_WAYLAND=1
    SWAYROOT="${XDG_CONFIG_HOME:-${HOME}/.config}/sway"

    export XDG_SESSION_TYPE
    export SDL_VIDEODRIVER
    export ECORE_EVAS_ENGINE
    export ELM_DISPLAY
    export ELM_ENGINE
    export ELM_ACCEL
    export QT_QPA_PLATFORM
    export QT_WAYLAND_FORCE_DPI
    export QT_WAYLAND_DISABLE_WINDOWDECORATION
    export MOZ_ENABLE_WAYLAND
    export SWAYROOT
}

_exports_for_x11 () {
    _common_exports

    XDG_SESSION_TYPE="x11"
    SDL_VIDEODRIVER="x11"
    I3ROOT="${XDG_CONFIG_HOME:-${HOME}/.config}/i3"

    export XDG_SESSION_TYPE
    export SDL_VIDEODRIVER
    export I3ROOT

    unset ECORE_EVAS_ENGINE
    unset ELM_DISPLAY
    unset ELM_ENGINE
    unset ELM_ACCEL
    unset QT_QPA_PLATFORM
    unset QT_WAYLAND_FORCE_DPI
    unset QT_WAYLAND_DISABLE_WINDOWDECORATION
    unset MOZ_ENABLE_WAYLAND
}

_exports_for_proxies () {
    if [ -z "${export_proxies}" ]; then
        printf "Export proxies?[y/N]:\t"
        read -r export_proxies
    fi
    case "${export_proxies}}" in
        Y*|y*)
            all_proxy="$("${RUNCOMDIR:-${HOME}/.runcom}"/bin/proxy_extract.sh)"
            http_proxy="${all_proxy}"
            https_proxy="${all_proxy}"
            ftp_proxy="${all_proxy}"
            ftps_proxy="${all_proxy}"

            export all_proxy
            export http_proxy
            export https_proxy
            export ftp_proxy
            export ftps_proxy
            ;;
        *)
            ;;
    esac

}

_clean_up_tty() {
    _common_exports
    if [ "$TERM" = "linux" ]; then
        printf "\e]P0000000" #black
        printf "\e]P83f3f3f" #darkgrey
        printf "\e]P19f3f3f" #darkred
        printf "\e]P9ff9f9f" #red
        printf "\e]P23f9f3f" #darkgreen
        printf "\e]PAbfefbf" #green
        printf "\e]P3bf9f3f" #brown
        printf "\e]PB9fff9f" #yellow
        printf "\e]P45f5f9f" #darkblue
        printf "\e]PC9f9fff" #blue
        printf "\e]P59f3f9f" #darkmagenta
        printf "\e]PDff9fff" #magenta
        printf "\e]P63f9f9f" #darkcyan
        printf "\e]PE9fffff" #cyan
        printf "\e]P7afafaf" #lightgrey
        printf "\e]PFffffff" #white
        clear #for background artifacting
    fi
}

_select_display_protocol () {
    mkdir -p "${XDG_STATE_HOME:-${HOME}/.local/state}/runcom"
    default_proto="$(cat "${XDG_STATE_HOME:-${HOME}/.local/state}/runcom/graph_proto")" 2>/dev/null
    if [ -z "${default_proto}" ]; then
        default_proto="non-graphical"
    fi
    echo ""
    echo "Display protocols [${default_proto}]"
    graph_proto="$(posix_select "wayland" "x11" "non-graphical")"
    if [ -n "${graph_proto}" ]; then
        echo "${graph_proto}" \
             > "${XDG_STATE_HOME:-${HOME}/.local/state}/runcom/graph_proto"
    else
        graph_proto="${default_proto}"
    fi
    unset default_proto
}

_select_wayland_session () {
    default_session="$(cat "${XDG_STATE_HOME:-${HOME}/.local/state}/runcom/wayland_session")" 2>/dev/null
    if [ -z "${default_session}" ]; then
        default_session=".wayinitrc"
    fi
    echo ""
    echo "Wayland sessions [${default_session}]"

    # shellcheck disable=SC2046
    exec_session="$(posix_select $(ls "/usr/share/wayland-sessions"))"
    if [ -n "${exec_session}" ]; then
        echo "${exec_session}" \
             > "${XDG_STATE_HOME:-${HOME}/.local/state}/runcom/wayland_session"
    else
        exec_session="${default_session}"
    fi
    unset default_session
}


_select_x11_session () {
    default_session="$(cat "${XDG_STATE_HOME:-${HOME}/.local/state}/runcom/xsession")" 2>/dev/null
    if [ -z "${default_session}" ]; then
        default_session=".xinitrc"
    fi
    echo "X11 sessions [${default_session}]"
    # shellcheck disable=SC2046
    exec_session="$(posix_select $(ls "/usr/share/xsessions"))"
    if [ -n "${exec_session}" ]; then
        echo "${exec_session}" \
             > "${XDG_STATE_HOME:-${HOME}/.local/state}/runcom/x11_session"
    else
        exec_session="${default_session}"
    fi
    unset default_session
}

main () {
    _exports_for_proxies
    if ${RUNCOM_LAUNCH_UI}; then
        nowtty="$(tty)"
        if [ -z "${RUNCOM_SESSION}" ]; then
            if [ ! "${nowtty#/dev/tty}" = "${nowtty}" ]; then
                _select_display_protocol
                if [ "${graph_proto}" = "x11" ]; then
                    _exports_for_x11
                    _select_x11_session
                    export RUNCOM_SESSION="${graph_proto}: ${exec_session}"
                    exec "${RUNCOMDIR}/bin/x11start" "${exec_session}"
                elif [ "${graph_proto}" = "wayland" ]; then
                    _exports_for_wayland
                    _select_wayland_session
                    export RUNCOM_SESSION="${graph_proto}: ${exec_session}"
                    exec "${RUNCOMDIR}/bin/waystart" "${exec_session}"
                fi
            fi
        fi
    fi
    unset nowtty graph_proto exec_session RUNCOM_SESSION
    _clean_up_tty
}

main "$@"
